
E-design project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c05c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800c1f8  0800c1f8  0001c1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c548  0800c548  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800c548  0800c548  0001c548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c550  0800c550  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c550  0800c550  0001c550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c554  0800c554  0001c554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800c558  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a8  20000068  0800c5c0  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001310  0800c5c0  00021310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fb0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024b5  00000000  00000000  00035048  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00037500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001068  00000000  00000000  00038620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000222c5  00000000  00000000  00039688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000103db  00000000  00000000  0005b94d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5ef5  00000000  00000000  0006bd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d28  00000000  00000000  00141c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c1dc 	.word	0x0800c1dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	0800c1dc 	.word	0x0800c1dc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b994 	b.w	8000e54 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f828 	bl	8000b88 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2ulz>:
 8000b44:	b5d0      	push	{r4, r6, r7, lr}
 8000b46:	2200      	movs	r2, #0
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <__aeabi_d2ulz+0x3c>)
 8000b4a:	4606      	mov	r6, r0
 8000b4c:	460f      	mov	r7, r1
 8000b4e:	f7ff fcff 	bl	8000550 <__aeabi_dmul>
 8000b52:	f7ff ffbf 	bl	8000ad4 <__aeabi_d2uiz>
 8000b56:	4604      	mov	r4, r0
 8000b58:	f7ff fc80 	bl	800045c <__aeabi_ui2d>
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <__aeabi_d2ulz+0x40>)
 8000b60:	f7ff fcf6 	bl	8000550 <__aeabi_dmul>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	4630      	mov	r0, r6
 8000b6a:	4639      	mov	r1, r7
 8000b6c:	f7ff fb38 	bl	80001e0 <__aeabi_dsub>
 8000b70:	f7ff ffb0 	bl	8000ad4 <__aeabi_d2uiz>
 8000b74:	2200      	movs	r2, #0
 8000b76:	4623      	mov	r3, r4
 8000b78:	4310      	orrs	r0, r2
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	bdd0      	pop	{r4, r6, r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	3df00000 	.word	0x3df00000
 8000b84:	41f00000 	.word	0x41f00000

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <delay>:
output_branch_state = 1;
display_state = 1;
*/

void delay (uint16_t us)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <delay+0x2c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000e6a:	bf00      	nop
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <delay+0x2c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d3f9      	bcc.n	8000e6c <delay+0x14>
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	200011e0 	.word	0x200011e0

08000e88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) {
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b10      	cmp	r3, #16
 8000e96:	d110      	bne.n	8000eba <HAL_GPIO_EXTI_Callback+0x32>
		if ((HAL_GetTick() - lastTick0) > 100) {
 8000e98:	f004 f970 	bl	800517c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	d959      	bls.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
			buttonPressed = 1;
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
			lastTick0 = HAL_GetTick();
 8000eae:	f004 f965 	bl	800517c <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000eb6:	601a      	str	r2, [r3, #0]
		if ((HAL_GetTick() - lastTick4) > 100) {
			upButtonPressed = 1;
			lastTick4 = HAL_GetTick();
		}
	}
}
 8000eb8:	e050      	b.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
	} else if (GPIO_Pin == GPIO_PIN_6) {
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2b40      	cmp	r3, #64	; 0x40
 8000ebe:	d110      	bne.n	8000ee2 <HAL_GPIO_EXTI_Callback+0x5a>
		if (HAL_GetTick() - lastTick1 > 100) {
 8000ec0:	f004 f95c 	bl	800517c <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b64      	cmp	r3, #100	; 0x64
 8000ece:	d945      	bls.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
			downButtonPressed = 1;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
			lastTick1 = HAL_GetTick();
 8000ed6:	f004 f951 	bl	800517c <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	e03c      	b.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
	} else if (GPIO_Pin == GPIO_PIN_7) {
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	2b80      	cmp	r3, #128	; 0x80
 8000ee6:	d110      	bne.n	8000f0a <HAL_GPIO_EXTI_Callback+0x82>
		if (HAL_GetTick() - lastTick2 > 100) {
 8000ee8:	f004 f948 	bl	800517c <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_GPIO_EXTI_Callback+0xec>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b64      	cmp	r3, #100	; 0x64
 8000ef6:	d931      	bls.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
			rightButtonPressed = 1;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
			lastTick2 = HAL_GetTick();
 8000efe:	f004 f93d 	bl	800517c <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_GPIO_EXTI_Callback+0xec>)
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	e028      	b.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
	} else if (GPIO_Pin == GPIO_PIN_8) {
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f10:	d110      	bne.n	8000f34 <HAL_GPIO_EXTI_Callback+0xac>
		if (HAL_GetTick() - lastTick3 > 100) {
 8000f12:	f004 f933 	bl	800517c <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d91c      	bls.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
			leftButtonPressed = 1;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
			lastTick3 = HAL_GetTick();
 8000f28:	f004 f928 	bl	800517c <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	e013      	b.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
	} else if (GPIO_Pin == GPIO_PIN_9) {
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f3a:	d10f      	bne.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
		if ((HAL_GetTick() - lastTick4) > 100) {
 8000f3c:	f004 f91e 	bl	800517c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b64      	cmp	r3, #100	; 0x64
 8000f4a:	d907      	bls.n	8000f5c <HAL_GPIO_EXTI_Callback+0xd4>
			upButtonPressed = 1;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x100>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
			lastTick4 = HAL_GetTick();
 8000f52:	f004 f913 	bl	800517c <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000100 	.word	0x20000100
 8000f68:	2000023c 	.word	0x2000023c
 8000f6c:	20000104 	.word	0x20000104
 8000f70:	20000234 	.word	0x20000234
 8000f74:	20000108 	.word	0x20000108
 8000f78:	2000122c 	.word	0x2000122c
 8000f7c:	2000010c 	.word	0x2000010c
 8000f80:	20001230 	.word	0x20001230
 8000f84:	20000110 	.word	0x20000110
 8000f88:	20000114 	.word	0x20000114

08000f8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	if (rx[0] != 10)
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_UART_RxCpltCallback+0x64>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b0a      	cmp	r3, #10
 8000f9a:	d00d      	beq.n	8000fb8 <HAL_UART_RxCpltCallback+0x2c>
	{
		input[counter] = rx[0];
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_UART_RxCpltCallback+0x68>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_UART_RxCpltCallback+0x64>)
 8000fa4:	7819      	ldrb	r1, [r3, #0]
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_UART_RxCpltCallback+0x6c>)
 8000fa8:	5499      	strb	r1, [r3, r2]
		counter++;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_UART_RxCpltCallback+0x68>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_UART_RxCpltCallback+0x68>)
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e011      	b.n	8000fdc <HAL_UART_RxCpltCallback+0x50>
	}
	else
	{
		input[counter] = 10;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_UART_RxCpltCallback+0x68>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_UART_RxCpltCallback+0x6c>)
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	5499      	strb	r1, [r3, r2]
		numBytes = counter+1;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_UART_RxCpltCallback+0x68>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_UART_RxCpltCallback+0x70>)
 8000fce:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_UART_RxCpltCallback+0x68>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
		receiveCommand = 1;
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_UART_RxCpltCallback+0x74>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2, rx, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <HAL_UART_RxCpltCallback+0x64>)
 8000fe0:	4808      	ldr	r0, [pc, #32]	; (8001004 <HAL_UART_RxCpltCallback+0x78>)
 8000fe2:	f008 ff35 	bl	8009e50 <HAL_UART_Receive_IT>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000190 	.word	0x20000190
 8000ff4:	200000f0 	.word	0x200000f0
 8000ff8:	20000130 	.word	0x20000130
 8000ffc:	20000238 	.word	0x20000238
 8001000:	20000084 	.word	0x20000084
 8001004:	20001280 	.word	0x20001280

08001008 <determineCommandType>:

void determineCommandType()
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

	if (input[0] == 64 && input[2] == 35)
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <determineCommandType+0x9c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b40      	cmp	r3, #64	; 0x40
 8001012:	d107      	bne.n	8001024 <determineCommandType+0x1c>
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <determineCommandType+0x9c>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	2b23      	cmp	r3, #35	; 0x23
 800101a:	d103      	bne.n	8001024 <determineCommandType+0x1c>
	{
		commandType = 1;
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <determineCommandType+0xa0>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e03a      	b.n	800109a <determineCommandType+0x92>
	}
	else if (input[0] == 64 && input[2] == 36)
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <determineCommandType+0x9c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b40      	cmp	r3, #64	; 0x40
 800102a:	d107      	bne.n	800103c <determineCommandType+0x34>
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <determineCommandType+0x9c>)
 800102e:	789b      	ldrb	r3, [r3, #2]
 8001030:	2b24      	cmp	r3, #36	; 0x24
 8001032:	d103      	bne.n	800103c <determineCommandType+0x34>
	{
		commandType = 2;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <determineCommandType+0xa0>)
 8001036:	2202      	movs	r2, #2
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e02e      	b.n	800109a <determineCommandType+0x92>
	}
	else if (input[0] == 64 && input[2] == 94)
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <determineCommandType+0x9c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b40      	cmp	r3, #64	; 0x40
 8001042:	d107      	bne.n	8001054 <determineCommandType+0x4c>
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <determineCommandType+0x9c>)
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	2b5e      	cmp	r3, #94	; 0x5e
 800104a:	d103      	bne.n	8001054 <determineCommandType+0x4c>
	{
		commandType = 3;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <determineCommandType+0xa0>)
 800104e:	2203      	movs	r2, #3
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e022      	b.n	800109a <determineCommandType+0x92>
	}
	else if (input[0] == 64 && input[2] == 42 && input[4] == 115)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <determineCommandType+0x9c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b40      	cmp	r3, #64	; 0x40
 800105a:	d10b      	bne.n	8001074 <determineCommandType+0x6c>
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <determineCommandType+0x9c>)
 800105e:	789b      	ldrb	r3, [r3, #2]
 8001060:	2b2a      	cmp	r3, #42	; 0x2a
 8001062:	d107      	bne.n	8001074 <determineCommandType+0x6c>
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <determineCommandType+0x9c>)
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	2b73      	cmp	r3, #115	; 0x73
 800106a:	d103      	bne.n	8001074 <determineCommandType+0x6c>
	{
		commandType = 4;
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <determineCommandType+0xa0>)
 800106e:	2204      	movs	r2, #4
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e012      	b.n	800109a <determineCommandType+0x92>
	}
	else if (input[0] == 64 && input[2] == 42 && input[4] == 109)
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <determineCommandType+0x9c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b40      	cmp	r3, #64	; 0x40
 800107a:	d10b      	bne.n	8001094 <determineCommandType+0x8c>
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <determineCommandType+0x9c>)
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b2a      	cmp	r3, #42	; 0x2a
 8001082:	d107      	bne.n	8001094 <determineCommandType+0x8c>
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <determineCommandType+0x9c>)
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	2b6d      	cmp	r3, #109	; 0x6d
 800108a:	d103      	bne.n	8001094 <determineCommandType+0x8c>
	{
		commandType = 5;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <determineCommandType+0xa0>)
 800108e:	2205      	movs	r2, #5
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e002      	b.n	800109a <determineCommandType+0x92>
	}
	else
	{
		commandType = 0;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <determineCommandType+0xa0>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
	}
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000130 	.word	0x20000130
 80010a8:	20000085 	.word	0x20000085
 80010ac:	00000000 	.word	0x00000000

080010b0 <adc_Measure>:

void adc_Measure() {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 80010b6:	4828      	ldr	r0, [pc, #160]	; (8001158 <adc_Measure+0xa8>)
 80010b8:	f004 fa88 	bl	80055cc <HAL_ADC_Start>
	HAL_StatusTypeDef res = HAL_ADC_PollForConversion(&hadc1, 50);
 80010bc:	2132      	movs	r1, #50	; 0x32
 80010be:	4826      	ldr	r0, [pc, #152]	; (8001158 <adc_Measure+0xa8>)
 80010c0:	f004 fbd0 	bl	8005864 <HAL_ADC_PollForConversion>
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]



	if (res == HAL_OK) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 81fd 	bne.w	80014ca <adc_Measure+0x41a>


		adc_measure = HAL_ADC_GetValue(&hadc1);
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <adc_Measure+0xa8>)
 80010d2:	f004 fcc9 	bl	8005a68 <HAL_ADC_GetValue>
 80010d6:	4602      	mov	r2, r0
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <adc_Measure+0xac>)
 80010da:	601a      	str	r2, [r3, #0]


		//calibrating error of adc value:
		if (adc_measure > 100 && adc_measure < 200) {
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <adc_Measure+0xac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d909      	bls.n	80010f8 <adc_Measure+0x48>
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <adc_Measure+0xac>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2bc7      	cmp	r3, #199	; 0xc7
 80010ea:	d805      	bhi.n	80010f8 <adc_Measure+0x48>
			adc_measure += 50;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <adc_Measure+0xac>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3332      	adds	r3, #50	; 0x32
 80010f2:	4a1a      	ldr	r2, [pc, #104]	; (800115c <adc_Measure+0xac>)
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e03d      	b.n	8001174 <adc_Measure+0xc4>
		}
		else if (adc_measure >= 200 && adc_measure < 300)
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <adc_Measure+0xac>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2bc7      	cmp	r3, #199	; 0xc7
 80010fe:	d90a      	bls.n	8001116 <adc_Measure+0x66>
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <adc_Measure+0xac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001108:	d205      	bcs.n	8001116 <adc_Measure+0x66>
		{
			adc_measure += 60;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <adc_Measure+0xac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	333c      	adds	r3, #60	; 0x3c
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <adc_Measure+0xac>)
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e02e      	b.n	8001174 <adc_Measure+0xc4>
		}
		else if (adc_measure >= 300 && adc_measure < 400)
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <adc_Measure+0xac>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800111e:	d30a      	bcc.n	8001136 <adc_Measure+0x86>
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <adc_Measure+0xac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001128:	d205      	bcs.n	8001136 <adc_Measure+0x86>
		{
			adc_measure += 75;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <adc_Measure+0xac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	334b      	adds	r3, #75	; 0x4b
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <adc_Measure+0xac>)
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e01e      	b.n	8001174 <adc_Measure+0xc4>
		}
		else if (adc_measure >= 400 && adc_measure <1000)
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <adc_Measure+0xac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800113e:	d30f      	bcc.n	8001160 <adc_Measure+0xb0>
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <adc_Measure+0xac>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001148:	d20a      	bcs.n	8001160 <adc_Measure+0xb0>
		{
			adc_measure += 110;
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <adc_Measure+0xac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	336e      	adds	r3, #110	; 0x6e
 8001150:	4a02      	ldr	r2, [pc, #8]	; (800115c <adc_Measure+0xac>)
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e00e      	b.n	8001174 <adc_Measure+0xc4>
 8001156:	bf00      	nop
 8001158:	200001e4 	.word	0x200001e4
 800115c:	20000088 	.word	0x20000088
		}
		else if (adc_measure >= 1000)
 8001160:	4ba9      	ldr	r3, [pc, #676]	; (8001408 <adc_Measure+0x358>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001168:	d304      	bcc.n	8001174 <adc_Measure+0xc4>
		{
			adc_measure += 120;
 800116a:	4ba7      	ldr	r3, [pc, #668]	; (8001408 <adc_Measure+0x358>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3378      	adds	r3, #120	; 0x78
 8001170:	4aa5      	ldr	r2, [pc, #660]	; (8001408 <adc_Measure+0x358>)
 8001172:	6013      	str	r3, [r2, #0]
		}



		if (measurementMode[0] == 'D' && measurementMode[1] == 'V') {
 8001174:	4ba5      	ldr	r3, [pc, #660]	; (800140c <adc_Measure+0x35c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b44      	cmp	r3, #68	; 0x44
 800117a:	d150      	bne.n	800121e <adc_Measure+0x16e>
 800117c:	4ba3      	ldr	r3, [pc, #652]	; (800140c <adc_Measure+0x35c>)
 800117e:	785b      	ldrb	r3, [r3, #1]
 8001180:	2b56      	cmp	r3, #86	; 0x56
 8001182:	d14c      	bne.n	800121e <adc_Measure+0x16e>

			//for dc count measurements and sum measurements
			//avg = total/count
			total_measured += adc_measure;
 8001184:	4ba2      	ldr	r3, [pc, #648]	; (8001410 <adc_Measure+0x360>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b9f      	ldr	r3, [pc, #636]	; (8001408 <adc_Measure+0x358>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4413      	add	r3, r2
 800118e:	4aa0      	ldr	r2, [pc, #640]	; (8001410 <adc_Measure+0x360>)
 8001190:	6013      	str	r3, [r2, #0]
			if (nr_measured_dv == 2000) {
 8001192:	4ba0      	ldr	r3, [pc, #640]	; (8001414 <adc_Measure+0x364>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800119a:	d13b      	bne.n	8001214 <adc_Measure+0x164>
				avg_dv_val = total_measured / nr_measured_dv;
 800119c:	4b9c      	ldr	r3, [pc, #624]	; (8001410 <adc_Measure+0x360>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b9c      	ldr	r3, [pc, #624]	; (8001414 <adc_Measure+0x364>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f957 	bl	800045c <__aeabi_ui2d>
 80011ae:	4603      	mov	r3, r0
 80011b0:	460c      	mov	r4, r1
 80011b2:	4a99      	ldr	r2, [pc, #612]	; (8001418 <adc_Measure+0x368>)
 80011b4:	e9c2 3400 	strd	r3, r4, [r2]
				avg_dv_val = avg_dv_val / 4095 * 3300;
 80011b8:	4b97      	ldr	r3, [pc, #604]	; (8001418 <adc_Measure+0x368>)
 80011ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011be:	a38e      	add	r3, pc, #568	; (adr r3, 80013f8 <adc_Measure+0x348>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff faee 	bl	80007a4 <__aeabi_ddiv>
 80011c8:	4603      	mov	r3, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	4618      	mov	r0, r3
 80011ce:	4621      	mov	r1, r4
 80011d0:	a38b      	add	r3, pc, #556	; (adr r3, 8001400 <adc_Measure+0x350>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff f9bb 	bl	8000550 <__aeabi_dmul>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	4a8e      	ldr	r2, [pc, #568]	; (8001418 <adc_Measure+0x368>)
 80011e0:	e9c2 3400 	strd	r3, r4, [r2]
				avg_dv_int = (uint64_t) (avg_dv_val*2);
 80011e4:	4b8c      	ldr	r3, [pc, #560]	; (8001418 <adc_Measure+0x368>)
 80011e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	f7fe fff9 	bl	80001e4 <__adddf3>
 80011f2:	4603      	mov	r3, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	4618      	mov	r0, r3
 80011f8:	4621      	mov	r1, r4
 80011fa:	f7ff fca3 	bl	8000b44 <__aeabi_d2ulz>
 80011fe:	4603      	mov	r3, r0
 8001200:	460c      	mov	r4, r1
 8001202:	4a86      	ldr	r2, [pc, #536]	; (800141c <adc_Measure+0x36c>)
 8001204:	e9c2 3400 	strd	r3, r4, [r2]
				total_measured = 0;
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <adc_Measure+0x360>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
				nr_measured_dv = 1;
 800120e:	4b81      	ldr	r3, [pc, #516]	; (8001414 <adc_Measure+0x364>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]

			}
			nr_measured_dv++;
 8001214:	4b7f      	ldr	r3, [pc, #508]	; (8001414 <adc_Measure+0x364>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a7e      	ldr	r2, [pc, #504]	; (8001414 <adc_Measure+0x364>)
 800121c:	6013      	str	r3, [r2, #0]
		}

		if (measurementMode[0] == 'A' && measurementMode[1] == 'V') {
 800121e:	4b7b      	ldr	r3, [pc, #492]	; (800140c <adc_Measure+0x35c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b41      	cmp	r3, #65	; 0x41
 8001224:	f040 8151 	bne.w	80014ca <adc_Measure+0x41a>
 8001228:	4b78      	ldr	r3, [pc, #480]	; (800140c <adc_Measure+0x35c>)
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	2b56      	cmp	r3, #86	; 0x56
 800122e:	f040 814c 	bne.w	80014ca <adc_Measure+0x41a>
			//get max
			if (adc_measure >= max) {
 8001232:	4b75      	ldr	r3, [pc, #468]	; (8001408 <adc_Measure+0x358>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b7a      	ldr	r3, [pc, #488]	; (8001420 <adc_Measure+0x370>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d303      	bcc.n	8001246 <adc_Measure+0x196>
				max = adc_measure;
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <adc_Measure+0x358>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a77      	ldr	r2, [pc, #476]	; (8001420 <adc_Measure+0x370>)
 8001244:	6013      	str	r3, [r2, #0]
			}
			//get min
			if (adc_measure <= min) {
 8001246:	4b70      	ldr	r3, [pc, #448]	; (8001408 <adc_Measure+0x358>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <adc_Measure+0x374>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d803      	bhi.n	800125a <adc_Measure+0x1aa>
				min = adc_measure;
 8001252:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <adc_Measure+0x358>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a73      	ldr	r2, [pc, #460]	; (8001424 <adc_Measure+0x374>)
 8001258:	6013      	str	r3, [r2, #0]
			}

			//counts how many times avg crossed
			//only triggered to count once every period (min_reached controls this)
			if ((adc_measure >= avg_av_val) && (min_reached)) {
 800125a:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <adc_Measure+0x358>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f8fc 	bl	800045c <__aeabi_ui2d>
 8001264:	4b70      	ldr	r3, [pc, #448]	; (8001428 <adc_Measure+0x378>)
 8001266:	e9d3 3400 	ldrd	r3, r4, [r3]
 800126a:	461a      	mov	r2, r3
 800126c:	4623      	mov	r3, r4
 800126e:	f7ff fbf5 	bl	8000a5c <__aeabi_dcmpge>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d046      	beq.n	8001306 <adc_Measure+0x256>
 8001278:	4b6c      	ldr	r3, [pc, #432]	; (800142c <adc_Measure+0x37c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d042      	beq.n	8001306 <adc_Measure+0x256>
				max_reached = 1;
 8001280:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <adc_Measure+0x380>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
				avg_cross++;
 8001286:	4b6b      	ldr	r3, [pc, #428]	; (8001434 <adc_Measure+0x384>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a69      	ldr	r2, [pc, #420]	; (8001434 <adc_Measure+0x384>)
 800128e:	6013      	str	r3, [r2, #0]

				//freq avg in 100 waves
				if (avg_cross == 100) {
 8001290:	4b68      	ldr	r3, [pc, #416]	; (8001434 <adc_Measure+0x384>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b64      	cmp	r3, #100	; 0x64
 8001296:	d133      	bne.n	8001300 <adc_Measure+0x250>
					//freg = asamp_freq/(nr_samples since last avg cross)
					freq = (sampling_freq / nr_samples) * 100;
 8001298:	4b67      	ldr	r3, [pc, #412]	; (8001438 <adc_Measure+0x388>)
 800129a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <adc_Measure+0x38c>)
 80012a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4623      	mov	r3, r4
 80012a8:	f7ff fa7c 	bl	80007a4 <__aeabi_ddiv>
 80012ac:	4603      	mov	r3, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	4618      	mov	r0, r3
 80012b2:	4621      	mov	r1, r4
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b61      	ldr	r3, [pc, #388]	; (8001440 <adc_Measure+0x390>)
 80012ba:	f7ff f949 	bl	8000550 <__aeabi_dmul>
 80012be:	4603      	mov	r3, r0
 80012c0:	460c      	mov	r4, r1
 80012c2:	4a60      	ldr	r2, [pc, #384]	; (8001444 <adc_Measure+0x394>)
 80012c4:	e9c2 3400 	strd	r3, r4, [r2]
					freq_int = (uint64_t) (freq*2);
 80012c8:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <adc_Measure+0x394>)
 80012ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	f7fe ff87 	bl	80001e4 <__adddf3>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	f7ff fc31 	bl	8000b44 <__aeabi_d2ulz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	4a58      	ldr	r2, [pc, #352]	; (8001448 <adc_Measure+0x398>)
 80012e8:	e9c2 3400 	strd	r3, r4, [r2]
					nr_samples = 0;
 80012ec:	4a53      	ldr	r2, [pc, #332]	; (800143c <adc_Measure+0x38c>)
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	e9c2 3400 	strd	r3, r4, [r2]
					avg_cross = 0;
 80012fa:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <adc_Measure+0x384>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
				}
				min_reached = 0;
 8001300:	4b4a      	ldr	r3, [pc, #296]	; (800142c <adc_Measure+0x37c>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
			}

			nr_samples += 1;
 8001306:	4b4d      	ldr	r3, [pc, #308]	; (800143c <adc_Measure+0x38c>)
 8001308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b4e      	ldr	r3, [pc, #312]	; (800144c <adc_Measure+0x39c>)
 8001312:	f7fe ff67 	bl	80001e4 <__adddf3>
 8001316:	4603      	mov	r3, r0
 8001318:	460c      	mov	r4, r1
 800131a:	4a48      	ldr	r2, [pc, #288]	; (800143c <adc_Measure+0x38c>)
 800131c:	e9c2 3400 	strd	r3, r4, [r2]

			if ((adc_measure <= avg_av_val) && (max_reached)) {
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <adc_Measure+0x358>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f899 	bl	800045c <__aeabi_ui2d>
 800132a:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <adc_Measure+0x378>)
 800132c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	f7ff fb88 	bl	8000a48 <__aeabi_dcmple>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <adc_Measure+0x2a2>
 800133e:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <adc_Measure+0x380>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <adc_Measure+0x2a2>
				min_reached = 1;
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <adc_Measure+0x37c>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
				max_reached = 0;
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <adc_Measure+0x380>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
			}

			total_measured += adc_measure;
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <adc_Measure+0x360>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <adc_Measure+0x358>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a2c      	ldr	r2, [pc, #176]	; (8001410 <adc_Measure+0x360>)
 800135e:	6013      	str	r3, [r2, #0]
			nr_measured_av++;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <adc_Measure+0x3a0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <adc_Measure+0x3a0>)
 8001368:	6013      	str	r3, [r2, #0]

			if (nr_measured_av == 7000) {
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <adc_Measure+0x3a0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001372:	4293      	cmp	r3, r2
 8001374:	f040 80a9 	bne.w	80014ca <adc_Measure+0x41a>
				avg_av_val = total_measured / nr_measured_av;
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <adc_Measure+0x360>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <adc_Measure+0x3a0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f869 	bl	800045c <__aeabi_ui2d>
 800138a:	4603      	mov	r3, r0
 800138c:	460c      	mov	r4, r1
 800138e:	4a26      	ldr	r2, [pc, #152]	; (8001428 <adc_Measure+0x378>)
 8001390:	e9c2 3400 	strd	r3, r4, [r2]
				pk_volt = max - min;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <adc_Measure+0x370>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <adc_Measure+0x374>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f85c 	bl	800045c <__aeabi_ui2d>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <adc_Measure+0x3a4>)
 80013aa:	e9c2 3400 	strd	r3, r4, [r2]
				pk_volt = (pk_volt) / 4095 * 3300;
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <adc_Measure+0x3a4>)
 80013b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b4:	a310      	add	r3, pc, #64	; (adr r3, 80013f8 <adc_Measure+0x348>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff f9f3 	bl	80007a4 <__aeabi_ddiv>
 80013be:	4603      	mov	r3, r0
 80013c0:	460c      	mov	r4, r1
 80013c2:	4618      	mov	r0, r3
 80013c4:	4621      	mov	r1, r4
 80013c6:	a30e      	add	r3, pc, #56	; (adr r3, 8001400 <adc_Measure+0x350>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff f8c0 	bl	8000550 <__aeabi_dmul>
 80013d0:	4603      	mov	r3, r0
 80013d2:	460c      	mov	r4, r1
 80013d4:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <adc_Measure+0x3a4>)
 80013d6:	e9c2 3400 	strd	r3, r4, [r2]

				amp_int = (uint64_t) (pk_volt*2);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <adc_Measure+0x3a4>)
 80013dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	f7fe fefe 	bl	80001e4 <__adddf3>
 80013e8:	4603      	mov	r3, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	4618      	mov	r0, r3
 80013ee:	4621      	mov	r1, r4
 80013f0:	f7ff fba8 	bl	8000b44 <__aeabi_d2ulz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	e02f      	b.n	8001458 <adc_Measure+0x3a8>
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40affe00 	.word	0x40affe00
 8001400:	00000000 	.word	0x00000000
 8001404:	40a9c800 	.word	0x40a9c800
 8001408:	20000088 	.word	0x20000088
 800140c:	20000010 	.word	0x20000010
 8001410:	200000a8 	.word	0x200000a8
 8001414:	20000014 	.word	0x20000014
 8001418:	200000b0 	.word	0x200000b0
 800141c:	20000030 	.word	0x20000030
 8001420:	200000c0 	.word	0x200000c0
 8001424:	2000001c 	.word	0x2000001c
 8001428:	200000b8 	.word	0x200000b8
 800142c:	2000008c 	.word	0x2000008c
 8001430:	20000013 	.word	0x20000013
 8001434:	200000d0 	.word	0x200000d0
 8001438:	20000020 	.word	0x20000020
 800143c:	200000c8 	.word	0x200000c8
 8001440:	40590000 	.word	0x40590000
 8001444:	20000090 	.word	0x20000090
 8001448:	200000d8 	.word	0x200000d8
 800144c:	3ff00000 	.word	0x3ff00000
 8001450:	20000018 	.word	0x20000018
 8001454:	20000098 	.word	0x20000098
 8001458:	460c      	mov	r4, r1
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <adc_Measure+0x438>)
 800145c:	e9c2 3400 	strd	r3, r4, [r2]

				offset = avg_av_val / 4095 * 3300;
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <adc_Measure+0x43c>)
 8001462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001466:	a31c      	add	r3, pc, #112	; (adr r3, 80014d8 <adc_Measure+0x428>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f99a 	bl	80007a4 <__aeabi_ddiv>
 8001470:	4603      	mov	r3, r0
 8001472:	460c      	mov	r4, r1
 8001474:	4618      	mov	r0, r3
 8001476:	4621      	mov	r1, r4
 8001478:	a319      	add	r3, pc, #100	; (adr r3, 80014e0 <adc_Measure+0x430>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f867 	bl	8000550 <__aeabi_dmul>
 8001482:	4603      	mov	r3, r0
 8001484:	460c      	mov	r4, r1
 8001486:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <adc_Measure+0x440>)
 8001488:	e9c2 3400 	strd	r3, r4, [r2]
				offset_int = (uint64_t) (offset*2);
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <adc_Measure+0x440>)
 800148e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	f7fe fea5 	bl	80001e4 <__adddf3>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	4618      	mov	r0, r3
 80014a0:	4621      	mov	r1, r4
 80014a2:	f7ff fb4f 	bl	8000b44 <__aeabi_d2ulz>
 80014a6:	4603      	mov	r3, r0
 80014a8:	460c      	mov	r4, r1
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <adc_Measure+0x444>)
 80014ac:	e9c2 3400 	strd	r3, r4, [r2]

				total_measured = 0;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <adc_Measure+0x448>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
				nr_measured_av = 0;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <adc_Measure+0x44c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
				max = 0;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <adc_Measure+0x450>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
				min = 4095;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <adc_Measure+0x454>)
 80014c4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014c8:	601a      	str	r2, [r3, #0]
			}

		}
	}
	HAL_ADC_Stop(&hadc1);
 80014ca:	480f      	ldr	r0, [pc, #60]	; (8001508 <adc_Measure+0x458>)
 80014cc:	f004 f994 	bl	80057f8 <HAL_ADC_Stop>
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40affe00 	.word	0x40affe00
 80014e0:	00000000 	.word	0x00000000
 80014e4:	40a9c800 	.word	0x40a9c800
 80014e8:	200000e8 	.word	0x200000e8
 80014ec:	200000b8 	.word	0x200000b8
 80014f0:	200000a0 	.word	0x200000a0
 80014f4:	200000e0 	.word	0x200000e0
 80014f8:	200000a8 	.word	0x200000a8
 80014fc:	20000018 	.word	0x20000018
 8001500:	200000c0 	.word	0x200000c0
 8001504:	2000001c 	.word	0x2000001c
 8001508:	200001e4 	.word	0x200001e4

0800150c <commandFourResponse>:

void commandFourResponse()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
	outputState = input[6]-48;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <commandFourResponse+0x60>)
 8001514:	799b      	ldrb	r3, [r3, #6]
 8001516:	3b30      	subs	r3, #48	; 0x30
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <commandFourResponse+0x64>)
 800151c:	701a      	strb	r2, [r3, #0]
	if (outputState == 1)
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <commandFourResponse+0x64>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d102      	bne.n	800152c <commandFourResponse+0x20>
	{
		stopDMA = 0;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <commandFourResponse+0x68>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t statusMessage[11] = "@,xx,x,x,!x";
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <commandFourResponse+0x6c>)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	ca07      	ldmia	r2, {r0, r1, r2}
 8001532:	c303      	stmia	r3!, {r0, r1}
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	3302      	adds	r3, #2
 8001538:	0c12      	lsrs	r2, r2, #16
 800153a:	701a      	strb	r2, [r3, #0]
	statusMessage[2] = measurementMode[0];
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <commandFourResponse+0x70>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	71bb      	strb	r3, [r7, #6]
	statusMessage[3] = measurementMode[1];
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <commandFourResponse+0x70>)
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	71fb      	strb	r3, [r7, #7]
	statusMessage[5] = signal_type_DAC[0];
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <commandFourResponse+0x74>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	727b      	strb	r3, [r7, #9]
	statusMessage[7] = input[6];
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <commandFourResponse+0x60>)
 8001550:	799b      	ldrb	r3, [r3, #6]
 8001552:	72fb      	strb	r3, [r7, #11]
	statusMessage[10] = 10;
 8001554:	230a      	movs	r3, #10
 8001556:	73bb      	strb	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, statusMessage, 11, 50);
 8001558:	1d39      	adds	r1, r7, #4
 800155a:	2332      	movs	r3, #50	; 0x32
 800155c:	220b      	movs	r2, #11
 800155e:	4809      	ldr	r0, [pc, #36]	; (8001584 <commandFourResponse+0x78>)
 8001560:	f008 fbe2 	bl	8009d28 <HAL_UART_Transmit>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000130 	.word	0x20000130
 8001570:	20000012 	.word	0x20000012
 8001574:	200000f2 	.word	0x200000f2
 8001578:	0800c1f8 	.word	0x0800c1f8
 800157c:	20000010 	.word	0x20000010
 8001580:	2000004c 	.word	0x2000004c
 8001584:	20001280 	.word	0x20001280

08001588 <send_to_lcd>:

void send_to_lcd (char data, int rs)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs);  // rs = 1 for data, rs=0 for command
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159e:	4823      	ldr	r0, [pc, #140]	; (800162c <send_to_lcd+0xa4>)
 80015a0:	f005 fea8 	bl	80072f4 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_PORT, D7_PIN, ((data>>3)&0x01));
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	08db      	lsrs	r3, r3, #3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	481e      	ldr	r0, [pc, #120]	; (8001630 <send_to_lcd+0xa8>)
 80015b8:	f005 fe9c 	bl	80072f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_PORT, D6_PIN, ((data>>2)&0x01));
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	4818      	ldr	r0, [pc, #96]	; (8001630 <send_to_lcd+0xa8>)
 80015ce:	f005 fe91 	bl	80072f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, ((data>>1)&0x01));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f005 fe84 	bl	80072f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, ((data>>0)&0x01));
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f005 fe79 	bl	80072f4 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 8001602:	2201      	movs	r2, #1
 8001604:	2102      	movs	r1, #2
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <send_to_lcd+0xa4>)
 8001608:	f005 fe74 	bl	80072f4 <HAL_GPIO_WritePin>
	delay(20);
 800160c:	2014      	movs	r0, #20
 800160e:	f7ff fc23 	bl	8000e58 <delay>
	HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2102      	movs	r1, #2
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <send_to_lcd+0xa4>)
 8001618:	f005 fe6c 	bl	80072f4 <HAL_GPIO_WritePin>
	delay(20);
 800161c:	2014      	movs	r0, #20
 800161e:	f7ff fc1b 	bl	8000e58 <delay>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800

08001634 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
    char datatosend;
    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be while sending command
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff9d 	bl	8001588 <send_to_lcd>
    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff94 	bl	8001588 <send_to_lcd>
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send higher nibble */
    datatosend = ((data>>4)&0x0f);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2101      	movs	r1, #1
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff83 	bl	8001588 <send_to_lcd>
    /* send Lower nibble */
    datatosend = ((data)&0x0f);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	2101      	movs	r1, #1
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff7a 	bl	8001588 <send_to_lcd>
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
    switch (row)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <lcd_put_cur+0x16>
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d005      	beq.n	80016bc <lcd_put_cur+0x20>
 80016b0:	e009      	b.n	80016c6 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	603b      	str	r3, [r7, #0]
            break;
 80016ba:	e004      	b.n	80016c6 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016c2:	603b      	str	r3, [r7, #0]
            break;
 80016c4:	bf00      	nop
    }
    lcd_send_cmd (col);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ffb2 	bl	8001634 <lcd_send_cmd>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <lcd_init>:

void lcd_init (void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    // 4 bit initialisation
    HAL_Delay(50);  // wait for >40ms
 80016dc:	2032      	movs	r0, #50	; 0x32
 80016de:	f003 fd59 	bl	8005194 <HAL_Delay>
    lcd_send_cmd (0x30);
 80016e2:	2030      	movs	r0, #48	; 0x30
 80016e4:	f7ff ffa6 	bl	8001634 <lcd_send_cmd>
    HAL_Delay(5);  // wait for >4.1ms
 80016e8:	2005      	movs	r0, #5
 80016ea:	f003 fd53 	bl	8005194 <HAL_Delay>
    lcd_send_cmd (0x30);
 80016ee:	2030      	movs	r0, #48	; 0x30
 80016f0:	f7ff ffa0 	bl	8001634 <lcd_send_cmd>
    HAL_Delay(1);  // wait for >100us
 80016f4:	2001      	movs	r0, #1
 80016f6:	f003 fd4d 	bl	8005194 <HAL_Delay>
    lcd_send_cmd (0x30);
 80016fa:	2030      	movs	r0, #48	; 0x30
 80016fc:	f7ff ff9a 	bl	8001634 <lcd_send_cmd>
    HAL_Delay(10);
 8001700:	200a      	movs	r0, #10
 8001702:	f003 fd47 	bl	8005194 <HAL_Delay>
    lcd_send_cmd (0x20);  // 4bit mode
 8001706:	2020      	movs	r0, #32
 8001708:	f7ff ff94 	bl	8001634 <lcd_send_cmd>
    HAL_Delay(10);
 800170c:	200a      	movs	r0, #10
 800170e:	f003 fd41 	bl	8005194 <HAL_Delay>

  // dislay initialisation
    lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001712:	2028      	movs	r0, #40	; 0x28
 8001714:	f7ff ff8e 	bl	8001634 <lcd_send_cmd>
    HAL_Delay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f003 fd3b 	bl	8005194 <HAL_Delay>
    lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800171e:	2008      	movs	r0, #8
 8001720:	f7ff ff88 	bl	8001634 <lcd_send_cmd>
    HAL_Delay(1);
 8001724:	2001      	movs	r0, #1
 8001726:	f003 fd35 	bl	8005194 <HAL_Delay>
    lcd_send_cmd (0x01);  // clear display
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff ff82 	bl	8001634 <lcd_send_cmd>
    HAL_Delay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f003 fd2f 	bl	8005194 <HAL_Delay>
    HAL_Delay(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f003 fd2c 	bl	8005194 <HAL_Delay>
    lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800173c:	2006      	movs	r0, #6
 800173e:	f7ff ff79 	bl	8001634 <lcd_send_cmd>
    HAL_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f003 fd26 	bl	8005194 <HAL_Delay>
    lcd_send_cmd (0x0E); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001748:	200e      	movs	r0, #14
 800174a:	f7ff ff73 	bl	8001634 <lcd_send_cmd>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}

08001752 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800175a:	e006      	b.n	800176a <lcd_send_string+0x18>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff7f 	bl	8001668 <lcd_send_data>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f4      	bne.n	800175c <lcd_send_string+0xa>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <lcd_clear>:

void lcd_clear (void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800177e:	2001      	movs	r0, #1
 8001780:	f7ff ff58 	bl	8001634 <lcd_send_cmd>
	HAL_Delay(2);
 8001784:	2002      	movs	r0, #2
 8001786:	f003 fd05 	bl	8005194 <HAL_Delay>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <lcd_scroll_left_or_right>:

void lcd_scroll_left_or_right(int left)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	if (left == 1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d103      	bne.n	80017a4 <lcd_scroll_left_or_right+0x16>
	{
		lcd_send_cmd(0x1c);
 800179c:	201c      	movs	r0, #28
 800179e:	f7ff ff49 	bl	8001634 <lcd_send_cmd>
	}
	else
	{
		lcd_send_cmd(0x18);
	}
}
 80017a2:	e002      	b.n	80017aa <lcd_scroll_left_or_right+0x1c>
		lcd_send_cmd(0x18);
 80017a4:	2018      	movs	r0, #24
 80017a6:	f7ff ff45 	bl	8001634 <lcd_send_cmd>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	0000      	movs	r0, r0
 80017b4:	0000      	movs	r0, r0
	...

080017b8 <calculateDCSignalBuffer>:

void calculateDCSignalBuffer(uint32_t offset)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 1000; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e027      	b.n	8001816 <calculateDCSignalBuffer+0x5e>
	{
		signal_buffer[i] = ((offset*0.49)*4095.0/3300.0);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fe48 	bl	800045c <__aeabi_ui2d>
 80017cc:	a317      	add	r3, pc, #92	; (adr r3, 800182c <calculateDCSignalBuffer+0x74>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe febd 	bl	8000550 <__aeabi_dmul>
 80017d6:	4603      	mov	r3, r0
 80017d8:	460c      	mov	r4, r1
 80017da:	4618      	mov	r0, r3
 80017dc:	4621      	mov	r1, r4
 80017de:	a315      	add	r3, pc, #84	; (adr r3, 8001834 <calculateDCSignalBuffer+0x7c>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe feb4 	bl	8000550 <__aeabi_dmul>
 80017e8:	4603      	mov	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	4618      	mov	r0, r3
 80017ee:	4621      	mov	r1, r4
 80017f0:	a312      	add	r3, pc, #72	; (adr r3, 800183c <calculateDCSignalBuffer+0x84>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe ffd5 	bl	80007a4 <__aeabi_ddiv>
 80017fa:	4603      	mov	r3, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	4618      	mov	r0, r3
 8001800:	4621      	mov	r1, r4
 8001802:	f7ff f967 	bl	8000ad4 <__aeabi_d2uiz>
 8001806:	4601      	mov	r1, r0
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <calculateDCSignalBuffer+0x70>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 1000; i++)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800181c:	dbd3      	blt.n	80017c6 <calculateDCSignalBuffer+0xe>
	}
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	20000240 	.word	0x20000240
 800182c:	f5c28f5c 	.word	0xf5c28f5c
 8001830:	3fdf5c28 	.word	0x3fdf5c28
 8001834:	00000000 	.word	0x00000000
 8001838:	40affe00 	.word	0x40affe00
 800183c:	00000000 	.word	0x00000000
 8001840:	40a9c800 	.word	0x40a9c800
 8001844:	00000000 	.word	0x00000000

08001848 <calculateSinusoidalSignalBuffer1>:
		signal_buffer[i] = (amplitude*sin(i*2*PI/ns)/3.3 + offset*0.571)*(4096/2);
	}
}

void calculateSinusoidalSignalBuffer1(float amplitude, uint32_t frequency, float offset)
{
 8001848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	ed87 0a03 	vstr	s0, [r7, #12]
 8001854:	60b8      	str	r0, [r7, #8]
 8001856:	edc7 0a01 	vstr	s1, [r7, #4]
	int ns = 100000/frequency;
 800185a:	4a45      	ldr	r2, [pc, #276]	; (8001970 <calculateSinusoidalSignalBuffer1+0x128>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	613b      	str	r3, [r7, #16]
	offset = offset/1000;
 8001864:	ed97 7a01 	vldr	s14, [r7, #4]
 8001868:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001974 <calculateSinusoidalSignalBuffer1+0x12c>
 800186c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001870:	edc7 7a01 	vstr	s15, [r7, #4]
	amplitude = amplitude/1000;
 8001874:	ed97 7a03 	vldr	s14, [r7, #12]
 8001878:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001974 <calculateSinusoidalSignalBuffer1+0x12c>
 800187c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001880:	edc7 7a03 	vstr	s15, [r7, #12]

	for (int i = 0; i < 1000; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e05b      	b.n	8001942 <calculateSinusoidalSignalBuffer1+0xfa>
	{
		signal_buffer[i] = (amplitude*0.246*sin(i*2*PI/ns)+(0.5*offset))*(4096/3.3);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7fe fe08 	bl	80004a0 <__aeabi_f2d>
 8001890:	a331      	add	r3, pc, #196	; (adr r3, 8001958 <calculateSinusoidalSignalBuffer1+0x110>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fe5b 	bl	8000550 <__aeabi_dmul>
 800189a:	4603      	mov	r3, r0
 800189c:	460c      	mov	r4, r1
 800189e:	4625      	mov	r5, r4
 80018a0:	461c      	mov	r4, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fde8 	bl	800047c <__aeabi_i2d>
 80018ac:	a32c      	add	r3, pc, #176	; (adr r3, 8001960 <calculateSinusoidalSignalBuffer1+0x118>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fe4d 	bl	8000550 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4690      	mov	r8, r2
 80018bc:	4699      	mov	r9, r3
 80018be:	6938      	ldr	r0, [r7, #16]
 80018c0:	f7fe fddc 	bl	800047c <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4640      	mov	r0, r8
 80018ca:	4649      	mov	r1, r9
 80018cc:	f7fe ff6a 	bl	80007a4 <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	ec43 2b17 	vmov	d7, r2, r3
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	f009 fc6a 	bl	800b1b8 <sin>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	4620      	mov	r0, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	f7fe fe30 	bl	8000550 <__aeabi_dmul>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	4625      	mov	r5, r4
 80018f6:	461c      	mov	r4, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7fe fdd1 	bl	80004a0 <__aeabi_f2d>
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <calculateSinusoidalSignalBuffer1+0x130>)
 8001904:	f7fe fe24 	bl	8000550 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fc68 	bl	80001e4 <__adddf3>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	4618      	mov	r0, r3
 800191a:	4621      	mov	r1, r4
 800191c:	a312      	add	r3, pc, #72	; (adr r3, 8001968 <calculateSinusoidalSignalBuffer1+0x120>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe15 	bl	8000550 <__aeabi_dmul>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	4618      	mov	r0, r3
 800192c:	4621      	mov	r1, r4
 800192e:	f7ff f8d1 	bl	8000ad4 <__aeabi_d2uiz>
 8001932:	4601      	mov	r1, r0
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <calculateSinusoidalSignalBuffer1+0x134>)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 1000; i++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001948:	db9f      	blt.n	800188a <calculateSinusoidalSignalBuffer1+0x42>
	}
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001954:	f3af 8000 	nop.w
 8001958:	916872b0 	.word	0x916872b0
 800195c:	3fcf7ced 	.word	0x3fcf7ced
 8001960:	4d12d84a 	.word	0x4d12d84a
 8001964:	400921fb 	.word	0x400921fb
 8001968:	364d9365 	.word	0x364d9365
 800196c:	409364d9 	.word	0x409364d9
 8001970:	000186a0 	.word	0x000186a0
 8001974:	447a0000 	.word	0x447a0000
 8001978:	3fe00000 	.word	0x3fe00000
 800197c:	20000240 	.word	0x20000240

08001980 <calculatePulseSignalBuffer>:
		signal_buffer[i] = (((amplitude/2000) * sin(i*2*PI/signal_frequency) + offset/2000) * (4096/3.3));
	}
}

void calculatePulseSignalBuffer(float amplitude, uint32_t frequency, float offset, uint32_t duty_cycle)
{
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	ed87 0a03 	vstr	s0, [r7, #12]
 800198a:	60b8      	str	r0, [r7, #8]
 800198c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	int num;
	int num1 = 100000/frequency;
 8001992:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <calculatePulseSignalBuffer+0x140>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	61bb      	str	r3, [r7, #24]
	num = num1*(duty_cycle/100.0);
 800199c:	69b8      	ldr	r0, [r7, #24]
 800199e:	f7fe fd6d 	bl	800047c <__aeabi_i2d>
 80019a2:	4604      	mov	r4, r0
 80019a4:	460d      	mov	r5, r1
 80019a6:	6838      	ldr	r0, [r7, #0]
 80019a8:	f7fe fd58 	bl	800045c <__aeabi_ui2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <calculatePulseSignalBuffer+0x144>)
 80019b2:	f7fe fef7 	bl	80007a4 <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fdc7 	bl	8000550 <__aeabi_dmul>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff f85b 	bl	8000a84 <__aeabi_d2iz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 1000; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e05f      	b.n	8001a98 <calculatePulseSignalBuffer+0x118>
	{
		if (i%num1 < num)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	fb93 f2f2 	sdiv	r2, r3, r2
 80019e0:	69b9      	ldr	r1, [r7, #24]
 80019e2:	fb01 f202 	mul.w	r2, r1, r2
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dd2c      	ble.n	8001a48 <calculatePulseSignalBuffer+0xc8>
		{
			signal_buffer[i] = (((amplitude+offset)*0.49)*4095.0/3300.0);
 80019ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fa:	ee17 0a90 	vmov	r0, s15
 80019fe:	f7fe fd4f 	bl	80004a0 <__aeabi_f2d>
 8001a02:	a329      	add	r3, pc, #164	; (adr r3, 8001aa8 <calculatePulseSignalBuffer+0x128>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fda2 	bl	8000550 <__aeabi_dmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4618      	mov	r0, r3
 8001a12:	4621      	mov	r1, r4
 8001a14:	a326      	add	r3, pc, #152	; (adr r3, 8001ab0 <calculatePulseSignalBuffer+0x130>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fd99 	bl	8000550 <__aeabi_dmul>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	4618      	mov	r0, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	a324      	add	r3, pc, #144	; (adr r3, 8001ab8 <calculatePulseSignalBuffer+0x138>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe feba 	bl	80007a4 <__aeabi_ddiv>
 8001a30:	4603      	mov	r3, r0
 8001a32:	460c      	mov	r4, r1
 8001a34:	4618      	mov	r0, r3
 8001a36:	4621      	mov	r1, r4
 8001a38:	f7ff f84c 	bl	8000ad4 <__aeabi_d2uiz>
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <calculatePulseSignalBuffer+0x148>)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001a46:	e024      	b.n	8001a92 <calculatePulseSignalBuffer+0x112>
		}
		else
		{
			signal_buffer[i] = ((offset*0.49)*4095.0/3300.0);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7fe fd29 	bl	80004a0 <__aeabi_f2d>
 8001a4e:	a316      	add	r3, pc, #88	; (adr r3, 8001aa8 <calculatePulseSignalBuffer+0x128>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fd7c 	bl	8000550 <__aeabi_dmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4621      	mov	r1, r4
 8001a60:	a313      	add	r3, pc, #76	; (adr r3, 8001ab0 <calculatePulseSignalBuffer+0x130>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fd73 	bl	8000550 <__aeabi_dmul>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	a311      	add	r3, pc, #68	; (adr r3, 8001ab8 <calculatePulseSignalBuffer+0x138>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fe94 	bl	80007a4 <__aeabi_ddiv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	460c      	mov	r4, r1
 8001a80:	4618      	mov	r0, r3
 8001a82:	4621      	mov	r1, r4
 8001a84:	f7ff f826 	bl	8000ad4 <__aeabi_d2uiz>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <calculatePulseSignalBuffer+0x148>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 1000; i++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a9e:	db9b      	blt.n	80019d8 <calculatePulseSignalBuffer+0x58>
		}

	}
}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa8:	f5c28f5c 	.word	0xf5c28f5c
 8001aac:	3fdf5c28 	.word	0x3fdf5c28
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	40affe00 	.word	0x40affe00
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40a9c800 	.word	0x40a9c800
 8001ac0:	000186a0 	.word	0x000186a0
 8001ac4:	40590000 	.word	0x40590000
 8001ac8:	20000240 	.word	0x20000240

08001acc <setDACValue>:
	{
		calculateSinusoidalSignalBuffer(amplitude, frequency, offset);
	}
}

void setDACValue() {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
	if (input[4] == 't') {
 8001ad2:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <setDACValue+0xd0>)
 8001ad4:	791b      	ldrb	r3, [r3, #4]
 8001ad6:	2b74      	cmp	r3, #116	; 0x74
 8001ad8:	d104      	bne.n	8001ae4 <setDACValue+0x18>
		signal_type_DAC[0] = input[6];
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <setDACValue+0xd0>)
 8001adc:	799a      	ldrb	r2, [r3, #6]
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <setDACValue+0xd4>)
 8001ae0:	701a      	strb	r2, [r3, #0]
		} else if (parameter_type_DAC[0] == 'd') {
			duty_cycle_DAC = value;
		}

	}
}
 8001ae2:	e055      	b.n	8001b90 <setDACValue+0xc4>
		int value = ((input[6] - 48) * 1000) + ((input[7] - 48) * 100)
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <setDACValue+0xd0>)
 8001ae6:	799b      	ldrb	r3, [r3, #6]
 8001ae8:	3b30      	subs	r3, #48	; 0x30
 8001aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aee:	fb02 f203 	mul.w	r2, r2, r3
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <setDACValue+0xd0>)
 8001af4:	79db      	ldrb	r3, [r3, #7]
 8001af6:	3b30      	subs	r3, #48	; 0x30
 8001af8:	2164      	movs	r1, #100	; 0x64
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	18d1      	adds	r1, r2, r3
				+ ((input[8] - 48) * 10) + (input[9] - 48);
 8001b00:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <setDACValue+0xd0>)
 8001b02:	7a1b      	ldrb	r3, [r3, #8]
 8001b04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	18ca      	adds	r2, r1, r3
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <setDACValue+0xd0>)
 8001b14:	7a5b      	ldrb	r3, [r3, #9]
 8001b16:	3b30      	subs	r3, #48	; 0x30
		int value = ((input[6] - 48) * 1000) + ((input[7] - 48) * 100)
 8001b18:	4413      	add	r3, r2
 8001b1a:	607b      	str	r3, [r7, #4]
		if (parameter_type_DAC[0] == 'a') {
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <setDACValue+0xd8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b61      	cmp	r3, #97	; 0x61
 8001b22:	d108      	bne.n	8001b36 <setDACValue+0x6a>
			amplitude_DAC = value;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <setDACValue+0xdc>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
}
 8001b34:	e02c      	b.n	8001b90 <setDACValue+0xc4>
		} else if (parameter_type_DAC[0] == 'o') {
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <setDACValue+0xd8>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b6f      	cmp	r3, #111	; 0x6f
 8001b3c:	d119      	bne.n	8001b72 <setDACValue+0xa6>
			if (signal_type_DAC[0] == 'd') {
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <setDACValue+0xd4>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d108      	bne.n	8001b58 <setDACValue+0x8c>
				DC_offset_DAC = value;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <setDACValue+0xe0>)
 8001b52:	edc3 7a00 	vstr	s15, [r3]
}
 8001b56:	e01b      	b.n	8001b90 <setDACValue+0xc4>
			} else if (signal_type_DAC[0] == 's') {
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <setDACValue+0xd4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b73      	cmp	r3, #115	; 0x73
 8001b5e:	d117      	bne.n	8001b90 <setDACValue+0xc4>
				S_offset_DAC = value;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <setDACValue+0xe4>)
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
}
 8001b70:	e00e      	b.n	8001b90 <setDACValue+0xc4>
		} else if (parameter_type_DAC[0] == 'f') {
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <setDACValue+0xd8>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b66      	cmp	r3, #102	; 0x66
 8001b78:	d103      	bne.n	8001b82 <setDACValue+0xb6>
			frequency_DAC = value;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <setDACValue+0xe8>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	e006      	b.n	8001b90 <setDACValue+0xc4>
		} else if (parameter_type_DAC[0] == 'd') {
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <setDACValue+0xd8>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d102      	bne.n	8001b90 <setDACValue+0xc4>
			duty_cycle_DAC = value;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <setDACValue+0xec>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000130 	.word	0x20000130
 8001ba0:	2000004c 	.word	0x2000004c
 8001ba4:	20000050 	.word	0x20000050
 8001ba8:	2000003c 	.word	0x2000003c
 8001bac:	20000044 	.word	0x20000044
 8001bb0:	20000048 	.word	0x20000048
 8001bb4:	20000040 	.word	0x20000040
 8001bb8:	200000f4 	.word	0x200000f4

08001bbc <outputDAC>:

void outputDAC()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af02      	add	r7, sp, #8
	if (startDMA == 0)
 8001bc2:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <outputDAC+0xd4>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d15e      	bne.n	8001c88 <outputDAC+0xcc>
	{
		if (signal_type_DAC[0] == 'd')
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <outputDAC+0xd8>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d115      	bne.n	8001bfe <outputDAC+0x42>
			{
			HAL_TIM_Base_Start(&htim3);
 8001bd2:	4831      	ldr	r0, [pc, #196]	; (8001c98 <outputDAC+0xdc>)
 8001bd4:	f006 ff80 	bl	8008ad8 <HAL_TIM_Base_Start>
			calculateDCSignalBuffer(DC_offset_DAC);
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <outputDAC+0xe0>)
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be2:	ee17 0a90 	vmov	r0, s15
 8001be6:	f7ff fde7 	bl	80017b8 <calculateDCSignalBuffer>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, signal_buffer, 1000, DAC_ALIGN_12B_R);
 8001bea:	2300      	movs	r3, #0
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <outputDAC+0xe4>)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	482b      	ldr	r0, [pc, #172]	; (8001ca4 <outputDAC+0xe8>)
 8001bf8:	f004 fe42 	bl	8006880 <HAL_DAC_Start_DMA>
 8001bfc:	e041      	b.n	8001c82 <outputDAC+0xc6>
			}
			else if (signal_type_DAC[0] == 's')
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <outputDAC+0xd8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b73      	cmp	r3, #115	; 0x73
 8001c04:	d11b      	bne.n	8001c3e <outputDAC+0x82>
			{
				HAL_TIM_Base_Start(&htim3);
 8001c06:	4824      	ldr	r0, [pc, #144]	; (8001c98 <outputDAC+0xdc>)
 8001c08:	f006 ff66 	bl	8008ad8 <HAL_TIM_Base_Start>
				calculateSinusoidalSignalBuffer1(amplitude_DAC, frequency_DAC, S_offset_DAC);
 8001c0c:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <outputDAC+0xec>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <outputDAC+0xf0>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <outputDAC+0xf4>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	eef0 0a47 	vmov.f32	s1, s14
 8001c20:	4610      	mov	r0, r2
 8001c22:	eeb0 0a67 	vmov.f32	s0, s15
 8001c26:	f7ff fe0f 	bl	8001848 <calculateSinusoidalSignalBuffer1>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, signal_buffer, 1000, DAC_ALIGN_12B_R);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <outputDAC+0xe4>)
 8001c34:	2100      	movs	r1, #0
 8001c36:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <outputDAC+0xe8>)
 8001c38:	f004 fe22 	bl	8006880 <HAL_DAC_Start_DMA>
 8001c3c:	e021      	b.n	8001c82 <outputDAC+0xc6>
			} else if (signal_type_DAC[0] == 'p')
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <outputDAC+0xd8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b70      	cmp	r3, #112	; 0x70
 8001c44:	d11d      	bne.n	8001c82 <outputDAC+0xc6>
			{
				HAL_TIM_Base_Start(&htim3);
 8001c46:	4814      	ldr	r0, [pc, #80]	; (8001c98 <outputDAC+0xdc>)
 8001c48:	f006 ff46 	bl	8008ad8 <HAL_TIM_Base_Start>
				calculatePulseSignalBuffer(amplitude_DAC, frequency_DAC, S_offset_DAC, duty_cycle_DAC);
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <outputDAC+0xec>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <outputDAC+0xf0>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <outputDAC+0xf4>)
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <outputDAC+0xf8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	eef0 0a47 	vmov.f32	s1, s14
 8001c66:	4610      	mov	r0, r2
 8001c68:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6c:	f7ff fe88 	bl	8001980 <calculatePulseSignalBuffer>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, signal_buffer, 1000, DAC_ALIGN_12B_R);
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <outputDAC+0xe4>)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <outputDAC+0xe8>)
 8001c7e:	f004 fdff 	bl	8006880 <HAL_DAC_Start_DMA>
			}
		startDMA = 1;
 8001c82:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <outputDAC+0xd4>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
	}


}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200000f1 	.word	0x200000f1
 8001c94:	2000004c 	.word	0x2000004c
 8001c98:	20000194 	.word	0x20000194
 8001c9c:	20000044 	.word	0x20000044
 8001ca0:	20000240 	.word	0x20000240
 8001ca4:	2000011c 	.word	0x2000011c
 8001ca8:	2000003c 	.word	0x2000003c
 8001cac:	20000040 	.word	0x20000040
 8001cb0:	20000048 	.word	0x20000048
 8001cb4:	200000f4 	.word	0x200000f4

08001cb8 <stopOutputDAC>:

void stopOutputDAC()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <stopOutputDAC+0x1c>)
 8001cbe:	f006 ffe3 	bl	8008c88 <HAL_TIM_Base_Stop_IT>
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <stopOutputDAC+0x20>)
 8001cc6:	f004 fd6c 	bl	80067a2 <HAL_DAC_Stop_DMA>
	startDMA = 0;
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <stopOutputDAC+0x24>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000194 	.word	0x20000194
 8001cd8:	2000011c 	.word	0x2000011c
 8001cdc:	200000f1 	.word	0x200000f1

08001ce0 <determineValue>:

int determineValue()
{
 8001ce0:	b490      	push	{r4, r7}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
	int16_t value = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	80fb      	strh	r3, [r7, #6]

	if (input[6] == 116) {
 8001cea:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <determineValue+0x88>)
 8001cec:	799b      	ldrb	r3, [r3, #6]
 8001cee:	2b74      	cmp	r3, #116	; 0x74
 8001cf0:	d103      	bne.n	8001cfa <determineValue+0x1a>
		value = -1;
 8001cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf6:	80fb      	strh	r3, [r7, #6]
 8001cf8:	e02e      	b.n	8001d58 <determineValue+0x78>
	} else if (input[6] == 97) {
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <determineValue+0x88>)
 8001cfc:	799b      	ldrb	r3, [r3, #6]
 8001cfe:	2b61      	cmp	r3, #97	; 0x61
 8001d00:	d104      	bne.n	8001d0c <determineValue+0x2c>
		value = amp_int;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <determineValue+0x8c>)
 8001d04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d08:	80fb      	strh	r3, [r7, #6]
 8001d0a:	e025      	b.n	8001d58 <determineValue+0x78>
	} else if (input[6] == 111) {
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <determineValue+0x88>)
 8001d0e:	799b      	ldrb	r3, [r3, #6]
 8001d10:	2b6f      	cmp	r3, #111	; 0x6f
 8001d12:	d119      	bne.n	8001d48 <determineValue+0x68>
		if (measurementMode[0] == 'D' && measurementMode[1] == 'V')
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <determineValue+0x90>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b44      	cmp	r3, #68	; 0x44
 8001d1a:	d108      	bne.n	8001d2e <determineValue+0x4e>
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <determineValue+0x90>)
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b56      	cmp	r3, #86	; 0x56
 8001d22:	d104      	bne.n	8001d2e <determineValue+0x4e>
		{
			value = avg_dv_int;
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <determineValue+0x94>)
 8001d26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d2a:	80fb      	strh	r3, [r7, #6]
 8001d2c:	e014      	b.n	8001d58 <determineValue+0x78>
		}
		else if (measurementMode[0] == 'A' && measurementMode[1] == 'V')
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <determineValue+0x90>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b41      	cmp	r3, #65	; 0x41
 8001d34:	d110      	bne.n	8001d58 <determineValue+0x78>
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <determineValue+0x90>)
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	2b56      	cmp	r3, #86	; 0x56
 8001d3c:	d10c      	bne.n	8001d58 <determineValue+0x78>
		{
			value = offset_int;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <determineValue+0x98>)
 8001d40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d44:	80fb      	strh	r3, [r7, #6]
 8001d46:	e007      	b.n	8001d58 <determineValue+0x78>
		}

	} else if (input[6] == 102) {
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <determineValue+0x88>)
 8001d4a:	799b      	ldrb	r3, [r3, #6]
 8001d4c:	2b66      	cmp	r3, #102	; 0x66
 8001d4e:	d103      	bne.n	8001d58 <determineValue+0x78>
		value = freq_int;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <determineValue+0x9c>)
 8001d52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d56:	80fb      	strh	r3, [r7, #6]
	}

	return value;
 8001d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc90      	pop	{r4, r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000130 	.word	0x20000130
 8001d6c:	200000e8 	.word	0x200000e8
 8001d70:	20000010 	.word	0x20000010
 8001d74:	20000030 	.word	0x20000030
 8001d78:	200000e0 	.word	0x200000e0
 8001d7c:	200000d8 	.word	0x200000d8

08001d80 <displayMeasurementMessage>:

void displayMeasurementMessage(int16_t value)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
	uint8_t measurementMessage[13];

	if (value < 0) {
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	da1c      	bge.n	8001dcc <displayMeasurementMessage+0x4c>
		measurementMessage[0] = 64;
 8001d92:	2340      	movs	r3, #64	; 0x40
 8001d94:	743b      	strb	r3, [r7, #16]
		measurementMessage[1] = 44;
 8001d96:	232c      	movs	r3, #44	; 0x2c
 8001d98:	747b      	strb	r3, [r7, #17]
		measurementMessage[2] = 42;
 8001d9a:	232a      	movs	r3, #42	; 0x2a
 8001d9c:	74bb      	strb	r3, [r7, #18]
		measurementMessage[3] = 44;
 8001d9e:	232c      	movs	r3, #44	; 0x2c
 8001da0:	74fb      	strb	r3, [r7, #19]
		measurementMessage[4] = measureParameter;
 8001da2:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <displayMeasurementMessage+0x158>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	753b      	strb	r3, [r7, #20]
		measurementMessage[5] = 44;
 8001da8:	232c      	movs	r3, #44	; 0x2c
 8001daa:	757b      	strb	r3, [r7, #21]
		measurementMessage[6] = 32;
 8001dac:	2320      	movs	r3, #32
 8001dae:	75bb      	strb	r3, [r7, #22]
		measurementMessage[7] = type;
 8001db0:	4b4a      	ldr	r3, [pc, #296]	; (8001edc <displayMeasurementMessage+0x15c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	75fb      	strb	r3, [r7, #23]
		measurementMessage[8] = 32;
 8001db6:	2320      	movs	r3, #32
 8001db8:	763b      	strb	r3, [r7, #24]
		measurementMessage[9] = 32;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	767b      	strb	r3, [r7, #25]
		measurementMessage[10] = 44;
 8001dbe:	232c      	movs	r3, #44	; 0x2c
 8001dc0:	76bb      	strb	r3, [r7, #26]
		measurementMessage[11] = 33;
 8001dc2:	2321      	movs	r3, #33	; 0x21
 8001dc4:	76fb      	strb	r3, [r7, #27]
		measurementMessage[12] = 10;
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	773b      	strb	r3, [r7, #28]
 8001dca:	e07a      	b.n	8001ec2 <displayMeasurementMessage+0x142>
	} else {
		uint8_t valueInStringForm[4] = "0000";
 8001dcc:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 8001dd0:	60fb      	str	r3, [r7, #12]
		valueInStringForm[0] = ((value / 1000) % 10) + 48;
 8001dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd6:	4a42      	ldr	r2, [pc, #264]	; (8001ee0 <displayMeasurementMessage+0x160>)
 8001dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ddc:	1192      	asrs	r2, r2, #6
 8001dde:	17db      	asrs	r3, r3, #31
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <displayMeasurementMessage+0x164>)
 8001de6:	fb83 1302 	smull	r1, r3, r3, r2
 8001dea:	1099      	asrs	r1, r3, #2
 8001dec:	17d3      	asrs	r3, r2, #31
 8001dee:	1ac9      	subs	r1, r1, r3
 8001df0:	460b      	mov	r3, r1
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3330      	adds	r3, #48	; 0x30
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	733b      	strb	r3, [r7, #12]
		valueInStringForm[1] = ((value / 100) % 10) + 48;
 8001e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e08:	4a37      	ldr	r2, [pc, #220]	; (8001ee8 <displayMeasurementMessage+0x168>)
 8001e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e0e:	1152      	asrs	r2, r2, #5
 8001e10:	17db      	asrs	r3, r3, #31
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <displayMeasurementMessage+0x164>)
 8001e18:	fb83 1302 	smull	r1, r3, r3, r2
 8001e1c:	1099      	asrs	r1, r3, #2
 8001e1e:	17d3      	asrs	r3, r2, #31
 8001e20:	1ac9      	subs	r1, r1, r3
 8001e22:	460b      	mov	r3, r1
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3330      	adds	r3, #48	; 0x30
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	737b      	strb	r3, [r7, #13]
		valueInStringForm[2] = ((value / 10) % 10) + 48;
 8001e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ee4 <displayMeasurementMessage+0x164>)
 8001e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e40:	1092      	asrs	r2, r2, #2
 8001e42:	17db      	asrs	r3, r3, #31
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <displayMeasurementMessage+0x164>)
 8001e4a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e4e:	1099      	asrs	r1, r3, #2
 8001e50:	17d3      	asrs	r3, r2, #31
 8001e52:	1ac9      	subs	r1, r1, r3
 8001e54:	460b      	mov	r3, r1
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3330      	adds	r3, #48	; 0x30
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	73bb      	strb	r3, [r7, #14]
		valueInStringForm[3] = (value % 10) + 48;
 8001e68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <displayMeasurementMessage+0x164>)
 8001e6e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e72:	1099      	asrs	r1, r3, #2
 8001e74:	17d3      	asrs	r3, r2, #31
 8001e76:	1ac9      	subs	r1, r1, r3
 8001e78:	460b      	mov	r3, r1
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3330      	adds	r3, #48	; 0x30
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	73fb      	strb	r3, [r7, #15]
		measurementMessage[0] = 64;
 8001e8c:	2340      	movs	r3, #64	; 0x40
 8001e8e:	743b      	strb	r3, [r7, #16]
		measurementMessage[1] = 44;
 8001e90:	232c      	movs	r3, #44	; 0x2c
 8001e92:	747b      	strb	r3, [r7, #17]
		measurementMessage[2] = 42;
 8001e94:	232a      	movs	r3, #42	; 0x2a
 8001e96:	74bb      	strb	r3, [r7, #18]
		measurementMessage[3] = 44;
 8001e98:	232c      	movs	r3, #44	; 0x2c
 8001e9a:	74fb      	strb	r3, [r7, #19]
		measurementMessage[4] = measureParameter;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <displayMeasurementMessage+0x158>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	753b      	strb	r3, [r7, #20]
		measurementMessage[5] = 44;
 8001ea2:	232c      	movs	r3, #44	; 0x2c
 8001ea4:	757b      	strb	r3, [r7, #21]
		measurementMessage[6] = valueInStringForm[0];
 8001ea6:	7b3b      	ldrb	r3, [r7, #12]
 8001ea8:	75bb      	strb	r3, [r7, #22]
		measurementMessage[7] = valueInStringForm[1];
 8001eaa:	7b7b      	ldrb	r3, [r7, #13]
 8001eac:	75fb      	strb	r3, [r7, #23]
		measurementMessage[8] = valueInStringForm[2];
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	763b      	strb	r3, [r7, #24]
		measurementMessage[9] = valueInStringForm[3];
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	767b      	strb	r3, [r7, #25]
		measurementMessage[10] = 44;
 8001eb6:	232c      	movs	r3, #44	; 0x2c
 8001eb8:	76bb      	strb	r3, [r7, #26]
		measurementMessage[11] = 33;
 8001eba:	2321      	movs	r3, #33	; 0x21
 8001ebc:	76fb      	strb	r3, [r7, #27]
		measurementMessage[12] = 10;
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	773b      	strb	r3, [r7, #28]
	}
	HAL_UART_Transmit(&huart2, measurementMessage, 13, 50);
 8001ec2:	f107 0110 	add.w	r1, r7, #16
 8001ec6:	2332      	movs	r3, #50	; 0x32
 8001ec8:	220d      	movs	r2, #13
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <displayMeasurementMessage+0x16c>)
 8001ecc:	f007 ff2c 	bl	8009d28 <HAL_UART_Transmit>
}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20001305 	.word	0x20001305
 8001edc:	20000028 	.word	0x20000028
 8001ee0:	10624dd3 	.word	0x10624dd3
 8001ee4:	66666667 	.word	0x66666667
 8001ee8:	51eb851f 	.word	0x51eb851f
 8001eec:	20001280 	.word	0x20001280

08001ef0 <executeLCDCommand>:

void executeLCDCommand()
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
	uint8_t byte;
	byte = input[6];
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <executeLCDCommand+0x18>)
 8001ef8:	799b      	ldrb	r3, [r3, #6]
 8001efa:	71fb      	strb	r3, [r7, #7]

}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	20000130 	.word	0x20000130

08001f0c <executeCommand>:

void executeCommand()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
	if (commandType == 1) {
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <executeCommand+0x1fc>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <executeCommand+0x14>
		executeLCDCommand();
 8001f1a:	f7ff ffe9 	bl	8001ef0 <executeLCDCommand>
		output_branch_state = 1;
		display_state = 2;
		measurement_state = 1;
		lcd_clear();
	}
}
 8001f1e:	e0ef      	b.n	8002100 <executeCommand+0x1f4>
	} else if (commandType == 2) {
 8001f20:	4b79      	ldr	r3, [pc, #484]	; (8002108 <executeCommand+0x1fc>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d136      	bne.n	8001f96 <executeCommand+0x8a>
		measurementMode[0] = input[4];
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <executeCommand+0x200>)
 8001f2a:	791a      	ldrb	r2, [r3, #4]
 8001f2c:	4b78      	ldr	r3, [pc, #480]	; (8002110 <executeCommand+0x204>)
 8001f2e:	701a      	strb	r2, [r3, #0]
		measurementMode[1] = input[5];
 8001f30:	4b76      	ldr	r3, [pc, #472]	; (800210c <executeCommand+0x200>)
 8001f32:	795a      	ldrb	r2, [r3, #5]
 8001f34:	4b76      	ldr	r3, [pc, #472]	; (8002110 <executeCommand+0x204>)
 8001f36:	705a      	strb	r2, [r3, #1]
		measurement_state_has_displayed = 0;
 8001f38:	4b76      	ldr	r3, [pc, #472]	; (8002114 <executeCommand+0x208>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
		system_state_1_has_displayed = 0;
 8001f3e:	4b76      	ldr	r3, [pc, #472]	; (8002118 <executeCommand+0x20c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
		output_state_has_displayed = 0;
 8001f44:	4b75      	ldr	r3, [pc, #468]	; (800211c <executeCommand+0x210>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
		display_state_2_has_displayed = 0;
 8001f4a:	4b75      	ldr	r3, [pc, #468]	; (8002120 <executeCommand+0x214>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
		systemState = 2;
 8001f50:	4b74      	ldr	r3, [pc, #464]	; (8002124 <executeCommand+0x218>)
 8001f52:	2202      	movs	r2, #2
 8001f54:	701a      	strb	r2, [r3, #0]
		if (measurementMode[0] == 'D' && measurementMode[1] == 'V')
 8001f56:	4b6e      	ldr	r3, [pc, #440]	; (8002110 <executeCommand+0x204>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b44      	cmp	r3, #68	; 0x44
 8001f5c:	d107      	bne.n	8001f6e <executeCommand+0x62>
 8001f5e:	4b6c      	ldr	r3, [pc, #432]	; (8002110 <executeCommand+0x204>)
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b56      	cmp	r3, #86	; 0x56
 8001f64:	d103      	bne.n	8001f6e <executeCommand+0x62>
			measurement_state = 2;
 8001f66:	4b70      	ldr	r3, [pc, #448]	; (8002128 <executeCommand+0x21c>)
 8001f68:	2202      	movs	r2, #2
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e00a      	b.n	8001f84 <executeCommand+0x78>
		else if (measurementMode[0] == 'A' && measurementMode[1] == 'V')
 8001f6e:	4b68      	ldr	r3, [pc, #416]	; (8002110 <executeCommand+0x204>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b41      	cmp	r3, #65	; 0x41
 8001f74:	d106      	bne.n	8001f84 <executeCommand+0x78>
 8001f76:	4b66      	ldr	r3, [pc, #408]	; (8002110 <executeCommand+0x204>)
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	2b56      	cmp	r3, #86	; 0x56
 8001f7c:	d102      	bne.n	8001f84 <executeCommand+0x78>
			measurement_state = 3;
 8001f7e:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <executeCommand+0x21c>)
 8001f80:	2203      	movs	r2, #3
 8001f82:	701a      	strb	r2, [r3, #0]
		output_branch_state = 1;
 8001f84:	4b69      	ldr	r3, [pc, #420]	; (800212c <executeCommand+0x220>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
		display_state = 1;
 8001f8a:	4b69      	ldr	r3, [pc, #420]	; (8002130 <executeCommand+0x224>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001f90:	f7ff fbf3 	bl	800177a <lcd_clear>
}
 8001f94:	e0b4      	b.n	8002100 <executeCommand+0x1f4>
	} else if (commandType == 3) {
 8001f96:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <executeCommand+0x1fc>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d158      	bne.n	8002050 <executeCommand+0x144>
		parameter_type_DAC[0] = input[4];
 8001f9e:	4b5b      	ldr	r3, [pc, #364]	; (800210c <executeCommand+0x200>)
 8001fa0:	791a      	ldrb	r2, [r3, #4]
 8001fa2:	4b64      	ldr	r3, [pc, #400]	; (8002134 <executeCommand+0x228>)
 8001fa4:	701a      	strb	r2, [r3, #0]
		measurement_state_has_displayed = 0;
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <executeCommand+0x208>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
		system_state_1_has_displayed = 0;
 8001fac:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <executeCommand+0x20c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
		output_state_has_displayed = 0;
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	; (800211c <executeCommand+0x210>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
		display_state_2_has_displayed = 0;
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <executeCommand+0x214>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
		systemState = 3;
 8001fbe:	4b59      	ldr	r3, [pc, #356]	; (8002124 <executeCommand+0x218>)
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	701a      	strb	r2, [r3, #0]
		measurement_state = 1;
 8001fc4:	4b58      	ldr	r3, [pc, #352]	; (8002128 <executeCommand+0x21c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
		display_state = 1;
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <executeCommand+0x224>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
		setDACValue();
 8001fd0:	f7ff fd7c 	bl	8001acc <setDACValue>
		if (parameter_type_DAC[0] == 't') {
 8001fd4:	4b57      	ldr	r3, [pc, #348]	; (8002134 <executeCommand+0x228>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b74      	cmp	r3, #116	; 0x74
 8001fda:	d117      	bne.n	800200c <executeCommand+0x100>
			if (signal_type_DAC[0] == 'd') {
 8001fdc:	4b56      	ldr	r3, [pc, #344]	; (8002138 <executeCommand+0x22c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d103      	bne.n	8001fec <executeCommand+0xe0>
				output_branch_state = 3;
 8001fe4:	4b51      	ldr	r3, [pc, #324]	; (800212c <executeCommand+0x220>)
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e02e      	b.n	800204a <executeCommand+0x13e>
			} else if (signal_type_DAC[0] == 's') {
 8001fec:	4b52      	ldr	r3, [pc, #328]	; (8002138 <executeCommand+0x22c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b73      	cmp	r3, #115	; 0x73
 8001ff2:	d103      	bne.n	8001ffc <executeCommand+0xf0>
				output_branch_state = 4;
 8001ff4:	4b4d      	ldr	r3, [pc, #308]	; (800212c <executeCommand+0x220>)
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e026      	b.n	800204a <executeCommand+0x13e>
			} else if (signal_type_DAC[0] == 'p') {
 8001ffc:	4b4e      	ldr	r3, [pc, #312]	; (8002138 <executeCommand+0x22c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b70      	cmp	r3, #112	; 0x70
 8002002:	d122      	bne.n	800204a <executeCommand+0x13e>
				output_branch_state = 5;
 8002004:	4b49      	ldr	r3, [pc, #292]	; (800212c <executeCommand+0x220>)
 8002006:	2205      	movs	r2, #5
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e01e      	b.n	800204a <executeCommand+0x13e>
		} else if (parameter_type_DAC[0] == 'a') {
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <executeCommand+0x228>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b61      	cmp	r3, #97	; 0x61
 8002012:	d103      	bne.n	800201c <executeCommand+0x110>
				output_branch_state = 8;
 8002014:	4b45      	ldr	r3, [pc, #276]	; (800212c <executeCommand+0x220>)
 8002016:	2208      	movs	r2, #8
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e016      	b.n	800204a <executeCommand+0x13e>
		} else if (parameter_type_DAC[0] == 'o') {
 800201c:	4b45      	ldr	r3, [pc, #276]	; (8002134 <executeCommand+0x228>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b6f      	cmp	r3, #111	; 0x6f
 8002022:	d103      	bne.n	800202c <executeCommand+0x120>
				output_branch_state = 10;
 8002024:	4b41      	ldr	r3, [pc, #260]	; (800212c <executeCommand+0x220>)
 8002026:	220a      	movs	r2, #10
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e00e      	b.n	800204a <executeCommand+0x13e>
		} else if (parameter_type_DAC[0] == 'f') {
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <executeCommand+0x228>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b66      	cmp	r3, #102	; 0x66
 8002032:	d103      	bne.n	800203c <executeCommand+0x130>
				output_branch_state = 12;
 8002034:	4b3d      	ldr	r3, [pc, #244]	; (800212c <executeCommand+0x220>)
 8002036:	220c      	movs	r2, #12
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e006      	b.n	800204a <executeCommand+0x13e>
		} else if (parameter_type_DAC[0] == 'd') {
 800203c:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <executeCommand+0x228>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d102      	bne.n	800204a <executeCommand+0x13e>
				output_branch_state = 14;
 8002044:	4b39      	ldr	r3, [pc, #228]	; (800212c <executeCommand+0x220>)
 8002046:	220e      	movs	r2, #14
 8002048:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800204a:	f7ff fb96 	bl	800177a <lcd_clear>
}
 800204e:	e057      	b.n	8002100 <executeCommand+0x1f4>
	} else if (commandType == 4) {
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <executeCommand+0x1fc>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d128      	bne.n	80020aa <executeCommand+0x19e>
		commandFourResponse();
 8002058:	f7ff fa58 	bl	800150c <commandFourResponse>
		measurement_state_has_displayed = 0;
 800205c:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <executeCommand+0x208>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		system_state_1_has_displayed = 0;
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <executeCommand+0x20c>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		output_state_has_displayed = 0;
 8002068:	4b2c      	ldr	r3, [pc, #176]	; (800211c <executeCommand+0x210>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
		display_state_2_has_displayed = 0;
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <executeCommand+0x214>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
		systemState = 3;
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <executeCommand+0x218>)
 8002076:	2203      	movs	r2, #3
 8002078:	701a      	strb	r2, [r3, #0]
		measurement_state = 1;
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <executeCommand+0x21c>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
		display_state = 1;
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <executeCommand+0x224>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
		if (outputState == 1)
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <executeCommand+0x230>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d103      	bne.n	8002096 <executeCommand+0x18a>
			output_branch_state = 16;
 800208e:	4b27      	ldr	r3, [pc, #156]	; (800212c <executeCommand+0x220>)
 8002090:	2210      	movs	r2, #16
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e006      	b.n	80020a4 <executeCommand+0x198>
		else if (outputState == 0)
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <executeCommand+0x230>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <executeCommand+0x198>
			output_branch_state = 17;
 800209e:	4b23      	ldr	r3, [pc, #140]	; (800212c <executeCommand+0x220>)
 80020a0:	2211      	movs	r2, #17
 80020a2:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80020a4:	f7ff fb69 	bl	800177a <lcd_clear>
}
 80020a8:	e02a      	b.n	8002100 <executeCommand+0x1f4>
	} else if (commandType == 5) {
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <executeCommand+0x1fc>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d126      	bne.n	8002100 <executeCommand+0x1f4>
		measureParameter = input[6];
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <executeCommand+0x200>)
 80020b4:	799a      	ldrb	r2, [r3, #6]
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <executeCommand+0x234>)
 80020b8:	701a      	strb	r2, [r3, #0]
		int16_t value = determineValue();
 80020ba:	f7ff fe11 	bl	8001ce0 <determineValue>
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
		displayMeasurementMessage(value);
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fe5a 	bl	8001d80 <displayMeasurementMessage>
		measurement_state_has_displayed = 0;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <executeCommand+0x208>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
		system_state_1_has_displayed = 0;
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <executeCommand+0x20c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
		output_state_has_displayed = 0;
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <executeCommand+0x210>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
		display_state_2_has_displayed = 0;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <executeCommand+0x214>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
		systemState = 1;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <executeCommand+0x218>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
		output_branch_state = 1;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <executeCommand+0x220>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
		display_state = 2;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <executeCommand+0x224>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]
		measurement_state = 1;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <executeCommand+0x21c>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80020fc:	f7ff fb3d 	bl	800177a <lcd_clear>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000085 	.word	0x20000085
 800210c:	20000130 	.word	0x20000130
 8002110:	20000010 	.word	0x20000010
 8002114:	200000f8 	.word	0x200000f8
 8002118:	200000f9 	.word	0x200000f9
 800211c:	200000fa 	.word	0x200000fa
 8002120:	200000fb 	.word	0x200000fb
 8002124:	20000038 	.word	0x20000038
 8002128:	20000058 	.word	0x20000058
 800212c:	20000059 	.word	0x20000059
 8002130:	20000051 	.word	0x20000051
 8002134:	20000050 	.word	0x20000050
 8002138:	2000004c 	.word	0x2000004c
 800213c:	20000012 	.word	0x20000012
 8002140:	20001305 	.word	0x20001305

08002144 <measure_ADC_output_DAC>:

void measure_ADC_output_DAC()
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	if (ADC_trigger == 1) {
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <measure_ADC_output_DAC+0x3c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d104      	bne.n	800215a <measure_ADC_output_DAC+0x16>
		adc_Measure();
 8002150:	f7fe ffae 	bl	80010b0 <adc_Measure>
		ADC_trigger = 0;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <measure_ADC_output_DAC+0x3c>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
	}

	if (outputState == 1) {
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <measure_ADC_output_DAC+0x40>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <measure_ADC_output_DAC+0x24>
		outputDAC();
 8002162:	f7ff fd2b 	bl	8001bbc <outputDAC>
		{
		stopOutputDAC();
		stopDMA = 1;
		}
	}
}
 8002166:	e008      	b.n	800217a <measure_ADC_output_DAC+0x36>
		if (stopDMA == 0)
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <measure_ADC_output_DAC+0x44>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d104      	bne.n	800217a <measure_ADC_output_DAC+0x36>
		stopOutputDAC();
 8002170:	f7ff fda2 	bl	8001cb8 <stopOutputDAC>
		stopDMA = 1;
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <measure_ADC_output_DAC+0x44>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20001308 	.word	0x20001308
 8002184:	20000012 	.word	0x20000012
 8002188:	200000f2 	.word	0x200000f2

0800218c <executeMeasurementOutput>:

void executeMeasurementOutput()
{
 800218c:	b5b0      	push	{r4, r5, r7, lr}
 800218e:	b09c      	sub	sp, #112	; 0x70
 8002190:	af00      	add	r7, sp, #0
	if (display_state_2_has_displayed == 0)
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <executeMeasurementOutput+0x120>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <executeMeasurementOutput+0x22>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a4:	f005 f8a6 	bl	80072f4 <HAL_GPIO_WritePin>
		display_state_2_has_displayed = 1;
 80021a8:	4b40      	ldr	r3, [pc, #256]	; (80022ac <executeMeasurementOutput+0x120>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() - lastTick > 7000) {
 80021ae:	f002 ffe5 	bl	800517c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <executeMeasurementOutput+0x124>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f641 3258 	movw	r2, #7000	; 0x1b58
 80021be:	4293      	cmp	r3, r2
 80021c0:	f240 84c7 	bls.w	8002b52 <executeMeasurementOutput+0x9c6>
		lcd_clear();
 80021c4:	f7ff fad9 	bl	800177a <lcd_clear>
		lastTick = HAL_GetTick();
 80021c8:	f002 ffd8 	bl	800517c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <executeMeasurementOutput+0x124>)
 80021d0:	601a      	str	r2, [r3, #0]

		if (measurementMode[0] == 'D' && measurementMode[1] == 'V') {
 80021d2:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <executeMeasurementOutput+0x128>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b44      	cmp	r3, #68	; 0x44
 80021d8:	d172      	bne.n	80022c0 <executeMeasurementOutput+0x134>
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <executeMeasurementOutput+0x128>)
 80021dc:	785b      	ldrb	r3, [r3, #1]
 80021de:	2b56      	cmp	r3, #86	; 0x56
 80021e0:	d16e      	bne.n	80022c0 <executeMeasurementOutput+0x134>
			char displayString[] = "X.XXXV";
 80021e2:	4a35      	ldr	r2, [pc, #212]	; (80022b8 <executeMeasurementOutput+0x12c>)
 80021e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021ec:	6018      	str	r0, [r3, #0]
 80021ee:	3304      	adds	r3, #4
 80021f0:	8019      	strh	r1, [r3, #0]
 80021f2:	3302      	adds	r3, #2
 80021f4:	0c0a      	lsrs	r2, r1, #16
 80021f6:	701a      	strb	r2, [r3, #0]
			displayString[0] = (avg_dv_int / 1000) + 48;
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <executeMeasurementOutput+0x130>)
 80021fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	f7fe fc85 	bl	8000b14 <__aeabi_uldivmod>
 800220a:	4603      	mov	r3, r0
 800220c:	460c      	mov	r4, r1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3330      	adds	r3, #48	; 0x30
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
			displayString[2] = ((avg_dv_int % 1000) / 100) + 48;
 8002218:	4b28      	ldr	r3, [pc, #160]	; (80022bc <executeMeasurementOutput+0x130>)
 800221a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800221e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	f7fe fc75 	bl	8000b14 <__aeabi_uldivmod>
 800222a:	461c      	mov	r4, r3
 800222c:	4613      	mov	r3, r2
 800222e:	4618      	mov	r0, r3
 8002230:	4621      	mov	r1, r4
 8002232:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f7fe fc6b 	bl	8000b14 <__aeabi_uldivmod>
 800223e:	4603      	mov	r3, r0
 8002240:	460c      	mov	r4, r1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3330      	adds	r3, #48	; 0x30
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			displayString[3] = ((avg_dv_int % 100) / 10) + 48;
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <executeMeasurementOutput+0x130>)
 800224e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002252:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	f7fe fc5b 	bl	8000b14 <__aeabi_uldivmod>
 800225e:	461c      	mov	r4, r3
 8002260:	4613      	mov	r3, r2
 8002262:	4618      	mov	r0, r3
 8002264:	4621      	mov	r1, r4
 8002266:	f04f 020a 	mov.w	r2, #10
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f7fe fc51 	bl	8000b14 <__aeabi_uldivmod>
 8002272:	4603      	mov	r3, r0
 8002274:	460c      	mov	r4, r1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3330      	adds	r3, #48	; 0x30
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			displayString[4] = (avg_dv_int % 10) + 48;
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <executeMeasurementOutput+0x130>)
 8002282:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002286:	f04f 020a 	mov.w	r2, #10
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	f7fe fc41 	bl	8000b14 <__aeabi_uldivmod>
 8002292:	461c      	mov	r4, r3
 8002294:	4613      	mov	r3, r2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3330      	adds	r3, #48	; 0x30
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
			lcd_send_string(displayString);
 80022a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fa54 	bl	8001752 <lcd_send_string>
		if (measurementMode[0] == 'D' && measurementMode[1] == 'V') {
 80022aa:	e121      	b.n	80024f0 <executeMeasurementOutput+0x364>
 80022ac:	200000fb 	.word	0x200000fb
 80022b0:	20000054 	.word	0x20000054
 80022b4:	20000010 	.word	0x20000010
 80022b8:	0800c210 	.word	0x0800c210
 80022bc:	20000030 	.word	0x20000030
		} else if (measurementMode[0] == 'A' && measurementMode[1] == 'V') {
 80022c0:	4bcc      	ldr	r3, [pc, #816]	; (80025f4 <executeMeasurementOutput+0x468>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b41      	cmp	r3, #65	; 0x41
 80022c6:	f040 8113 	bne.w	80024f0 <executeMeasurementOutput+0x364>
 80022ca:	4bca      	ldr	r3, [pc, #808]	; (80025f4 <executeMeasurementOutput+0x468>)
 80022cc:	785b      	ldrb	r3, [r3, #1]
 80022ce:	2b56      	cmp	r3, #86	; 0x56
 80022d0:	f040 810e 	bne.w	80024f0 <executeMeasurementOutput+0x364>
			char displayString[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 80022d4:	4bc8      	ldr	r3, [pc, #800]	; (80025f8 <executeMeasurementOutput+0x46c>)
 80022d6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80022da:	461d      	mov	r5, r3
 80022dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022e4:	c403      	stmia	r4!, {r0, r1}
 80022e6:	8022      	strh	r2, [r4, #0]
 80022e8:	3402      	adds	r4, #2
 80022ea:	0c13      	lsrs	r3, r2, #16
 80022ec:	7023      	strb	r3, [r4, #0]
			displayString[2] = (offset_int/1000)+48;
 80022ee:	4bc3      	ldr	r3, [pc, #780]	; (80025fc <executeMeasurementOutput+0x470>)
 80022f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	f7fe fc0a 	bl	8000b14 <__aeabi_uldivmod>
 8002300:	4603      	mov	r3, r0
 8002302:	460c      	mov	r4, r1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3330      	adds	r3, #48	; 0x30
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			displayString[4] = ((offset_int%1000)/100)+48;
 800230e:	4bbb      	ldr	r3, [pc, #748]	; (80025fc <executeMeasurementOutput+0x470>)
 8002310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	f7fe fbfa 	bl	8000b14 <__aeabi_uldivmod>
 8002320:	461c      	mov	r4, r3
 8002322:	4613      	mov	r3, r2
 8002324:	4618      	mov	r0, r3
 8002326:	4621      	mov	r1, r4
 8002328:	f04f 0264 	mov.w	r2, #100	; 0x64
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	f7fe fbf0 	bl	8000b14 <__aeabi_uldivmod>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	3330      	adds	r3, #48	; 0x30
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
			displayString[5] = ((offset_int%100)/10)+48;
 8002342:	4bae      	ldr	r3, [pc, #696]	; (80025fc <executeMeasurementOutput+0x470>)
 8002344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002348:	f04f 0264 	mov.w	r2, #100	; 0x64
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	f7fe fbe0 	bl	8000b14 <__aeabi_uldivmod>
 8002354:	461c      	mov	r4, r3
 8002356:	4613      	mov	r3, r2
 8002358:	4618      	mov	r0, r3
 800235a:	4621      	mov	r1, r4
 800235c:	f04f 020a 	mov.w	r2, #10
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	f7fe fbd6 	bl	8000b14 <__aeabi_uldivmod>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3330      	adds	r3, #48	; 0x30
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
			displayString[6] = (offset_int%10)+48;
 8002376:	4ba1      	ldr	r3, [pc, #644]	; (80025fc <executeMeasurementOutput+0x470>)
 8002378:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237c:	f04f 020a 	mov.w	r2, #10
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	f7fe fbc6 	bl	8000b14 <__aeabi_uldivmod>
 8002388:	461c      	mov	r4, r3
 800238a:	4613      	mov	r3, r2
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3330      	adds	r3, #48	; 0x30
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			displayString[11] = (amp_int/1000)+48;
 8002396:	4b9a      	ldr	r3, [pc, #616]	; (8002600 <executeMeasurementOutput+0x474>)
 8002398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	f7fe fbb6 	bl	8000b14 <__aeabi_uldivmod>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3330      	adds	r3, #48	; 0x30
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			displayString[13] = ((amp_int%1000)/100)+48;
 80023b6:	4b92      	ldr	r3, [pc, #584]	; (8002600 <executeMeasurementOutput+0x474>)
 80023b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	f7fe fba6 	bl	8000b14 <__aeabi_uldivmod>
 80023c8:	461c      	mov	r4, r3
 80023ca:	4613      	mov	r3, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	4621      	mov	r1, r4
 80023d0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	f7fe fb9c 	bl	8000b14 <__aeabi_uldivmod>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3330      	adds	r3, #48	; 0x30
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			displayString[14] = ((amp_int%100)/10)+48;
 80023ea:	4b85      	ldr	r3, [pc, #532]	; (8002600 <executeMeasurementOutput+0x474>)
 80023ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	f7fe fb8c 	bl	8000b14 <__aeabi_uldivmod>
 80023fc:	461c      	mov	r4, r3
 80023fe:	4613      	mov	r3, r2
 8002400:	4618      	mov	r0, r3
 8002402:	4621      	mov	r1, r4
 8002404:	f04f 020a 	mov.w	r2, #10
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	f7fe fb82 	bl	8000b14 <__aeabi_uldivmod>
 8002410:	4603      	mov	r3, r0
 8002412:	460c      	mov	r4, r1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3330      	adds	r3, #48	; 0x30
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			displayString[15] = (amp_int%10)+48;
 800241e:	4b78      	ldr	r3, [pc, #480]	; (8002600 <executeMeasurementOutput+0x474>)
 8002420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002424:	f04f 020a 	mov.w	r2, #10
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	f7fe fb72 	bl	8000b14 <__aeabi_uldivmod>
 8002430:	461c      	mov	r4, r3
 8002432:	4613      	mov	r3, r2
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3330      	adds	r3, #48	; 0x30
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			displayString[20] = (freq_int/1000)+48;
 800243e:	4b71      	ldr	r3, [pc, #452]	; (8002604 <executeMeasurementOutput+0x478>)
 8002440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	f7fe fb62 	bl	8000b14 <__aeabi_uldivmod>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3330      	adds	r3, #48	; 0x30
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			displayString[21] = ((freq_int%1000)/100)+48;
 800245e:	4b69      	ldr	r3, [pc, #420]	; (8002604 <executeMeasurementOutput+0x478>)
 8002460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	f7fe fb52 	bl	8000b14 <__aeabi_uldivmod>
 8002470:	461c      	mov	r4, r3
 8002472:	4613      	mov	r3, r2
 8002474:	4618      	mov	r0, r3
 8002476:	4621      	mov	r1, r4
 8002478:	f04f 0264 	mov.w	r2, #100	; 0x64
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f7fe fb48 	bl	8000b14 <__aeabi_uldivmod>
 8002484:	4603      	mov	r3, r0
 8002486:	460c      	mov	r4, r1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3330      	adds	r3, #48	; 0x30
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			displayString[22] = ((freq_int%100)/10)+48;
 8002492:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <executeMeasurementOutput+0x478>)
 8002494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002498:	f04f 0264 	mov.w	r2, #100	; 0x64
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	f7fe fb38 	bl	8000b14 <__aeabi_uldivmod>
 80024a4:	461c      	mov	r4, r3
 80024a6:	4613      	mov	r3, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	4621      	mov	r1, r4
 80024ac:	f04f 020a 	mov.w	r2, #10
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	f7fe fb2e 	bl	8000b14 <__aeabi_uldivmod>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3330      	adds	r3, #48	; 0x30
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			displayString[23] = (freq_int%10)+48;
 80024c6:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <executeMeasurementOutput+0x478>)
 80024c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024cc:	f04f 020a 	mov.w	r2, #10
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	f7fe fb1e 	bl	8000b14 <__aeabi_uldivmod>
 80024d8:	461c      	mov	r4, r3
 80024da:	4613      	mov	r3, r2
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3330      	adds	r3, #48	; 0x30
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			lcd_send_string(displayString);
 80024e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f931 	bl	8001752 <lcd_send_string>
		}

		lcd_put_cur(1, 0);
 80024f0:	2100      	movs	r1, #0
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff f8d2 	bl	800169c <lcd_put_cur>
		if (outputState == 1) {
 80024f8:	4b43      	ldr	r3, [pc, #268]	; (8002608 <executeMeasurementOutput+0x47c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	f040 831d 	bne.w	8002b3c <executeMeasurementOutput+0x9b0>
			if (signal_type_DAC[0] == 'd')
 8002502:	4b42      	ldr	r3, [pc, #264]	; (800260c <executeMeasurementOutput+0x480>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	f040 808c 	bne.w	8002624 <executeMeasurementOutput+0x498>
			{
			char displayString[] = "X.XXXV";
 800250c:	4a40      	ldr	r2, [pc, #256]	; (8002610 <executeMeasurementOutput+0x484>)
 800250e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002516:	6018      	str	r0, [r3, #0]
 8002518:	3304      	adds	r3, #4
 800251a:	8019      	strh	r1, [r3, #0]
 800251c:	3302      	adds	r3, #2
 800251e:	0c0a      	lsrs	r2, r1, #16
 8002520:	701a      	strb	r2, [r3, #0]
			displayString[0] = (((int)DC_offset_DAC) / 1000) + 48;
 8002522:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <executeMeasurementOutput+0x488>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800252c:	ee17 1a90 	vmov	r1, s15
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <executeMeasurementOutput+0x48c>)
 8002532:	fb83 2301 	smull	r2, r3, r3, r1
 8002536:	119a      	asrs	r2, r3, #6
 8002538:	17cb      	asrs	r3, r1, #31
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3330      	adds	r3, #48	; 0x30
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			displayString[2] = ((((int)DC_offset_DAC) % 1000) / 100) + 48;
 8002546:	4b33      	ldr	r3, [pc, #204]	; (8002614 <executeMeasurementOutput+0x488>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002550:	ee17 2a90 	vmov	r2, s15
 8002554:	4b30      	ldr	r3, [pc, #192]	; (8002618 <executeMeasurementOutput+0x48c>)
 8002556:	fb83 1302 	smull	r1, r3, r3, r2
 800255a:	1199      	asrs	r1, r3, #6
 800255c:	17d3      	asrs	r3, r2, #31
 800255e:	1acb      	subs	r3, r1, r3
 8002560:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	4a2c      	ldr	r2, [pc, #176]	; (800261c <executeMeasurementOutput+0x490>)
 800256c:	fb82 1203 	smull	r1, r2, r2, r3
 8002570:	1152      	asrs	r2, r2, #5
 8002572:	17db      	asrs	r3, r3, #31
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3330      	adds	r3, #48	; 0x30
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			displayString[3] = ((((int)DC_offset_DAC) % 100) / 10) + 48;
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <executeMeasurementOutput+0x488>)
 8002582:	edd3 7a00 	vldr	s15, [r3]
 8002586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258a:	ee17 2a90 	vmov	r2, s15
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <executeMeasurementOutput+0x490>)
 8002590:	fb83 1302 	smull	r1, r3, r3, r2
 8002594:	1159      	asrs	r1, r3, #5
 8002596:	17d3      	asrs	r3, r2, #31
 8002598:	1acb      	subs	r3, r1, r3
 800259a:	2164      	movs	r1, #100	; 0x64
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <executeMeasurementOutput+0x494>)
 80025a4:	fb82 1203 	smull	r1, r2, r2, r3
 80025a8:	1092      	asrs	r2, r2, #2
 80025aa:	17db      	asrs	r3, r3, #31
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3330      	adds	r3, #48	; 0x30
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			displayString[4] = (((int)DC_offset_DAC) % 10) + 48;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <executeMeasurementOutput+0x488>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c2:	ee17 1a90 	vmov	r1, s15
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <executeMeasurementOutput+0x494>)
 80025c8:	fb83 2301 	smull	r2, r3, r3, r1
 80025cc:	109a      	asrs	r2, r3, #2
 80025ce:	17cb      	asrs	r3, r1, #31
 80025d0:	1ad2      	subs	r2, r2, r3
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	1aca      	subs	r2, r1, r3
 80025dc:	b2d3      	uxtb	r3, r2
 80025de:	3330      	adds	r3, #48	; 0x30
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			lcd_send_string(displayString);
 80025e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f8b1 	bl	8001752 <lcd_send_string>
 80025f0:	e2af      	b.n	8002b52 <executeMeasurementOutput+0x9c6>
 80025f2:	bf00      	nop
 80025f4:	20000010 	.word	0x20000010
 80025f8:	0800c218 	.word	0x0800c218
 80025fc:	200000e0 	.word	0x200000e0
 8002600:	200000e8 	.word	0x200000e8
 8002604:	200000d8 	.word	0x200000d8
 8002608:	20000012 	.word	0x20000012
 800260c:	2000004c 	.word	0x2000004c
 8002610:	0800c210 	.word	0x0800c210
 8002614:	20000044 	.word	0x20000044
 8002618:	10624dd3 	.word	0x10624dd3
 800261c:	51eb851f 	.word	0x51eb851f
 8002620:	66666667 	.word	0x66666667
			}
			else if (signal_type_DAC[0] == 's')
 8002624:	4b96      	ldr	r3, [pc, #600]	; (8002880 <executeMeasurementOutput+0x6f4>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b73      	cmp	r3, #115	; 0x73
 800262a:	f040 8139 	bne.w	80028a0 <executeMeasurementOutput+0x714>
			{
				char displayString[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 800262e:	4b95      	ldr	r3, [pc, #596]	; (8002884 <executeMeasurementOutput+0x6f8>)
 8002630:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002634:	461d      	mov	r5, r3
 8002636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800263e:	c403      	stmia	r4!, {r0, r1}
 8002640:	8022      	strh	r2, [r4, #0]
 8002642:	3402      	adds	r4, #2
 8002644:	0c13      	lsrs	r3, r2, #16
 8002646:	7023      	strb	r3, [r4, #0]
				displayString[2] = (((int)S_offset_DAC) / 1000) + 48;
 8002648:	4b8f      	ldr	r3, [pc, #572]	; (8002888 <executeMeasurementOutput+0x6fc>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002652:	ee17 1a90 	vmov	r1, s15
 8002656:	4b8d      	ldr	r3, [pc, #564]	; (800288c <executeMeasurementOutput+0x700>)
 8002658:	fb83 2301 	smull	r2, r3, r3, r1
 800265c:	119a      	asrs	r2, r3, #6
 800265e:	17cb      	asrs	r3, r1, #31
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3330      	adds	r3, #48	; 0x30
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				displayString[4] = ((((int)S_offset_DAC) % 1000) / 100) + 48;
 800266c:	4b86      	ldr	r3, [pc, #536]	; (8002888 <executeMeasurementOutput+0x6fc>)
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002676:	ee17 2a90 	vmov	r2, s15
 800267a:	4b84      	ldr	r3, [pc, #528]	; (800288c <executeMeasurementOutput+0x700>)
 800267c:	fb83 1302 	smull	r1, r3, r3, r2
 8002680:	1199      	asrs	r1, r3, #6
 8002682:	17d3      	asrs	r3, r2, #31
 8002684:	1acb      	subs	r3, r1, r3
 8002686:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	4a7f      	ldr	r2, [pc, #508]	; (8002890 <executeMeasurementOutput+0x704>)
 8002692:	fb82 1203 	smull	r1, r2, r2, r3
 8002696:	1152      	asrs	r2, r2, #5
 8002698:	17db      	asrs	r3, r3, #31
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3330      	adds	r3, #48	; 0x30
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				displayString[5] = ((((int)S_offset_DAC) % 100) / 10) + 48;
 80026a6:	4b78      	ldr	r3, [pc, #480]	; (8002888 <executeMeasurementOutput+0x6fc>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b0:	ee17 2a90 	vmov	r2, s15
 80026b4:	4b76      	ldr	r3, [pc, #472]	; (8002890 <executeMeasurementOutput+0x704>)
 80026b6:	fb83 1302 	smull	r1, r3, r3, r2
 80026ba:	1159      	asrs	r1, r3, #5
 80026bc:	17d3      	asrs	r3, r2, #31
 80026be:	1acb      	subs	r3, r1, r3
 80026c0:	2164      	movs	r1, #100	; 0x64
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	4a72      	ldr	r2, [pc, #456]	; (8002894 <executeMeasurementOutput+0x708>)
 80026ca:	fb82 1203 	smull	r1, r2, r2, r3
 80026ce:	1092      	asrs	r2, r2, #2
 80026d0:	17db      	asrs	r3, r3, #31
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3330      	adds	r3, #48	; 0x30
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				displayString[6] = (((int)S_offset_DAC) % 10) + 48;
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <executeMeasurementOutput+0x6fc>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e8:	ee17 1a90 	vmov	r1, s15
 80026ec:	4b69      	ldr	r3, [pc, #420]	; (8002894 <executeMeasurementOutput+0x708>)
 80026ee:	fb83 2301 	smull	r2, r3, r3, r1
 80026f2:	109a      	asrs	r2, r3, #2
 80026f4:	17cb      	asrs	r3, r1, #31
 80026f6:	1ad2      	subs	r2, r2, r3
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	1aca      	subs	r2, r1, r3
 8002702:	b2d3      	uxtb	r3, r2
 8002704:	3330      	adds	r3, #48	; 0x30
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				displayString[11] = (((int)amplitude_DAC) / 1000) + 48;
 800270c:	4b62      	ldr	r3, [pc, #392]	; (8002898 <executeMeasurementOutput+0x70c>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002716:	ee17 1a90 	vmov	r1, s15
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <executeMeasurementOutput+0x700>)
 800271c:	fb83 2301 	smull	r2, r3, r3, r1
 8002720:	119a      	asrs	r2, r3, #6
 8002722:	17cb      	asrs	r3, r1, #31
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3330      	adds	r3, #48	; 0x30
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				displayString[13] = ((((int)amplitude_DAC) % 1000) / 100) + 48;
 8002730:	4b59      	ldr	r3, [pc, #356]	; (8002898 <executeMeasurementOutput+0x70c>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800273a:	ee17 2a90 	vmov	r2, s15
 800273e:	4b53      	ldr	r3, [pc, #332]	; (800288c <executeMeasurementOutput+0x700>)
 8002740:	fb83 1302 	smull	r1, r3, r3, r2
 8002744:	1199      	asrs	r1, r3, #6
 8002746:	17d3      	asrs	r3, r2, #31
 8002748:	1acb      	subs	r3, r1, r3
 800274a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	4a4e      	ldr	r2, [pc, #312]	; (8002890 <executeMeasurementOutput+0x704>)
 8002756:	fb82 1203 	smull	r1, r2, r2, r3
 800275a:	1152      	asrs	r2, r2, #5
 800275c:	17db      	asrs	r3, r3, #31
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3330      	adds	r3, #48	; 0x30
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				displayString[14] = ((((int)amplitude_DAC) % 100) / 10) + 48;
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <executeMeasurementOutput+0x70c>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002774:	ee17 2a90 	vmov	r2, s15
 8002778:	4b45      	ldr	r3, [pc, #276]	; (8002890 <executeMeasurementOutput+0x704>)
 800277a:	fb83 1302 	smull	r1, r3, r3, r2
 800277e:	1159      	asrs	r1, r3, #5
 8002780:	17d3      	asrs	r3, r2, #31
 8002782:	1acb      	subs	r3, r1, r3
 8002784:	2164      	movs	r1, #100	; 0x64
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	4a41      	ldr	r2, [pc, #260]	; (8002894 <executeMeasurementOutput+0x708>)
 800278e:	fb82 1203 	smull	r1, r2, r2, r3
 8002792:	1092      	asrs	r2, r2, #2
 8002794:	17db      	asrs	r3, r3, #31
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	3330      	adds	r3, #48	; 0x30
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				displayString[15] = (((int)amplitude_DAC) % 10) + 48;
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <executeMeasurementOutput+0x70c>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ac:	ee17 1a90 	vmov	r1, s15
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <executeMeasurementOutput+0x708>)
 80027b2:	fb83 2301 	smull	r2, r3, r3, r1
 80027b6:	109a      	asrs	r2, r3, #2
 80027b8:	17cb      	asrs	r3, r1, #31
 80027ba:	1ad2      	subs	r2, r2, r3
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	1aca      	subs	r2, r1, r3
 80027c6:	b2d3      	uxtb	r3, r2
 80027c8:	3330      	adds	r3, #48	; 0x30
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				displayString[20] = (((int)frequency_DAC) / 1000) + 48;
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <executeMeasurementOutput+0x710>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2d      	ldr	r2, [pc, #180]	; (800288c <executeMeasurementOutput+0x700>)
 80027d6:	fb82 1203 	smull	r1, r2, r2, r3
 80027da:	1192      	asrs	r2, r2, #6
 80027dc:	17db      	asrs	r3, r3, #31
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3330      	adds	r3, #48	; 0x30
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				displayString[21] = ((((int)frequency_DAC) % 1000) / 100) + 48;
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <executeMeasurementOutput+0x710>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b26      	ldr	r3, [pc, #152]	; (800288c <executeMeasurementOutput+0x700>)
 80027f2:	fb83 1302 	smull	r1, r3, r3, r2
 80027f6:	1199      	asrs	r1, r3, #6
 80027f8:	17d3      	asrs	r3, r2, #31
 80027fa:	1acb      	subs	r3, r1, r3
 80027fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	4a22      	ldr	r2, [pc, #136]	; (8002890 <executeMeasurementOutput+0x704>)
 8002808:	fb82 1203 	smull	r1, r2, r2, r3
 800280c:	1152      	asrs	r2, r2, #5
 800280e:	17db      	asrs	r3, r3, #31
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3330      	adds	r3, #48	; 0x30
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				displayString[22] = ((((int)frequency_DAC) % 100) / 10) + 48;
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <executeMeasurementOutput+0x710>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <executeMeasurementOutput+0x704>)
 8002824:	fb83 1302 	smull	r1, r3, r3, r2
 8002828:	1159      	asrs	r1, r3, #5
 800282a:	17d3      	asrs	r3, r2, #31
 800282c:	1acb      	subs	r3, r1, r3
 800282e:	2164      	movs	r1, #100	; 0x64
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	4a17      	ldr	r2, [pc, #92]	; (8002894 <executeMeasurementOutput+0x708>)
 8002838:	fb82 1203 	smull	r1, r2, r2, r3
 800283c:	1092      	asrs	r2, r2, #2
 800283e:	17db      	asrs	r3, r3, #31
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3330      	adds	r3, #48	; 0x30
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				displayString[23] = (((int)frequency_DAC) % 10) + 48;
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <executeMeasurementOutput+0x710>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <executeMeasurementOutput+0x708>)
 8002854:	fb83 2301 	smull	r2, r3, r3, r1
 8002858:	109a      	asrs	r2, r3, #2
 800285a:	17cb      	asrs	r3, r1, #31
 800285c:	1ad2      	subs	r2, r2, r3
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	1aca      	subs	r2, r1, r3
 8002868:	b2d3      	uxtb	r3, r2
 800286a:	3330      	adds	r3, #48	; 0x30
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				lcd_send_string(displayString);
 8002872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe ff6b 	bl	8001752 <lcd_send_string>
 800287c:	e169      	b.n	8002b52 <executeMeasurementOutput+0x9c6>
 800287e:	bf00      	nop
 8002880:	2000004c 	.word	0x2000004c
 8002884:	0800c218 	.word	0x0800c218
 8002888:	20000048 	.word	0x20000048
 800288c:	10624dd3 	.word	0x10624dd3
 8002890:	51eb851f 	.word	0x51eb851f
 8002894:	66666667 	.word	0x66666667
 8002898:	2000003c 	.word	0x2000003c
 800289c:	20000040 	.word	0x20000040
			}
			else if (signal_type_DAC[0] == 'p')
 80028a0:	4bc3      	ldr	r3, [pc, #780]	; (8002bb0 <executeMeasurementOutput+0xa24>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b70      	cmp	r3, #112	; 0x70
 80028a6:	f040 8154 	bne.w	8002b52 <executeMeasurementOutput+0x9c6>
			{
				char displayString[] = "”O:x.xxxV,A:x.xxxV,F:xxxxHz,D:xxx%";
 80028aa:	4bc2      	ldr	r3, [pc, #776]	; (8002bb4 <executeMeasurementOutput+0xa28>)
 80028ac:	463c      	mov	r4, r7
 80028ae:	461d      	mov	r5, r3
 80028b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028bc:	6020      	str	r0, [r4, #0]
 80028be:	3404      	adds	r4, #4
 80028c0:	7021      	strb	r1, [r4, #0]
				displayString[2] = (((int)S_offset_DAC) / 1000) + 48;
 80028c2:	4bbd      	ldr	r3, [pc, #756]	; (8002bb8 <executeMeasurementOutput+0xa2c>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028cc:	ee17 1a90 	vmov	r1, s15
 80028d0:	4bba      	ldr	r3, [pc, #744]	; (8002bbc <executeMeasurementOutput+0xa30>)
 80028d2:	fb83 2301 	smull	r2, r3, r3, r1
 80028d6:	119a      	asrs	r2, r3, #6
 80028d8:	17cb      	asrs	r3, r1, #31
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3330      	adds	r3, #48	; 0x30
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	70bb      	strb	r3, [r7, #2]
				displayString[4] = ((((int)S_offset_DAC) % 1000) / 100) + 48;
 80028e4:	4bb4      	ldr	r3, [pc, #720]	; (8002bb8 <executeMeasurementOutput+0xa2c>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	4bb2      	ldr	r3, [pc, #712]	; (8002bbc <executeMeasurementOutput+0xa30>)
 80028f4:	fb83 1302 	smull	r1, r3, r3, r2
 80028f8:	1199      	asrs	r1, r3, #6
 80028fa:	17d3      	asrs	r3, r2, #31
 80028fc:	1acb      	subs	r3, r1, r3
 80028fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	4aad      	ldr	r2, [pc, #692]	; (8002bc0 <executeMeasurementOutput+0xa34>)
 800290a:	fb82 1203 	smull	r1, r2, r2, r3
 800290e:	1152      	asrs	r2, r2, #5
 8002910:	17db      	asrs	r3, r3, #31
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3330      	adds	r3, #48	; 0x30
 8002918:	b2db      	uxtb	r3, r3
 800291a:	713b      	strb	r3, [r7, #4]
				displayString[5] = ((((int)S_offset_DAC) % 100) / 10) + 48;
 800291c:	4ba6      	ldr	r3, [pc, #664]	; (8002bb8 <executeMeasurementOutput+0xa2c>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002926:	ee17 2a90 	vmov	r2, s15
 800292a:	4ba5      	ldr	r3, [pc, #660]	; (8002bc0 <executeMeasurementOutput+0xa34>)
 800292c:	fb83 1302 	smull	r1, r3, r3, r2
 8002930:	1159      	asrs	r1, r3, #5
 8002932:	17d3      	asrs	r3, r2, #31
 8002934:	1acb      	subs	r3, r1, r3
 8002936:	2164      	movs	r1, #100	; 0x64
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	4aa1      	ldr	r2, [pc, #644]	; (8002bc4 <executeMeasurementOutput+0xa38>)
 8002940:	fb82 1203 	smull	r1, r2, r2, r3
 8002944:	1092      	asrs	r2, r2, #2
 8002946:	17db      	asrs	r3, r3, #31
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3330      	adds	r3, #48	; 0x30
 800294e:	b2db      	uxtb	r3, r3
 8002950:	717b      	strb	r3, [r7, #5]
				displayString[6] = (((int)S_offset_DAC) % 10) + 48;
 8002952:	4b99      	ldr	r3, [pc, #612]	; (8002bb8 <executeMeasurementOutput+0xa2c>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295c:	ee17 1a90 	vmov	r1, s15
 8002960:	4b98      	ldr	r3, [pc, #608]	; (8002bc4 <executeMeasurementOutput+0xa38>)
 8002962:	fb83 2301 	smull	r2, r3, r3, r1
 8002966:	109a      	asrs	r2, r3, #2
 8002968:	17cb      	asrs	r3, r1, #31
 800296a:	1ad2      	subs	r2, r2, r3
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	1aca      	subs	r2, r1, r3
 8002976:	b2d3      	uxtb	r3, r2
 8002978:	3330      	adds	r3, #48	; 0x30
 800297a:	b2db      	uxtb	r3, r3
 800297c:	71bb      	strb	r3, [r7, #6]
				displayString[11] = (((int)amplitude_DAC) / 1000) + 48;
 800297e:	4b92      	ldr	r3, [pc, #584]	; (8002bc8 <executeMeasurementOutput+0xa3c>)
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002988:	ee17 1a90 	vmov	r1, s15
 800298c:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <executeMeasurementOutput+0xa30>)
 800298e:	fb83 2301 	smull	r2, r3, r3, r1
 8002992:	119a      	asrs	r2, r3, #6
 8002994:	17cb      	asrs	r3, r1, #31
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3330      	adds	r3, #48	; 0x30
 800299c:	b2db      	uxtb	r3, r3
 800299e:	72fb      	strb	r3, [r7, #11]
				displayString[13] = ((((int)amplitude_DAC) % 1000) / 100) + 48;
 80029a0:	4b89      	ldr	r3, [pc, #548]	; (8002bc8 <executeMeasurementOutput+0xa3c>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029aa:	ee17 2a90 	vmov	r2, s15
 80029ae:	4b83      	ldr	r3, [pc, #524]	; (8002bbc <executeMeasurementOutput+0xa30>)
 80029b0:	fb83 1302 	smull	r1, r3, r3, r2
 80029b4:	1199      	asrs	r1, r3, #6
 80029b6:	17d3      	asrs	r3, r2, #31
 80029b8:	1acb      	subs	r3, r1, r3
 80029ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	4a7e      	ldr	r2, [pc, #504]	; (8002bc0 <executeMeasurementOutput+0xa34>)
 80029c6:	fb82 1203 	smull	r1, r2, r2, r3
 80029ca:	1152      	asrs	r2, r2, #5
 80029cc:	17db      	asrs	r3, r3, #31
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3330      	adds	r3, #48	; 0x30
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	737b      	strb	r3, [r7, #13]
				displayString[14] = ((((int)amplitude_DAC) % 100) / 10) + 48;
 80029d8:	4b7b      	ldr	r3, [pc, #492]	; (8002bc8 <executeMeasurementOutput+0xa3c>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e2:	ee17 2a90 	vmov	r2, s15
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <executeMeasurementOutput+0xa34>)
 80029e8:	fb83 1302 	smull	r1, r3, r3, r2
 80029ec:	1159      	asrs	r1, r3, #5
 80029ee:	17d3      	asrs	r3, r2, #31
 80029f0:	1acb      	subs	r3, r1, r3
 80029f2:	2164      	movs	r1, #100	; 0x64
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	4a72      	ldr	r2, [pc, #456]	; (8002bc4 <executeMeasurementOutput+0xa38>)
 80029fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002a00:	1092      	asrs	r2, r2, #2
 8002a02:	17db      	asrs	r3, r3, #31
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	3330      	adds	r3, #48	; 0x30
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	73bb      	strb	r3, [r7, #14]
				displayString[15] = (((int)amplitude_DAC) % 10) + 48;
 8002a0e:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <executeMeasurementOutput+0xa3c>)
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a18:	ee17 1a90 	vmov	r1, s15
 8002a1c:	4b69      	ldr	r3, [pc, #420]	; (8002bc4 <executeMeasurementOutput+0xa38>)
 8002a1e:	fb83 2301 	smull	r2, r3, r3, r1
 8002a22:	109a      	asrs	r2, r3, #2
 8002a24:	17cb      	asrs	r3, r1, #31
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	1aca      	subs	r2, r1, r3
 8002a32:	b2d3      	uxtb	r3, r2
 8002a34:	3330      	adds	r3, #48	; 0x30
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	73fb      	strb	r3, [r7, #15]
				displayString[20] = (((int)frequency_DAC) / 1000) + 48;
 8002a3a:	4b64      	ldr	r3, [pc, #400]	; (8002bcc <executeMeasurementOutput+0xa40>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a5f      	ldr	r2, [pc, #380]	; (8002bbc <executeMeasurementOutput+0xa30>)
 8002a40:	fb82 1203 	smull	r1, r2, r2, r3
 8002a44:	1192      	asrs	r2, r2, #6
 8002a46:	17db      	asrs	r3, r3, #31
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3330      	adds	r3, #48	; 0x30
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	753b      	strb	r3, [r7, #20]
				displayString[21] = ((((int)frequency_DAC) % 1000) / 100) + 48;
 8002a52:	4b5e      	ldr	r3, [pc, #376]	; (8002bcc <executeMeasurementOutput+0xa40>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b58      	ldr	r3, [pc, #352]	; (8002bbc <executeMeasurementOutput+0xa30>)
 8002a5a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a5e:	1199      	asrs	r1, r3, #6
 8002a60:	17d3      	asrs	r3, r2, #31
 8002a62:	1acb      	subs	r3, r1, r3
 8002a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	4a54      	ldr	r2, [pc, #336]	; (8002bc0 <executeMeasurementOutput+0xa34>)
 8002a70:	fb82 1203 	smull	r1, r2, r2, r3
 8002a74:	1152      	asrs	r2, r2, #5
 8002a76:	17db      	asrs	r3, r3, #31
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	3330      	adds	r3, #48	; 0x30
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	757b      	strb	r3, [r7, #21]
				displayString[22] = ((((int)frequency_DAC) % 100) / 10) + 48;
 8002a82:	4b52      	ldr	r3, [pc, #328]	; (8002bcc <executeMeasurementOutput+0xa40>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <executeMeasurementOutput+0xa34>)
 8002a8a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a8e:	1159      	asrs	r1, r3, #5
 8002a90:	17d3      	asrs	r3, r2, #31
 8002a92:	1acb      	subs	r3, r1, r3
 8002a94:	2164      	movs	r1, #100	; 0x64
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	4a49      	ldr	r2, [pc, #292]	; (8002bc4 <executeMeasurementOutput+0xa38>)
 8002a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa2:	1092      	asrs	r2, r2, #2
 8002aa4:	17db      	asrs	r3, r3, #31
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3330      	adds	r3, #48	; 0x30
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	75bb      	strb	r3, [r7, #22]
				displayString[23] = (((int)frequency_DAC) % 10) + 48;
 8002ab0:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <executeMeasurementOutput+0xa40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <executeMeasurementOutput+0xa38>)
 8002ab8:	fb83 2301 	smull	r2, r3, r3, r1
 8002abc:	109a      	asrs	r2, r3, #2
 8002abe:	17cb      	asrs	r3, r1, #31
 8002ac0:	1ad2      	subs	r2, r2, r3
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	1aca      	subs	r2, r1, r3
 8002acc:	b2d3      	uxtb	r3, r2
 8002ace:	3330      	adds	r3, #48	; 0x30
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	75fb      	strb	r3, [r7, #23]
				displayString[28] = (((int)duty_cycle_DAC) / 100) + 48;
 8002ad4:	4b3e      	ldr	r3, [pc, #248]	; (8002bd0 <executeMeasurementOutput+0xa44>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a39      	ldr	r2, [pc, #228]	; (8002bc0 <executeMeasurementOutput+0xa34>)
 8002ada:	fb82 1203 	smull	r1, r2, r2, r3
 8002ade:	1152      	asrs	r2, r2, #5
 8002ae0:	17db      	asrs	r3, r3, #31
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3330      	adds	r3, #48	; 0x30
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	773b      	strb	r3, [r7, #28]
				displayString[29] = (((int)duty_cycle_DAC)%100)+48;
 8002aec:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <executeMeasurementOutput+0xa44>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <executeMeasurementOutput+0xa34>)
 8002af4:	fb83 1302 	smull	r1, r3, r3, r2
 8002af8:	1159      	asrs	r1, r3, #5
 8002afa:	17d3      	asrs	r3, r2, #31
 8002afc:	1acb      	subs	r3, r1, r3
 8002afe:	2164      	movs	r1, #100	; 0x64
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	3330      	adds	r3, #48	; 0x30
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	777b      	strb	r3, [r7, #29]
				displayString[30] = (((int)duty_cycle_DAC)%10)+48;
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <executeMeasurementOutput+0xa44>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <executeMeasurementOutput+0xa38>)
 8002b16:	fb83 2301 	smull	r2, r3, r3, r1
 8002b1a:	109a      	asrs	r2, r3, #2
 8002b1c:	17cb      	asrs	r3, r1, #31
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	1aca      	subs	r2, r1, r3
 8002b2a:	b2d3      	uxtb	r3, r2
 8002b2c:	3330      	adds	r3, #48	; 0x30
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	77bb      	strb	r3, [r7, #30]
				lcd_send_string(displayString);
 8002b32:	463b      	mov	r3, r7
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe fe0c 	bl	8001752 <lcd_send_string>
 8002b3a:	e00a      	b.n	8002b52 <executeMeasurementOutput+0x9c6>
			}
		} else if (outputState == 0) {
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <executeMeasurementOutput+0xa48>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <executeMeasurementOutput+0x9c6>
			lcd_put_cur(1, 0);
 8002b44:	2100      	movs	r1, #0
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7fe fda8 	bl	800169c <lcd_put_cur>
			lcd_send_string("OUTPUT OFF");
 8002b4c:	4822      	ldr	r0, [pc, #136]	; (8002bd8 <executeMeasurementOutput+0xa4c>)
 8002b4e:	f7fe fe00 	bl	8001752 <lcd_send_string>
		}
	}

	if (leftButtonPressed == 1)
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <executeMeasurementOutput+0xa50>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d106      	bne.n	8002b68 <executeMeasurementOutput+0x9dc>
	{
		leftButtonPressed = 0;
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <executeMeasurementOutput+0xa50>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
		lcd_scroll_left_or_right(1);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7fe fe14 	bl	800178e <lcd_scroll_left_or_right>
 8002b66:	e009      	b.n	8002b7c <executeMeasurementOutput+0x9f0>
	}
	else if (rightButtonPressed == 1)
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <executeMeasurementOutput+0xa54>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <executeMeasurementOutput+0x9f0>
	{
		rightButtonPressed = 0;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <executeMeasurementOutput+0xa54>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
		lcd_scroll_left_or_right(0);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fe fe09 	bl	800178e <lcd_scroll_left_or_right>
	}



	if (buttonPressed == 1) {
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <executeMeasurementOutput+0xa58>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d111      	bne.n	8002ba8 <executeMeasurementOutput+0xa1c>
		display_state = 1;
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <executeMeasurementOutput+0xa5c>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
		buttonPressed = 0;
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <executeMeasurementOutput+0xa58>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
		display_state_2_has_displayed = 0;
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <executeMeasurementOutput+0xa60>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba0:	f004 fba8 	bl	80072f4 <HAL_GPIO_WritePin>
		lcd_clear();
 8002ba4:	f7fe fde9 	bl	800177a <lcd_clear>
	}
}
 8002ba8:	bf00      	nop
 8002baa:	3770      	adds	r7, #112	; 0x70
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb0:	2000004c 	.word	0x2000004c
 8002bb4:	0800c234 	.word	0x0800c234
 8002bb8:	20000048 	.word	0x20000048
 8002bbc:	10624dd3 	.word	0x10624dd3
 8002bc0:	51eb851f 	.word	0x51eb851f
 8002bc4:	66666667 	.word	0x66666667
 8002bc8:	2000003c 	.word	0x2000003c
 8002bcc:	20000040 	.word	0x20000040
 8002bd0:	200000f4 	.word	0x200000f4
 8002bd4:	20000012 	.word	0x20000012
 8002bd8:	0800c204 	.word	0x0800c204
 8002bdc:	20001230 	.word	0x20001230
 8002be0:	2000122c 	.word	0x2000122c
 8002be4:	2000023c 	.word	0x2000023c
 8002be8:	20000051 	.word	0x20000051
 8002bec:	200000fb 	.word	0x200000fb

08002bf0 <executeStartMessage>:

void executeStartMessage()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	if (system_state_1_has_displayed == 0)
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <executeStartMessage+0x84>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d114      	bne.n	8002c26 <executeStartMessage+0x36>
		{
		//lcd_send_string("Sam's Menu");
		lcd_send_string("Snozzi's Menu");
 8002bfc:	481e      	ldr	r0, [pc, #120]	; (8002c78 <executeStartMessage+0x88>)
 8002bfe:	f7fe fda8 	bl	8001752 <lcd_send_string>
		lcd_put_cur(1,0);
 8002c02:	2100      	movs	r1, #0
 8002c04:	2001      	movs	r0, #1
 8002c06:	f7fe fd49 	bl	800169c <lcd_put_cur>
		lcd_send_string("Measure/Output");
 8002c0a:	481c      	ldr	r0, [pc, #112]	; (8002c7c <executeStartMessage+0x8c>)
 8002c0c:	f7fe fda1 	bl	8001752 <lcd_send_string>
		system_state_1_has_displayed = 1;
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <executeStartMessage+0x84>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8002c16:	2201      	movs	r2, #1
 8002c18:	2120      	movs	r1, #32
 8002c1a:	4819      	ldr	r0, [pc, #100]	; (8002c80 <executeStartMessage+0x90>)
 8002c1c:	f004 fb6a 	bl	80072f4 <HAL_GPIO_WritePin>
		buttonPressed = 0;
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <executeStartMessage+0x94>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
		}
		if (buttonPressed == 1)
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <executeStartMessage+0x94>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d110      	bne.n	8002c50 <executeStartMessage+0x60>
		{
			buttonPressed = 0;
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <executeStartMessage+0x94>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
			display_state = 2;
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <executeStartMessage+0x98>)
 8002c36:	2202      	movs	r2, #2
 8002c38:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002c3a:	f7fe fd9e 	bl	800177a <lcd_clear>
			system_state_1_has_displayed = 0;
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <executeStartMessage+0x84>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2120      	movs	r1, #32
 8002c48:	480d      	ldr	r0, [pc, #52]	; (8002c80 <executeStartMessage+0x90>)
 8002c4a:	f004 fb53 	bl	80072f4 <HAL_GPIO_WritePin>
			systemState = 2;
			downButtonPressed = 0;
			lcd_clear();
			system_state_1_has_displayed = 0;
		}
}
 8002c4e:	e00e      	b.n	8002c6e <executeStartMessage+0x7e>
		} else if(downButtonPressed == 1)
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <executeStartMessage+0x9c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10a      	bne.n	8002c6e <executeStartMessage+0x7e>
			systemState = 2;
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <executeStartMessage+0xa0>)
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	701a      	strb	r2, [r3, #0]
			downButtonPressed = 0;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <executeStartMessage+0x9c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
			lcd_clear();
 8002c64:	f7fe fd89 	bl	800177a <lcd_clear>
			system_state_1_has_displayed = 0;
 8002c68:	4b02      	ldr	r3, [pc, #8]	; (8002c74 <executeStartMessage+0x84>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200000f9 	.word	0x200000f9
 8002c78:	0800c25c 	.word	0x0800c25c
 8002c7c:	0800c26c 	.word	0x0800c26c
 8002c80:	48000400 	.word	0x48000400
 8002c84:	2000023c 	.word	0x2000023c
 8002c88:	20000051 	.word	0x20000051
 8002c8c:	20000234 	.word	0x20000234
 8002c90:	20000038 	.word	0x20000038

08002c94 <executeMeasurementState>:

void executeMeasurementState()
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
		if (measurement_state == 1)
 8002c98:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d144      	bne.n	8002d2a <executeMeasurementState+0x96>
		{
			if (measurement_state_has_displayed == 0)
 8002ca0:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10c      	bne.n	8002cc2 <executeMeasurementState+0x2e>
			{
			lcd_send_string("MEASURE");
 8002ca8:	4872      	ldr	r0, [pc, #456]	; (8002e74 <executeMeasurementState+0x1e0>)
 8002caa:	f7fe fd52 	bl	8001752 <lcd_send_string>
			lcd_put_cur(1,0);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7fe fcf3 	bl	800169c <lcd_put_cur>
			lcd_send_string("MODE");
 8002cb6:	4870      	ldr	r0, [pc, #448]	; (8002e78 <executeMeasurementState+0x1e4>)
 8002cb8:	f7fe fd4b 	bl	8001752 <lcd_send_string>
			measurement_state_has_displayed = 1;
 8002cbc:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
			}
			if (downButtonPressed == 1)
 8002cc2:	4b6e      	ldr	r3, [pc, #440]	; (8002e7c <executeMeasurementState+0x1e8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10b      	bne.n	8002ce2 <executeMeasurementState+0x4e>
			{
				downButtonPressed = 0;
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <executeMeasurementState+0x1e8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
				measurement_state = 2;
 8002cd0:	4b66      	ldr	r3, [pc, #408]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002cd6:	f7fe fd50 	bl	800177a <lcd_clear>
				measurement_state_has_displayed = 0;
 8002cda:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
				measurement_state = 1;
				lcd_clear();
				measurement_state_has_displayed = 0;
			}
		}
}
 8002ce0:	e0c2      	b.n	8002e68 <executeMeasurementState+0x1d4>
			} else if (rightButtonPressed == 1)
 8002ce2:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <executeMeasurementState+0x1ec>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10b      	bne.n	8002d02 <executeMeasurementState+0x6e>
				rightButtonPressed = 0;
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <executeMeasurementState+0x1ec>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
				systemState = 3;
 8002cf0:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <executeMeasurementState+0x1f0>)
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002cf6:	f7fe fd40 	bl	800177a <lcd_clear>
				measurement_state_has_displayed = 0;
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
}
 8002d00:	e0b2      	b.n	8002e68 <executeMeasurementState+0x1d4>
			} else if (upButtonPressed == 1)
 8002d02:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <executeMeasurementState+0x1f4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	f040 80ae 	bne.w	8002e68 <executeMeasurementState+0x1d4>
				upButtonPressed = 0;
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <executeMeasurementState+0x1f4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
				systemState = 1;
 8002d12:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <executeMeasurementState+0x1f0>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002d18:	f7fe fd2f 	bl	800177a <lcd_clear>
				measurement_state_has_displayed = 0;
 8002d1c:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
				measurement_state = 1;
 8002d22:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
}
 8002d28:	e09e      	b.n	8002e68 <executeMeasurementState+0x1d4>
		else if (measurement_state == 2)
 8002d2a:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d14b      	bne.n	8002dca <executeMeasurementState+0x136>
			if (measurement_state_has_displayed == 0)
 8002d32:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d114      	bne.n	8002d64 <executeMeasurementState+0xd0>
			lcd_send_string("DC VOLTAGE");
 8002d3a:	4854      	ldr	r0, [pc, #336]	; (8002e8c <executeMeasurementState+0x1f8>)
 8002d3c:	f7fe fd09 	bl	8001752 <lcd_send_string>
			measurement_state_has_displayed = 1;
 8002d40:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
				if (measurementMode[0] == 'D' && measurementMode[1] == 'V')
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <executeMeasurementState+0x1fc>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b44      	cmp	r3, #68	; 0x44
 8002d4c:	d10a      	bne.n	8002d64 <executeMeasurementState+0xd0>
 8002d4e:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <executeMeasurementState+0x1fc>)
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2b56      	cmp	r3, #86	; 0x56
 8002d54:	d106      	bne.n	8002d64 <executeMeasurementState+0xd0>
					lcd_put_cur(1,0);
 8002d56:	2100      	movs	r1, #0
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f7fe fc9f 	bl	800169c <lcd_put_cur>
					lcd_send_string("SET");
 8002d5e:	484d      	ldr	r0, [pc, #308]	; (8002e94 <executeMeasurementState+0x200>)
 8002d60:	f7fe fcf7 	bl	8001752 <lcd_send_string>
			if (buttonPressed == 1)
 8002d64:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <executeMeasurementState+0x204>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d10e      	bne.n	8002d8a <executeMeasurementState+0xf6>
				buttonPressed = 0;
 8002d6c:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <executeMeasurementState+0x204>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
				measurementMode[0] = 'D';
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <executeMeasurementState+0x1fc>)
 8002d74:	2244      	movs	r2, #68	; 0x44
 8002d76:	701a      	strb	r2, [r3, #0]
				measurementMode[1] = 'V';
 8002d78:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <executeMeasurementState+0x1fc>)
 8002d7a:	2256      	movs	r2, #86	; 0x56
 8002d7c:	705a      	strb	r2, [r3, #1]
				measurement_state_has_displayed = 0;
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002d84:	f7fe fcf9 	bl	800177a <lcd_clear>
}
 8002d88:	e06e      	b.n	8002e68 <executeMeasurementState+0x1d4>
			else if (rightButtonPressed == 1)
 8002d8a:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <executeMeasurementState+0x1ec>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10b      	bne.n	8002daa <executeMeasurementState+0x116>
				rightButtonPressed = 0;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <executeMeasurementState+0x1ec>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
				measurement_state = 3;
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002d9e:	f7fe fcec 	bl	800177a <lcd_clear>
				measurement_state_has_displayed = 0;
 8002da2:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
}
 8002da8:	e05e      	b.n	8002e68 <executeMeasurementState+0x1d4>
			} else if (upButtonPressed == 1)
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <executeMeasurementState+0x1f4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d15a      	bne.n	8002e68 <executeMeasurementState+0x1d4>
				upButtonPressed = 0;
 8002db2:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <executeMeasurementState+0x1f4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
				measurement_state = 1;
 8002db8:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002dbe:	f7fe fcdc 	bl	800177a <lcd_clear>
				measurement_state_has_displayed = 0;
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
}
 8002dc8:	e04e      	b.n	8002e68 <executeMeasurementState+0x1d4>
		else if (measurement_state == 3)
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d14a      	bne.n	8002e68 <executeMeasurementState+0x1d4>
			if (measurement_state_has_displayed == 0)
 8002dd2:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d114      	bne.n	8002e04 <executeMeasurementState+0x170>
			lcd_send_string("AC VOLTAGE");
 8002dda:	4830      	ldr	r0, [pc, #192]	; (8002e9c <executeMeasurementState+0x208>)
 8002ddc:	f7fe fcb9 	bl	8001752 <lcd_send_string>
			measurement_state_has_displayed = 1;
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
			if (measurementMode[0] == 'A' && measurementMode[1] == 'V')
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <executeMeasurementState+0x1fc>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b41      	cmp	r3, #65	; 0x41
 8002dec:	d10a      	bne.n	8002e04 <executeMeasurementState+0x170>
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <executeMeasurementState+0x1fc>)
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	2b56      	cmp	r3, #86	; 0x56
 8002df4:	d106      	bne.n	8002e04 <executeMeasurementState+0x170>
				lcd_put_cur(1,0);
 8002df6:	2100      	movs	r1, #0
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f7fe fc4f 	bl	800169c <lcd_put_cur>
				lcd_send_string("SET");
 8002dfe:	4825      	ldr	r0, [pc, #148]	; (8002e94 <executeMeasurementState+0x200>)
 8002e00:	f7fe fca7 	bl	8001752 <lcd_send_string>
			if (buttonPressed == 1)
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <executeMeasurementState+0x204>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10e      	bne.n	8002e2a <executeMeasurementState+0x196>
				buttonPressed = 0;
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <executeMeasurementState+0x204>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
				measurementMode[0] = 'A';
 8002e12:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <executeMeasurementState+0x1fc>)
 8002e14:	2241      	movs	r2, #65	; 0x41
 8002e16:	701a      	strb	r2, [r3, #0]
				measurementMode[1] = 'V';
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <executeMeasurementState+0x1fc>)
 8002e1a:	2256      	movs	r2, #86	; 0x56
 8002e1c:	705a      	strb	r2, [r3, #1]
				measurement_state_has_displayed = 0;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002e24:	f7fe fca9 	bl	800177a <lcd_clear>
}
 8002e28:	e01e      	b.n	8002e68 <executeMeasurementState+0x1d4>
			else if (leftButtonPressed == 1)
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <executeMeasurementState+0x20c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10b      	bne.n	8002e4a <executeMeasurementState+0x1b6>
				leftButtonPressed = 0;
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <executeMeasurementState+0x20c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
				measurement_state = 2;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002e3e:	f7fe fc9c 	bl	800177a <lcd_clear>
				measurement_state_has_displayed = 0;
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
}
 8002e48:	e00e      	b.n	8002e68 <executeMeasurementState+0x1d4>
			else if (upButtonPressed == 1)
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <executeMeasurementState+0x1f4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10a      	bne.n	8002e68 <executeMeasurementState+0x1d4>
				upButtonPressed = 0;
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <executeMeasurementState+0x1f4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
				measurement_state = 1;
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <executeMeasurementState+0x1d8>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002e5e:	f7fe fc8c 	bl	800177a <lcd_clear>
				measurement_state_has_displayed = 0;
 8002e62:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <executeMeasurementState+0x1dc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000058 	.word	0x20000058
 8002e70:	200000f8 	.word	0x200000f8
 8002e74:	0800c27c 	.word	0x0800c27c
 8002e78:	0800c284 	.word	0x0800c284
 8002e7c:	20000234 	.word	0x20000234
 8002e80:	2000122c 	.word	0x2000122c
 8002e84:	20000038 	.word	0x20000038
 8002e88:	20000114 	.word	0x20000114
 8002e8c:	0800c28c 	.word	0x0800c28c
 8002e90:	20000010 	.word	0x20000010
 8002e94:	0800c298 	.word	0x0800c298
 8002e98:	2000023c 	.word	0x2000023c
 8002e9c:	0800c29c 	.word	0x0800c29c
 8002ea0:	20001230 	.word	0x20001230

08002ea4 <branchesOneToSix>:

void branchesOneToSix()
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	if (output_branch_state == 1) {
 8002ea8:	4ba8      	ldr	r3, [pc, #672]	; (800314c <branchesOneToSix+0x2a8>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d140      	bne.n	8002f32 <branchesOneToSix+0x8e>
		if (output_state_has_displayed == 0) {
 8002eb0:	4ba7      	ldr	r3, [pc, #668]	; (8003150 <branchesOneToSix+0x2ac>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <branchesOneToSix+0x20>
			lcd_send_string("SIG GEN");
 8002eb8:	48a6      	ldr	r0, [pc, #664]	; (8003154 <branchesOneToSix+0x2b0>)
 8002eba:	f7fe fc4a 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 8002ebe:	4ba4      	ldr	r3, [pc, #656]	; (8003150 <branchesOneToSix+0x2ac>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
		}

		if (downButtonPressed == 1) {
 8002ec4:	4ba4      	ldr	r3, [pc, #656]	; (8003158 <branchesOneToSix+0x2b4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d10b      	bne.n	8002ee4 <branchesOneToSix+0x40>
			downButtonPressed = 0;
 8002ecc:	4ba2      	ldr	r3, [pc, #648]	; (8003158 <branchesOneToSix+0x2b4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
			output_branch_state = 2;
 8002ed2:	4b9e      	ldr	r3, [pc, #632]	; (800314c <branchesOneToSix+0x2a8>)
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8002ed8:	4b9d      	ldr	r3, [pc, #628]	; (8003150 <branchesOneToSix+0x2ac>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002ede:	f7fe fc4c 	bl	800177a <lcd_clear>
			output_branch_state = 2;
			output_state_has_displayed = 0;
			lcd_clear();
		}
	}
}
 8002ee2:	e1be      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (upButtonPressed == 1) {
 8002ee4:	4b9d      	ldr	r3, [pc, #628]	; (800315c <branchesOneToSix+0x2b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d10e      	bne.n	8002f0a <branchesOneToSix+0x66>
			upButtonPressed = 0;
 8002eec:	4b9b      	ldr	r3, [pc, #620]	; (800315c <branchesOneToSix+0x2b8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
			systemState = 1;
 8002ef2:	4b9b      	ldr	r3, [pc, #620]	; (8003160 <branchesOneToSix+0x2bc>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
			output_branch_state = 1;
 8002ef8:	4b94      	ldr	r3, [pc, #592]	; (800314c <branchesOneToSix+0x2a8>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8002efe:	4b94      	ldr	r3, [pc, #592]	; (8003150 <branchesOneToSix+0x2ac>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002f04:	f7fe fc39 	bl	800177a <lcd_clear>
}
 8002f08:	e1ab      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (leftButtonPressed == 1) {
 8002f0a:	4b96      	ldr	r3, [pc, #600]	; (8003164 <branchesOneToSix+0x2c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 81a7 	bne.w	8003262 <branchesOneToSix+0x3be>
			leftButtonPressed = 0;
 8002f14:	4b93      	ldr	r3, [pc, #588]	; (8003164 <branchesOneToSix+0x2c0>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
			output_branch_state = 1;
 8002f1a:	4b8c      	ldr	r3, [pc, #560]	; (800314c <branchesOneToSix+0x2a8>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
			systemState = 2;
 8002f20:	4b8f      	ldr	r3, [pc, #572]	; (8003160 <branchesOneToSix+0x2bc>)
 8002f22:	2202      	movs	r2, #2
 8002f24:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8002f26:	4b8a      	ldr	r3, [pc, #552]	; (8003150 <branchesOneToSix+0x2ac>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002f2c:	f7fe fc25 	bl	800177a <lcd_clear>
}
 8002f30:	e197      	b.n	8003262 <branchesOneToSix+0x3be>
	} else if (output_branch_state == 2) {
 8002f32:	4b86      	ldr	r3, [pc, #536]	; (800314c <branchesOneToSix+0x2a8>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d13a      	bne.n	8002fb0 <branchesOneToSix+0x10c>
		if (output_state_has_displayed == 0) {
 8002f3a:	4b85      	ldr	r3, [pc, #532]	; (8003150 <branchesOneToSix+0x2ac>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <branchesOneToSix+0xaa>
			lcd_send_string("TYPE");
 8002f42:	4889      	ldr	r0, [pc, #548]	; (8003168 <branchesOneToSix+0x2c4>)
 8002f44:	f7fe fc05 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 8002f48:	4b81      	ldr	r3, [pc, #516]	; (8003150 <branchesOneToSix+0x2ac>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
		if (downButtonPressed == 1) {
 8002f4e:	4b82      	ldr	r3, [pc, #520]	; (8003158 <branchesOneToSix+0x2b4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10b      	bne.n	8002f6e <branchesOneToSix+0xca>
			downButtonPressed = 0;
 8002f56:	4b80      	ldr	r3, [pc, #512]	; (8003158 <branchesOneToSix+0x2b4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
			output_branch_state = 3;
 8002f5c:	4b7b      	ldr	r3, [pc, #492]	; (800314c <branchesOneToSix+0x2a8>)
 8002f5e:	2203      	movs	r2, #3
 8002f60:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <branchesOneToSix+0x2ac>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002f68:	f7fe fc07 	bl	800177a <lcd_clear>
}
 8002f6c:	e179      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (rightButtonPressed == 1) {
 8002f6e:	4b7f      	ldr	r3, [pc, #508]	; (800316c <branchesOneToSix+0x2c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10b      	bne.n	8002f8e <branchesOneToSix+0xea>
			rightButtonPressed = 0;
 8002f76:	4b7d      	ldr	r3, [pc, #500]	; (800316c <branchesOneToSix+0x2c8>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
			output_branch_state = 6;
 8002f7c:	4b73      	ldr	r3, [pc, #460]	; (800314c <branchesOneToSix+0x2a8>)
 8002f7e:	2206      	movs	r2, #6
 8002f80:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8002f82:	4b73      	ldr	r3, [pc, #460]	; (8003150 <branchesOneToSix+0x2ac>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002f88:	f7fe fbf7 	bl	800177a <lcd_clear>
}
 8002f8c:	e169      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (upButtonPressed == 1) {
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <branchesOneToSix+0x2b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	f040 8165 	bne.w	8003262 <branchesOneToSix+0x3be>
			upButtonPressed = 0;
 8002f98:	4b70      	ldr	r3, [pc, #448]	; (800315c <branchesOneToSix+0x2b8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
			output_branch_state = 1;
 8002f9e:	4b6b      	ldr	r3, [pc, #428]	; (800314c <branchesOneToSix+0x2a8>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <branchesOneToSix+0x2ac>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002faa:	f7fe fbe6 	bl	800177a <lcd_clear>
}
 8002fae:	e158      	b.n	8003262 <branchesOneToSix+0x3be>
	} else if (output_branch_state == 3) {
 8002fb0:	4b66      	ldr	r3, [pc, #408]	; (800314c <branchesOneToSix+0x2a8>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d145      	bne.n	8003044 <branchesOneToSix+0x1a0>
		if (output_state_has_displayed == 0) {
 8002fb8:	4b65      	ldr	r3, [pc, #404]	; (8003150 <branchesOneToSix+0x2ac>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d110      	bne.n	8002fe2 <branchesOneToSix+0x13e>
			lcd_send_string("DC");
 8002fc0:	486b      	ldr	r0, [pc, #428]	; (8003170 <branchesOneToSix+0x2cc>)
 8002fc2:	f7fe fbc6 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 8002fc6:	4b62      	ldr	r3, [pc, #392]	; (8003150 <branchesOneToSix+0x2ac>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
			if (signal_type_DAC[0] == 'd')
 8002fcc:	4b69      	ldr	r3, [pc, #420]	; (8003174 <branchesOneToSix+0x2d0>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d106      	bne.n	8002fe2 <branchesOneToSix+0x13e>
				lcd_put_cur(1,0);
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f7fe fb60 	bl	800169c <lcd_put_cur>
				lcd_send_string("SET");
 8002fdc:	4866      	ldr	r0, [pc, #408]	; (8003178 <branchesOneToSix+0x2d4>)
 8002fde:	f7fe fbb8 	bl	8001752 <lcd_send_string>
		if (buttonPressed == 1) {
 8002fe2:	4b66      	ldr	r3, [pc, #408]	; (800317c <branchesOneToSix+0x2d8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10b      	bne.n	8003002 <branchesOneToSix+0x15e>
			buttonPressed = 0;
 8002fea:	4b64      	ldr	r3, [pc, #400]	; (800317c <branchesOneToSix+0x2d8>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
			signal_type_DAC[0] = 'd';
 8002ff0:	4b60      	ldr	r3, [pc, #384]	; (8003174 <branchesOneToSix+0x2d0>)
 8002ff2:	2264      	movs	r2, #100	; 0x64
 8002ff4:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8002ff6:	4b56      	ldr	r3, [pc, #344]	; (8003150 <branchesOneToSix+0x2ac>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002ffc:	f7fe fbbd 	bl	800177a <lcd_clear>
}
 8003000:	e12f      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (upButtonPressed == 1) {
 8003002:	4b56      	ldr	r3, [pc, #344]	; (800315c <branchesOneToSix+0x2b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d10b      	bne.n	8003022 <branchesOneToSix+0x17e>
			upButtonPressed = 0;
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <branchesOneToSix+0x2b8>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
			output_branch_state = 2;
 8003010:	4b4e      	ldr	r3, [pc, #312]	; (800314c <branchesOneToSix+0x2a8>)
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003016:	4b4e      	ldr	r3, [pc, #312]	; (8003150 <branchesOneToSix+0x2ac>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800301c:	f7fe fbad 	bl	800177a <lcd_clear>
}
 8003020:	e11f      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (rightButtonPressed == 1) {
 8003022:	4b52      	ldr	r3, [pc, #328]	; (800316c <branchesOneToSix+0x2c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	f040 811b 	bne.w	8003262 <branchesOneToSix+0x3be>
			rightButtonPressed = 0;
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <branchesOneToSix+0x2c8>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
			output_branch_state = 4;
 8003032:	4b46      	ldr	r3, [pc, #280]	; (800314c <branchesOneToSix+0x2a8>)
 8003034:	2204      	movs	r2, #4
 8003036:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003038:	4b45      	ldr	r3, [pc, #276]	; (8003150 <branchesOneToSix+0x2ac>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800303e:	f7fe fb9c 	bl	800177a <lcd_clear>
}
 8003042:	e10e      	b.n	8003262 <branchesOneToSix+0x3be>
	} else if (output_branch_state == 4) {
 8003044:	4b41      	ldr	r3, [pc, #260]	; (800314c <branchesOneToSix+0x2a8>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d155      	bne.n	80030f8 <branchesOneToSix+0x254>
		if (output_state_has_displayed == 0) {
 800304c:	4b40      	ldr	r3, [pc, #256]	; (8003150 <branchesOneToSix+0x2ac>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d110      	bne.n	8003076 <branchesOneToSix+0x1d2>
			lcd_send_string("SINUSOIDAL");
 8003054:	484a      	ldr	r0, [pc, #296]	; (8003180 <branchesOneToSix+0x2dc>)
 8003056:	f7fe fb7c 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <branchesOneToSix+0x2ac>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
			if (signal_type_DAC[0] == 's')
 8003060:	4b44      	ldr	r3, [pc, #272]	; (8003174 <branchesOneToSix+0x2d0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b73      	cmp	r3, #115	; 0x73
 8003066:	d106      	bne.n	8003076 <branchesOneToSix+0x1d2>
				lcd_put_cur(1,0);
 8003068:	2100      	movs	r1, #0
 800306a:	2001      	movs	r0, #1
 800306c:	f7fe fb16 	bl	800169c <lcd_put_cur>
				lcd_send_string("SET");
 8003070:	4841      	ldr	r0, [pc, #260]	; (8003178 <branchesOneToSix+0x2d4>)
 8003072:	f7fe fb6e 	bl	8001752 <lcd_send_string>
		if (buttonPressed == 1) {
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <branchesOneToSix+0x2d8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d10b      	bne.n	8003096 <branchesOneToSix+0x1f2>
			buttonPressed = 0;
 800307e:	4b3f      	ldr	r3, [pc, #252]	; (800317c <branchesOneToSix+0x2d8>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003084:	4b32      	ldr	r3, [pc, #200]	; (8003150 <branchesOneToSix+0x2ac>)
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
			signal_type_DAC[0] = 's';
 800308a:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <branchesOneToSix+0x2d0>)
 800308c:	2273      	movs	r2, #115	; 0x73
 800308e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003090:	f7fe fb73 	bl	800177a <lcd_clear>
}
 8003094:	e0e5      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (upButtonPressed == 1) {
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <branchesOneToSix+0x2b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10b      	bne.n	80030b6 <branchesOneToSix+0x212>
			upButtonPressed = 0;
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <branchesOneToSix+0x2b8>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
			output_branch_state = 2;
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <branchesOneToSix+0x2a8>)
 80030a6:	2202      	movs	r2, #2
 80030a8:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <branchesOneToSix+0x2ac>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80030b0:	f7fe fb63 	bl	800177a <lcd_clear>
}
 80030b4:	e0d5      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (rightButtonPressed == 1) {
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <branchesOneToSix+0x2c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10b      	bne.n	80030d6 <branchesOneToSix+0x232>
			rightButtonPressed = 0;
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <branchesOneToSix+0x2c8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
			output_branch_state = 5;
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <branchesOneToSix+0x2a8>)
 80030c6:	2205      	movs	r2, #5
 80030c8:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <branchesOneToSix+0x2ac>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80030d0:	f7fe fb53 	bl	800177a <lcd_clear>
}
 80030d4:	e0c5      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (leftButtonPressed == 1) {
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <branchesOneToSix+0x2c0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 80c1 	bne.w	8003262 <branchesOneToSix+0x3be>
			leftButtonPressed = 0;
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <branchesOneToSix+0x2c0>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
			output_branch_state = 3;
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <branchesOneToSix+0x2a8>)
 80030e8:	2203      	movs	r2, #3
 80030ea:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <branchesOneToSix+0x2ac>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80030f2:	f7fe fb42 	bl	800177a <lcd_clear>
}
 80030f6:	e0b4      	b.n	8003262 <branchesOneToSix+0x3be>
	} else if (output_branch_state == 5) {
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <branchesOneToSix+0x2a8>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d163      	bne.n	80031c8 <branchesOneToSix+0x324>
		if (output_state_has_displayed == 0) {
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <branchesOneToSix+0x2ac>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d110      	bne.n	800312a <branchesOneToSix+0x286>
			lcd_send_string("PULSE");
 8003108:	481e      	ldr	r0, [pc, #120]	; (8003184 <branchesOneToSix+0x2e0>)
 800310a:	f7fe fb22 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <branchesOneToSix+0x2ac>)
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
			if (signal_type_DAC[0] == 'p')
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <branchesOneToSix+0x2d0>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b70      	cmp	r3, #112	; 0x70
 800311a:	d106      	bne.n	800312a <branchesOneToSix+0x286>
				lcd_put_cur(1,0);
 800311c:	2100      	movs	r1, #0
 800311e:	2001      	movs	r0, #1
 8003120:	f7fe fabc 	bl	800169c <lcd_put_cur>
				lcd_send_string("SET");
 8003124:	4814      	ldr	r0, [pc, #80]	; (8003178 <branchesOneToSix+0x2d4>)
 8003126:	f7fe fb14 	bl	8001752 <lcd_send_string>
		if (buttonPressed == 1) {
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <branchesOneToSix+0x2d8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d12a      	bne.n	8003188 <branchesOneToSix+0x2e4>
			buttonPressed = 0;
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <branchesOneToSix+0x2d8>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <branchesOneToSix+0x2ac>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
			signal_type_DAC[0] = 'p';
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <branchesOneToSix+0x2d0>)
 8003140:	2270      	movs	r2, #112	; 0x70
 8003142:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003144:	f7fe fb19 	bl	800177a <lcd_clear>
}
 8003148:	e08b      	b.n	8003262 <branchesOneToSix+0x3be>
 800314a:	bf00      	nop
 800314c:	20000059 	.word	0x20000059
 8003150:	200000fa 	.word	0x200000fa
 8003154:	0800c2a8 	.word	0x0800c2a8
 8003158:	20000234 	.word	0x20000234
 800315c:	20000114 	.word	0x20000114
 8003160:	20000038 	.word	0x20000038
 8003164:	20001230 	.word	0x20001230
 8003168:	0800c2b0 	.word	0x0800c2b0
 800316c:	2000122c 	.word	0x2000122c
 8003170:	0800c2b8 	.word	0x0800c2b8
 8003174:	2000004c 	.word	0x2000004c
 8003178:	0800c298 	.word	0x0800c298
 800317c:	2000023c 	.word	0x2000023c
 8003180:	0800c2bc 	.word	0x0800c2bc
 8003184:	0800c2c8 	.word	0x0800c2c8
		} else if (upButtonPressed == 1) {
 8003188:	4b37      	ldr	r3, [pc, #220]	; (8003268 <branchesOneToSix+0x3c4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10b      	bne.n	80031a8 <branchesOneToSix+0x304>
			upButtonPressed = 0;
 8003190:	4b35      	ldr	r3, [pc, #212]	; (8003268 <branchesOneToSix+0x3c4>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
			output_branch_state = 2;
 8003196:	4b35      	ldr	r3, [pc, #212]	; (800326c <branchesOneToSix+0x3c8>)
 8003198:	2202      	movs	r2, #2
 800319a:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 800319c:	4b34      	ldr	r3, [pc, #208]	; (8003270 <branchesOneToSix+0x3cc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80031a2:	f7fe faea 	bl	800177a <lcd_clear>
}
 80031a6:	e05c      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (leftButtonPressed == 1) {
 80031a8:	4b32      	ldr	r3, [pc, #200]	; (8003274 <branchesOneToSix+0x3d0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d158      	bne.n	8003262 <branchesOneToSix+0x3be>
			leftButtonPressed = 0;
 80031b0:	4b30      	ldr	r3, [pc, #192]	; (8003274 <branchesOneToSix+0x3d0>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
			output_branch_state = 4;
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <branchesOneToSix+0x3c8>)
 80031b8:	2204      	movs	r2, #4
 80031ba:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80031bc:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <branchesOneToSix+0x3cc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80031c2:	f7fe fada 	bl	800177a <lcd_clear>
}
 80031c6:	e04c      	b.n	8003262 <branchesOneToSix+0x3be>
	} else if (output_branch_state == 6) {
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <branchesOneToSix+0x3c8>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b06      	cmp	r3, #6
 80031ce:	d148      	bne.n	8003262 <branchesOneToSix+0x3be>
		if (output_state_has_displayed == 0) {
 80031d0:	4b27      	ldr	r3, [pc, #156]	; (8003270 <branchesOneToSix+0x3cc>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <branchesOneToSix+0x340>
			lcd_send_string("PARAMETER");
 80031d8:	4827      	ldr	r0, [pc, #156]	; (8003278 <branchesOneToSix+0x3d4>)
 80031da:	f7fe faba 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <branchesOneToSix+0x3cc>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
		if (downButtonPressed == 1) {
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <branchesOneToSix+0x3d8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10b      	bne.n	8003204 <branchesOneToSix+0x360>
			downButtonPressed = 0;
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <branchesOneToSix+0x3d8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
			output_branch_state = 7;
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <branchesOneToSix+0x3c8>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <branchesOneToSix+0x3cc>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80031fe:	f7fe fabc 	bl	800177a <lcd_clear>
}
 8003202:	e02e      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (upButtonPressed == 1) {
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <branchesOneToSix+0x3c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10b      	bne.n	8003224 <branchesOneToSix+0x380>
			upButtonPressed = 0;
 800320c:	4b16      	ldr	r3, [pc, #88]	; (8003268 <branchesOneToSix+0x3c4>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
			output_branch_state = 1;
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <branchesOneToSix+0x3c8>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <branchesOneToSix+0x3cc>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800321e:	f7fe faac 	bl	800177a <lcd_clear>
}
 8003222:	e01e      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (rightButtonPressed == 1) {
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <branchesOneToSix+0x3dc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d10b      	bne.n	8003244 <branchesOneToSix+0x3a0>
			rightButtonPressed = 0;
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <branchesOneToSix+0x3dc>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
			output_branch_state = 15;
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <branchesOneToSix+0x3c8>)
 8003234:	220f      	movs	r2, #15
 8003236:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003238:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <branchesOneToSix+0x3cc>)
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800323e:	f7fe fa9c 	bl	800177a <lcd_clear>
}
 8003242:	e00e      	b.n	8003262 <branchesOneToSix+0x3be>
		} else if (leftButtonPressed == 1) {
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <branchesOneToSix+0x3d0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d10a      	bne.n	8003262 <branchesOneToSix+0x3be>
			leftButtonPressed = 0;
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <branchesOneToSix+0x3d0>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
			output_branch_state = 2;
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <branchesOneToSix+0x3c8>)
 8003254:	2202      	movs	r2, #2
 8003256:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <branchesOneToSix+0x3cc>)
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800325e:	f7fe fa8c 	bl	800177a <lcd_clear>
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000114 	.word	0x20000114
 800326c:	20000059 	.word	0x20000059
 8003270:	200000fa 	.word	0x200000fa
 8003274:	20001230 	.word	0x20001230
 8003278:	0800c2d0 	.word	0x0800c2d0
 800327c:	20000234 	.word	0x20000234
 8003280:	2000122c 	.word	0x2000122c

08003284 <branchesSevenToTen>:

void branchesSevenToTen()
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	af00      	add	r7, sp, #0
	if (output_branch_state == 7) {
 800328a:	4baf      	ldr	r3, [pc, #700]	; (8003548 <branchesSevenToTen+0x2c4>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b07      	cmp	r3, #7
 8003290:	d13a      	bne.n	8003308 <branchesSevenToTen+0x84>
		if (output_state_has_displayed == 0) {
 8003292:	4bae      	ldr	r3, [pc, #696]	; (800354c <branchesSevenToTen+0x2c8>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <branchesSevenToTen+0x22>
			lcd_send_string("AMPLITUDE");
 800329a:	48ad      	ldr	r0, [pc, #692]	; (8003550 <branchesSevenToTen+0x2cc>)
 800329c:	f7fe fa59 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 80032a0:	4baa      	ldr	r3, [pc, #680]	; (800354c <branchesSevenToTen+0x2c8>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
		}

		if (downButtonPressed == 1) {
 80032a6:	4bab      	ldr	r3, [pc, #684]	; (8003554 <branchesSevenToTen+0x2d0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10b      	bne.n	80032c6 <branchesSevenToTen+0x42>
			downButtonPressed = 0;
 80032ae:	4ba9      	ldr	r3, [pc, #676]	; (8003554 <branchesSevenToTen+0x2d0>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
			output_branch_state = 8;
 80032b4:	4ba4      	ldr	r3, [pc, #656]	; (8003548 <branchesSevenToTen+0x2c4>)
 80032b6:	2208      	movs	r2, #8
 80032b8:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80032ba:	4ba4      	ldr	r3, [pc, #656]	; (800354c <branchesSevenToTen+0x2c8>)
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80032c0:	f7fe fa5b 	bl	800177a <lcd_clear>
			lcd_put_cur(1, 8);
			lcd_send_string("SET");
		}

	}
}
 80032c4:	e3f0      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (upButtonPressed == 1) {
 80032c6:	4ba4      	ldr	r3, [pc, #656]	; (8003558 <branchesSevenToTen+0x2d4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10b      	bne.n	80032e6 <branchesSevenToTen+0x62>
			upButtonPressed = 0;
 80032ce:	4ba2      	ldr	r3, [pc, #648]	; (8003558 <branchesSevenToTen+0x2d4>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
			output_branch_state = 6;
 80032d4:	4b9c      	ldr	r3, [pc, #624]	; (8003548 <branchesSevenToTen+0x2c4>)
 80032d6:	2206      	movs	r2, #6
 80032d8:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80032da:	4b9c      	ldr	r3, [pc, #624]	; (800354c <branchesSevenToTen+0x2c8>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80032e0:	f7fe fa4b 	bl	800177a <lcd_clear>
}
 80032e4:	e3e0      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (rightButtonPressed == 1) {
 80032e6:	4b9d      	ldr	r3, [pc, #628]	; (800355c <branchesSevenToTen+0x2d8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	f040 83dc 	bne.w	8003aa8 <branchesSevenToTen+0x824>
			rightButtonPressed = 0;
 80032f0:	4b9a      	ldr	r3, [pc, #616]	; (800355c <branchesSevenToTen+0x2d8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
			output_branch_state = 9;
 80032f6:	4b94      	ldr	r3, [pc, #592]	; (8003548 <branchesSevenToTen+0x2c4>)
 80032f8:	2209      	movs	r2, #9
 80032fa:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80032fc:	4b93      	ldr	r3, [pc, #588]	; (800354c <branchesSevenToTen+0x2c8>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003302:	f7fe fa3a 	bl	800177a <lcd_clear>
}
 8003306:	e3cf      	b.n	8003aa8 <branchesSevenToTen+0x824>
	} else if (output_branch_state == 8) {
 8003308:	4b8f      	ldr	r3, [pc, #572]	; (8003548 <branchesSevenToTen+0x2c4>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	f040 81ae 	bne.w	800366e <branchesSevenToTen+0x3ea>
		if (output_state_has_displayed == 0) {
 8003312:	4b8e      	ldr	r3, [pc, #568]	; (800354c <branchesSevenToTen+0x2c8>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d170      	bne.n	80033fc <branchesSevenToTen+0x178>
			lcd_send_string("AMPLITUDE");
 800331a:	488d      	ldr	r0, [pc, #564]	; (8003550 <branchesSevenToTen+0x2cc>)
 800331c:	f7fe fa19 	bl	8001752 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003320:	2100      	movs	r1, #0
 8003322:	2001      	movs	r0, #1
 8003324:	f7fe f9ba 	bl	800169c <lcd_put_cur>
			amp = amplitude_DAC;
 8003328:	4b8d      	ldr	r3, [pc, #564]	; (8003560 <branchesSevenToTen+0x2dc>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003332:	ee17 2a90 	vmov	r2, s15
 8003336:	4b8b      	ldr	r3, [pc, #556]	; (8003564 <branchesSevenToTen+0x2e0>)
 8003338:	601a      	str	r2, [r3, #0]
			char send_string[] = "XXXXmV";
 800333a:	4a8b      	ldr	r2, [pc, #556]	; (8003568 <branchesSevenToTen+0x2e4>)
 800333c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003344:	6018      	str	r0, [r3, #0]
 8003346:	3304      	adds	r3, #4
 8003348:	8019      	strh	r1, [r3, #0]
 800334a:	3302      	adds	r3, #2
 800334c:	0c0a      	lsrs	r2, r1, #16
 800334e:	701a      	strb	r2, [r3, #0]
			send_string[0] = (amp / 1000) + 48;
 8003350:	4b84      	ldr	r3, [pc, #528]	; (8003564 <branchesSevenToTen+0x2e0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a85      	ldr	r2, [pc, #532]	; (800356c <branchesSevenToTen+0x2e8>)
 8003356:	fb82 1203 	smull	r1, r2, r2, r3
 800335a:	1192      	asrs	r2, r2, #6
 800335c:	17db      	asrs	r3, r3, #31
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	3330      	adds	r3, #48	; 0x30
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			send_string[1] = ((amp % 1000) / 100) + 48;
 800336a:	4b7e      	ldr	r3, [pc, #504]	; (8003564 <branchesSevenToTen+0x2e0>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4b7f      	ldr	r3, [pc, #508]	; (800356c <branchesSevenToTen+0x2e8>)
 8003370:	fb83 1302 	smull	r1, r3, r3, r2
 8003374:	1199      	asrs	r1, r3, #6
 8003376:	17d3      	asrs	r3, r2, #31
 8003378:	1acb      	subs	r3, r1, r3
 800337a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	4a7a      	ldr	r2, [pc, #488]	; (8003570 <branchesSevenToTen+0x2ec>)
 8003386:	fb82 1203 	smull	r1, r2, r2, r3
 800338a:	1152      	asrs	r2, r2, #5
 800338c:	17db      	asrs	r3, r3, #31
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	3330      	adds	r3, #48	; 0x30
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			send_string[2] = ((amp % 100) / 10) + 48;
 800339a:	4b72      	ldr	r3, [pc, #456]	; (8003564 <branchesSevenToTen+0x2e0>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b74      	ldr	r3, [pc, #464]	; (8003570 <branchesSevenToTen+0x2ec>)
 80033a0:	fb83 1302 	smull	r1, r3, r3, r2
 80033a4:	1159      	asrs	r1, r3, #5
 80033a6:	17d3      	asrs	r3, r2, #31
 80033a8:	1acb      	subs	r3, r1, r3
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	4a70      	ldr	r2, [pc, #448]	; (8003574 <branchesSevenToTen+0x2f0>)
 80033b4:	fb82 1203 	smull	r1, r2, r2, r3
 80033b8:	1092      	asrs	r2, r2, #2
 80033ba:	17db      	asrs	r3, r3, #31
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	3330      	adds	r3, #48	; 0x30
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			send_string[3] = (amp % 10) + 48;
 80033c8:	4b66      	ldr	r3, [pc, #408]	; (8003564 <branchesSevenToTen+0x2e0>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b69      	ldr	r3, [pc, #420]	; (8003574 <branchesSevenToTen+0x2f0>)
 80033ce:	fb83 1302 	smull	r1, r3, r3, r2
 80033d2:	1099      	asrs	r1, r3, #2
 80033d4:	17d3      	asrs	r3, r2, #31
 80033d6:	1ac9      	subs	r1, r1, r3
 80033d8:	460b      	mov	r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	1ad1      	subs	r1, r2, r3
 80033e2:	b2cb      	uxtb	r3, r1
 80033e4:	3330      	adds	r3, #48	; 0x30
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			lcd_send_string(send_string);
 80033ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe f9ae 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 80033f6:	4b55      	ldr	r3, [pc, #340]	; (800354c <branchesSevenToTen+0x2c8>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
		if (leftButtonPressed == 1) {
 80033fc:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <branchesSevenToTen+0x2f4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d176      	bne.n	80034f2 <branchesSevenToTen+0x26e>
			leftButtonPressed = 0;
 8003404:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <branchesSevenToTen+0x2f4>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
			lcd_put_cur(1, 0);
 800340a:	2100      	movs	r1, #0
 800340c:	2001      	movs	r0, #1
 800340e:	f7fe f945 	bl	800169c <lcd_put_cur>
			if ((amp - 100) < 0) {
 8003412:	4b54      	ldr	r3, [pc, #336]	; (8003564 <branchesSevenToTen+0x2e0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3b64      	subs	r3, #100	; 0x64
 8003418:	2b00      	cmp	r3, #0
 800341a:	da06      	bge.n	800342a <branchesSevenToTen+0x1a6>
				amp = 2200 - (100 - amp);
 800341c:	4b51      	ldr	r3, [pc, #324]	; (8003564 <branchesSevenToTen+0x2e0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8003424:	4a4f      	ldr	r2, [pc, #316]	; (8003564 <branchesSevenToTen+0x2e0>)
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	e004      	b.n	8003434 <branchesSevenToTen+0x1b0>
				amp = amp - 100;
 800342a:	4b4e      	ldr	r3, [pc, #312]	; (8003564 <branchesSevenToTen+0x2e0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3b64      	subs	r3, #100	; 0x64
 8003430:	4a4c      	ldr	r2, [pc, #304]	; (8003564 <branchesSevenToTen+0x2e0>)
 8003432:	6013      	str	r3, [r2, #0]
			char send_string[] = "XXXXmV";
 8003434:	4a4c      	ldr	r2, [pc, #304]	; (8003568 <branchesSevenToTen+0x2e4>)
 8003436:	f107 0320 	add.w	r3, r7, #32
 800343a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800343e:	6018      	str	r0, [r3, #0]
 8003440:	3304      	adds	r3, #4
 8003442:	8019      	strh	r1, [r3, #0]
 8003444:	3302      	adds	r3, #2
 8003446:	0c0a      	lsrs	r2, r1, #16
 8003448:	701a      	strb	r2, [r3, #0]
			send_string[0] = (amp / 1000) + 48;
 800344a:	4b46      	ldr	r3, [pc, #280]	; (8003564 <branchesSevenToTen+0x2e0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a47      	ldr	r2, [pc, #284]	; (800356c <branchesSevenToTen+0x2e8>)
 8003450:	fb82 1203 	smull	r1, r2, r2, r3
 8003454:	1192      	asrs	r2, r2, #6
 8003456:	17db      	asrs	r3, r3, #31
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3330      	adds	r3, #48	; 0x30
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f887 3020 	strb.w	r3, [r7, #32]
			send_string[1] = ((amp % 1000) / 100) + 48;
 8003464:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <branchesSevenToTen+0x2e0>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b40      	ldr	r3, [pc, #256]	; (800356c <branchesSevenToTen+0x2e8>)
 800346a:	fb83 1302 	smull	r1, r3, r3, r2
 800346e:	1199      	asrs	r1, r3, #6
 8003470:	17d3      	asrs	r3, r2, #31
 8003472:	1acb      	subs	r3, r1, r3
 8003474:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <branchesSevenToTen+0x2ec>)
 8003480:	fb82 1203 	smull	r1, r2, r2, r3
 8003484:	1152      	asrs	r2, r2, #5
 8003486:	17db      	asrs	r3, r3, #31
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	3330      	adds	r3, #48	; 0x30
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			send_string[2] = ((amp % 100) / 10) + 48;
 8003494:	4b33      	ldr	r3, [pc, #204]	; (8003564 <branchesSevenToTen+0x2e0>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <branchesSevenToTen+0x2ec>)
 800349a:	fb83 1302 	smull	r1, r3, r3, r2
 800349e:	1159      	asrs	r1, r3, #5
 80034a0:	17d3      	asrs	r3, r2, #31
 80034a2:	1acb      	subs	r3, r1, r3
 80034a4:	2164      	movs	r1, #100	; 0x64
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	4a31      	ldr	r2, [pc, #196]	; (8003574 <branchesSevenToTen+0x2f0>)
 80034ae:	fb82 1203 	smull	r1, r2, r2, r3
 80034b2:	1092      	asrs	r2, r2, #2
 80034b4:	17db      	asrs	r3, r3, #31
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3330      	adds	r3, #48	; 0x30
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			send_string[3] = (amp % 10) + 48;
 80034c2:	4b28      	ldr	r3, [pc, #160]	; (8003564 <branchesSevenToTen+0x2e0>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <branchesSevenToTen+0x2f0>)
 80034c8:	fb83 1302 	smull	r1, r3, r3, r2
 80034cc:	1099      	asrs	r1, r3, #2
 80034ce:	17d3      	asrs	r3, r2, #31
 80034d0:	1ac9      	subs	r1, r1, r3
 80034d2:	460b      	mov	r3, r1
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	1ad1      	subs	r1, r2, r3
 80034dc:	b2cb      	uxtb	r3, r1
 80034de:	3330      	adds	r3, #48	; 0x30
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			lcd_send_string(send_string);
 80034e6:	f107 0320 	add.w	r3, r7, #32
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe f931 	bl	8001752 <lcd_send_string>
}
 80034f0:	e2da      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (upButtonPressed == 1) {
 80034f2:	4b19      	ldr	r3, [pc, #100]	; (8003558 <branchesSevenToTen+0x2d4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10b      	bne.n	8003512 <branchesSevenToTen+0x28e>
			upButtonPressed = 0;
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <branchesSevenToTen+0x2d4>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
			output_branch_state = 7;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <branchesSevenToTen+0x2c4>)
 8003502:	2207      	movs	r2, #7
 8003504:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <branchesSevenToTen+0x2c8>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800350c:	f7fe f935 	bl	800177a <lcd_clear>
}
 8003510:	e2ca      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (rightButtonPressed == 1) {
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <branchesSevenToTen+0x2d8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	f040 8090 	bne.w	800363c <branchesSevenToTen+0x3b8>
			rightButtonPressed = 0;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <branchesSevenToTen+0x2d8>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
			lcd_put_cur(1, 0);
 8003522:	2100      	movs	r1, #0
 8003524:	2001      	movs	r0, #1
 8003526:	f7fe f8b9 	bl	800169c <lcd_put_cur>
			if ((amp + 100 > 2200)) {
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <branchesSevenToTen+0x2e0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3364      	adds	r3, #100	; 0x64
 8003530:	f640 0298 	movw	r2, #2200	; 0x898
 8003534:	4293      	cmp	r3, r2
 8003536:	dd21      	ble.n	800357c <branchesSevenToTen+0x2f8>
				amp = (amp + 100) - 2200;
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <branchesSevenToTen+0x2e0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <branchesSevenToTen+0x2e0>)
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e01f      	b.n	8003586 <branchesSevenToTen+0x302>
 8003546:	bf00      	nop
 8003548:	20000059 	.word	0x20000059
 800354c:	200000fa 	.word	0x200000fa
 8003550:	0800c2dc 	.word	0x0800c2dc
 8003554:	20000234 	.word	0x20000234
 8003558:	20000114 	.word	0x20000114
 800355c:	2000122c 	.word	0x2000122c
 8003560:	2000003c 	.word	0x2000003c
 8003564:	2000018c 	.word	0x2000018c
 8003568:	0800c2f0 	.word	0x0800c2f0
 800356c:	10624dd3 	.word	0x10624dd3
 8003570:	51eb851f 	.word	0x51eb851f
 8003574:	66666667 	.word	0x66666667
 8003578:	20001230 	.word	0x20001230
				amp = amp + 100;
 800357c:	4bb1      	ldr	r3, [pc, #708]	; (8003844 <branchesSevenToTen+0x5c0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3364      	adds	r3, #100	; 0x64
 8003582:	4ab0      	ldr	r2, [pc, #704]	; (8003844 <branchesSevenToTen+0x5c0>)
 8003584:	6013      	str	r3, [r2, #0]
			char send_string[] = "XXXXmV";
 8003586:	4ab0      	ldr	r2, [pc, #704]	; (8003848 <branchesSevenToTen+0x5c4>)
 8003588:	f107 0318 	add.w	r3, r7, #24
 800358c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003590:	6018      	str	r0, [r3, #0]
 8003592:	3304      	adds	r3, #4
 8003594:	8019      	strh	r1, [r3, #0]
 8003596:	3302      	adds	r3, #2
 8003598:	0c0a      	lsrs	r2, r1, #16
 800359a:	701a      	strb	r2, [r3, #0]
			send_string[0] = (amp / 1000) + 48;
 800359c:	4ba9      	ldr	r3, [pc, #676]	; (8003844 <branchesSevenToTen+0x5c0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4aaa      	ldr	r2, [pc, #680]	; (800384c <branchesSevenToTen+0x5c8>)
 80035a2:	fb82 1203 	smull	r1, r2, r2, r3
 80035a6:	1192      	asrs	r2, r2, #6
 80035a8:	17db      	asrs	r3, r3, #31
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3330      	adds	r3, #48	; 0x30
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	763b      	strb	r3, [r7, #24]
			send_string[1] = ((amp % 1000) / 100) + 48;
 80035b4:	4ba3      	ldr	r3, [pc, #652]	; (8003844 <branchesSevenToTen+0x5c0>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4ba4      	ldr	r3, [pc, #656]	; (800384c <branchesSevenToTen+0x5c8>)
 80035ba:	fb83 1302 	smull	r1, r3, r3, r2
 80035be:	1199      	asrs	r1, r3, #6
 80035c0:	17d3      	asrs	r3, r2, #31
 80035c2:	1acb      	subs	r3, r1, r3
 80035c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	4aa0      	ldr	r2, [pc, #640]	; (8003850 <branchesSevenToTen+0x5cc>)
 80035d0:	fb82 1203 	smull	r1, r2, r2, r3
 80035d4:	1152      	asrs	r2, r2, #5
 80035d6:	17db      	asrs	r3, r3, #31
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3330      	adds	r3, #48	; 0x30
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	767b      	strb	r3, [r7, #25]
			send_string[2] = ((amp % 100) / 10) + 48;
 80035e2:	4b98      	ldr	r3, [pc, #608]	; (8003844 <branchesSevenToTen+0x5c0>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b9a      	ldr	r3, [pc, #616]	; (8003850 <branchesSevenToTen+0x5cc>)
 80035e8:	fb83 1302 	smull	r1, r3, r3, r2
 80035ec:	1159      	asrs	r1, r3, #5
 80035ee:	17d3      	asrs	r3, r2, #31
 80035f0:	1acb      	subs	r3, r1, r3
 80035f2:	2164      	movs	r1, #100	; 0x64
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	4a96      	ldr	r2, [pc, #600]	; (8003854 <branchesSevenToTen+0x5d0>)
 80035fc:	fb82 1203 	smull	r1, r2, r2, r3
 8003600:	1092      	asrs	r2, r2, #2
 8003602:	17db      	asrs	r3, r3, #31
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3330      	adds	r3, #48	; 0x30
 800360a:	b2db      	uxtb	r3, r3
 800360c:	76bb      	strb	r3, [r7, #26]
			send_string[3] = (amp % 10) + 48;
 800360e:	4b8d      	ldr	r3, [pc, #564]	; (8003844 <branchesSevenToTen+0x5c0>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b90      	ldr	r3, [pc, #576]	; (8003854 <branchesSevenToTen+0x5d0>)
 8003614:	fb83 1302 	smull	r1, r3, r3, r2
 8003618:	1099      	asrs	r1, r3, #2
 800361a:	17d3      	asrs	r3, r2, #31
 800361c:	1ac9      	subs	r1, r1, r3
 800361e:	460b      	mov	r3, r1
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	1ad1      	subs	r1, r2, r3
 8003628:	b2cb      	uxtb	r3, r1
 800362a:	3330      	adds	r3, #48	; 0x30
 800362c:	b2db      	uxtb	r3, r3
 800362e:	76fb      	strb	r3, [r7, #27]
			lcd_send_string(send_string);
 8003630:	f107 0318 	add.w	r3, r7, #24
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe f88c 	bl	8001752 <lcd_send_string>
}
 800363a:	e235      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (buttonPressed == 1) {
 800363c:	4b86      	ldr	r3, [pc, #536]	; (8003858 <branchesSevenToTen+0x5d4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	f040 8231 	bne.w	8003aa8 <branchesSevenToTen+0x824>
			buttonPressed = 0;
 8003646:	4b84      	ldr	r3, [pc, #528]	; (8003858 <branchesSevenToTen+0x5d4>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
			amplitude_DAC = amp;
 800364c:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <branchesSevenToTen+0x5c0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003658:	4b80      	ldr	r3, [pc, #512]	; (800385c <branchesSevenToTen+0x5d8>)
 800365a:	edc3 7a00 	vstr	s15, [r3]
			lcd_put_cur(1, 8);
 800365e:	2108      	movs	r1, #8
 8003660:	2001      	movs	r0, #1
 8003662:	f7fe f81b 	bl	800169c <lcd_put_cur>
			lcd_send_string("SET");
 8003666:	487e      	ldr	r0, [pc, #504]	; (8003860 <branchesSevenToTen+0x5dc>)
 8003668:	f7fe f873 	bl	8001752 <lcd_send_string>
}
 800366c:	e21c      	b.n	8003aa8 <branchesSevenToTen+0x824>
	} else if (output_branch_state == 9) {
 800366e:	4b7d      	ldr	r3, [pc, #500]	; (8003864 <branchesSevenToTen+0x5e0>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b09      	cmp	r3, #9
 8003674:	d14a      	bne.n	800370c <branchesSevenToTen+0x488>
		if (output_state_has_displayed == 0) {
 8003676:	4b7c      	ldr	r3, [pc, #496]	; (8003868 <branchesSevenToTen+0x5e4>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <branchesSevenToTen+0x406>
			lcd_send_string("OFFSET");
 800367e:	487b      	ldr	r0, [pc, #492]	; (800386c <branchesSevenToTen+0x5e8>)
 8003680:	f7fe f867 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 8003684:	4b78      	ldr	r3, [pc, #480]	; (8003868 <branchesSevenToTen+0x5e4>)
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
		if (downButtonPressed == 1) {
 800368a:	4b79      	ldr	r3, [pc, #484]	; (8003870 <branchesSevenToTen+0x5ec>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10b      	bne.n	80036aa <branchesSevenToTen+0x426>
			downButtonPressed = 0;
 8003692:	4b77      	ldr	r3, [pc, #476]	; (8003870 <branchesSevenToTen+0x5ec>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
			output_branch_state = 10;
 8003698:	4b72      	ldr	r3, [pc, #456]	; (8003864 <branchesSevenToTen+0x5e0>)
 800369a:	220a      	movs	r2, #10
 800369c:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 800369e:	4b72      	ldr	r3, [pc, #456]	; (8003868 <branchesSevenToTen+0x5e4>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80036a4:	f7fe f869 	bl	800177a <lcd_clear>
}
 80036a8:	e1fe      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (upButtonPressed == 1) {
 80036aa:	4b72      	ldr	r3, [pc, #456]	; (8003874 <branchesSevenToTen+0x5f0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10b      	bne.n	80036ca <branchesSevenToTen+0x446>
			upButtonPressed = 0;
 80036b2:	4b70      	ldr	r3, [pc, #448]	; (8003874 <branchesSevenToTen+0x5f0>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
			output_branch_state = 6;
 80036b8:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <branchesSevenToTen+0x5e0>)
 80036ba:	2206      	movs	r2, #6
 80036bc:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80036be:	4b6a      	ldr	r3, [pc, #424]	; (8003868 <branchesSevenToTen+0x5e4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80036c4:	f7fe f859 	bl	800177a <lcd_clear>
}
 80036c8:	e1ee      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (rightButtonPressed == 1) {
 80036ca:	4b6b      	ldr	r3, [pc, #428]	; (8003878 <branchesSevenToTen+0x5f4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10b      	bne.n	80036ea <branchesSevenToTen+0x466>
			rightButtonPressed = 0;
 80036d2:	4b69      	ldr	r3, [pc, #420]	; (8003878 <branchesSevenToTen+0x5f4>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
			output_branch_state = 11;
 80036d8:	4b62      	ldr	r3, [pc, #392]	; (8003864 <branchesSevenToTen+0x5e0>)
 80036da:	220b      	movs	r2, #11
 80036dc:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 80036de:	4b62      	ldr	r3, [pc, #392]	; (8003868 <branchesSevenToTen+0x5e4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80036e4:	f7fe f849 	bl	800177a <lcd_clear>
}
 80036e8:	e1de      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (leftButtonPressed == 1) {
 80036ea:	4b64      	ldr	r3, [pc, #400]	; (800387c <branchesSevenToTen+0x5f8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	f040 81da 	bne.w	8003aa8 <branchesSevenToTen+0x824>
			leftButtonPressed = 0;
 80036f4:	4b61      	ldr	r3, [pc, #388]	; (800387c <branchesSevenToTen+0x5f8>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
			output_branch_state = 7;
 80036fa:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <branchesSevenToTen+0x5e0>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003700:	4b59      	ldr	r3, [pc, #356]	; (8003868 <branchesSevenToTen+0x5e4>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003706:	f7fe f838 	bl	800177a <lcd_clear>
}
 800370a:	e1cd      	b.n	8003aa8 <branchesSevenToTen+0x824>
	} else if (output_branch_state == 10) {
 800370c:	4b55      	ldr	r3, [pc, #340]	; (8003864 <branchesSevenToTen+0x5e0>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b0a      	cmp	r3, #10
 8003712:	f040 81c9 	bne.w	8003aa8 <branchesSevenToTen+0x824>
		if (output_state_has_displayed == 0) {
 8003716:	4b54      	ldr	r3, [pc, #336]	; (8003868 <branchesSevenToTen+0x5e4>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d17a      	bne.n	8003814 <branchesSevenToTen+0x590>
			lcd_send_string("OFFSET");
 800371e:	4853      	ldr	r0, [pc, #332]	; (800386c <branchesSevenToTen+0x5e8>)
 8003720:	f7fe f817 	bl	8001752 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003724:	2100      	movs	r1, #0
 8003726:	2001      	movs	r0, #1
 8003728:	f7fd ffb8 	bl	800169c <lcd_put_cur>
			if (signal_type_DAC[0] == 'd')
 800372c:	4b54      	ldr	r3, [pc, #336]	; (8003880 <branchesSevenToTen+0x5fc>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b64      	cmp	r3, #100	; 0x64
 8003732:	d109      	bne.n	8003748 <branchesSevenToTen+0x4c4>
				offset1 = DC_offset_DAC;
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <branchesSevenToTen+0x600>)
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800373e:	ee17 2a90 	vmov	r2, s15
 8003742:	4b51      	ldr	r3, [pc, #324]	; (8003888 <branchesSevenToTen+0x604>)
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e008      	b.n	800375a <branchesSevenToTen+0x4d6>
				offset1 = S_offset_DAC;
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <branchesSevenToTen+0x608>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003752:	ee17 2a90 	vmov	r2, s15
 8003756:	4b4c      	ldr	r3, [pc, #304]	; (8003888 <branchesSevenToTen+0x604>)
 8003758:	601a      	str	r2, [r3, #0]
			char send_string[] = "XXXXmV";
 800375a:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <branchesSevenToTen+0x5c4>)
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003764:	6018      	str	r0, [r3, #0]
 8003766:	3304      	adds	r3, #4
 8003768:	8019      	strh	r1, [r3, #0]
 800376a:	3302      	adds	r3, #2
 800376c:	0c0a      	lsrs	r2, r1, #16
 800376e:	701a      	strb	r2, [r3, #0]
			send_string[0] = (offset1 / 1000) + 48;
 8003770:	4b45      	ldr	r3, [pc, #276]	; (8003888 <branchesSevenToTen+0x604>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a35      	ldr	r2, [pc, #212]	; (800384c <branchesSevenToTen+0x5c8>)
 8003776:	fb82 1203 	smull	r1, r2, r2, r3
 800377a:	1192      	asrs	r2, r2, #6
 800377c:	17db      	asrs	r3, r3, #31
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3330      	adds	r3, #48	; 0x30
 8003784:	b2db      	uxtb	r3, r3
 8003786:	743b      	strb	r3, [r7, #16]
			send_string[1] = ((offset1 % 1000) / 100) + 48;
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <branchesSevenToTen+0x604>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b2f      	ldr	r3, [pc, #188]	; (800384c <branchesSevenToTen+0x5c8>)
 800378e:	fb83 1302 	smull	r1, r3, r3, r2
 8003792:	1199      	asrs	r1, r3, #6
 8003794:	17d3      	asrs	r3, r2, #31
 8003796:	1acb      	subs	r3, r1, r3
 8003798:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <branchesSevenToTen+0x5cc>)
 80037a4:	fb82 1203 	smull	r1, r2, r2, r3
 80037a8:	1152      	asrs	r2, r2, #5
 80037aa:	17db      	asrs	r3, r3, #31
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3330      	adds	r3, #48	; 0x30
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	747b      	strb	r3, [r7, #17]
			send_string[2] = ((offset1 % 100) / 10) + 48;
 80037b6:	4b34      	ldr	r3, [pc, #208]	; (8003888 <branchesSevenToTen+0x604>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b25      	ldr	r3, [pc, #148]	; (8003850 <branchesSevenToTen+0x5cc>)
 80037bc:	fb83 1302 	smull	r1, r3, r3, r2
 80037c0:	1159      	asrs	r1, r3, #5
 80037c2:	17d3      	asrs	r3, r2, #31
 80037c4:	1acb      	subs	r3, r1, r3
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	4a21      	ldr	r2, [pc, #132]	; (8003854 <branchesSevenToTen+0x5d0>)
 80037d0:	fb82 1203 	smull	r1, r2, r2, r3
 80037d4:	1092      	asrs	r2, r2, #2
 80037d6:	17db      	asrs	r3, r3, #31
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3330      	adds	r3, #48	; 0x30
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	74bb      	strb	r3, [r7, #18]
			send_string[3] = (offset1 % 10) + 48;
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <branchesSevenToTen+0x604>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <branchesSevenToTen+0x5d0>)
 80037e8:	fb83 1302 	smull	r1, r3, r3, r2
 80037ec:	1099      	asrs	r1, r3, #2
 80037ee:	17d3      	asrs	r3, r2, #31
 80037f0:	1ac9      	subs	r1, r1, r3
 80037f2:	460b      	mov	r3, r1
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	1ad1      	subs	r1, r2, r3
 80037fc:	b2cb      	uxtb	r3, r1
 80037fe:	3330      	adds	r3, #48	; 0x30
 8003800:	b2db      	uxtb	r3, r3
 8003802:	74fb      	strb	r3, [r7, #19]
			lcd_send_string(send_string);
 8003804:	f107 0310 	add.w	r3, r7, #16
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd ffa2 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 800380e:	4b16      	ldr	r3, [pc, #88]	; (8003868 <branchesSevenToTen+0x5e4>)
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
		if (leftButtonPressed == 1) {
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <branchesSevenToTen+0x5f8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 8099 	bne.w	8003950 <branchesSevenToTen+0x6cc>
			leftButtonPressed = 0;
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <branchesSevenToTen+0x5f8>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
			lcd_put_cur(1, 0);
 8003824:	2100      	movs	r1, #0
 8003826:	2001      	movs	r0, #1
 8003828:	f7fd ff38 	bl	800169c <lcd_put_cur>
			if ((offset1 - 100) < 0) {
 800382c:	4b16      	ldr	r3, [pc, #88]	; (8003888 <branchesSevenToTen+0x604>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3b64      	subs	r3, #100	; 0x64
 8003832:	2b00      	cmp	r3, #0
 8003834:	da2c      	bge.n	8003890 <branchesSevenToTen+0x60c>
				offset1 = 2200 - (100 - offset1);
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <branchesSevenToTen+0x604>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800383e:	4a12      	ldr	r2, [pc, #72]	; (8003888 <branchesSevenToTen+0x604>)
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e02a      	b.n	800389a <branchesSevenToTen+0x616>
 8003844:	2000018c 	.word	0x2000018c
 8003848:	0800c2f0 	.word	0x0800c2f0
 800384c:	10624dd3 	.word	0x10624dd3
 8003850:	51eb851f 	.word	0x51eb851f
 8003854:	66666667 	.word	0x66666667
 8003858:	2000023c 	.word	0x2000023c
 800385c:	2000003c 	.word	0x2000003c
 8003860:	0800c298 	.word	0x0800c298
 8003864:	20000059 	.word	0x20000059
 8003868:	200000fa 	.word	0x200000fa
 800386c:	0800c2e8 	.word	0x0800c2e8
 8003870:	20000234 	.word	0x20000234
 8003874:	20000114 	.word	0x20000114
 8003878:	2000122c 	.word	0x2000122c
 800387c:	20001230 	.word	0x20001230
 8003880:	2000004c 	.word	0x2000004c
 8003884:	20000044 	.word	0x20000044
 8003888:	20000118 	.word	0x20000118
 800388c:	20000048 	.word	0x20000048
				offset1 = offset1 - 100;
 8003890:	4b87      	ldr	r3, [pc, #540]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3b64      	subs	r3, #100	; 0x64
 8003896:	4a86      	ldr	r2, [pc, #536]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003898:	6013      	str	r3, [r2, #0]
			char send_string[] = "XXXXmV";
 800389a:	4a86      	ldr	r2, [pc, #536]	; (8003ab4 <branchesSevenToTen+0x830>)
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038a4:	6018      	str	r0, [r3, #0]
 80038a6:	3304      	adds	r3, #4
 80038a8:	8019      	strh	r1, [r3, #0]
 80038aa:	3302      	adds	r3, #2
 80038ac:	0c0a      	lsrs	r2, r1, #16
 80038ae:	701a      	strb	r2, [r3, #0]
			send_string[0] = (offset1 / 1000) + 48;
 80038b0:	4b7f      	ldr	r3, [pc, #508]	; (8003ab0 <branchesSevenToTen+0x82c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a80      	ldr	r2, [pc, #512]	; (8003ab8 <branchesSevenToTen+0x834>)
 80038b6:	fb82 1203 	smull	r1, r2, r2, r3
 80038ba:	1192      	asrs	r2, r2, #6
 80038bc:	17db      	asrs	r3, r3, #31
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	3330      	adds	r3, #48	; 0x30
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	723b      	strb	r3, [r7, #8]
			send_string[1] = ((offset1 % 1000) / 100) + 48;
 80038c8:	4b79      	ldr	r3, [pc, #484]	; (8003ab0 <branchesSevenToTen+0x82c>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b7a      	ldr	r3, [pc, #488]	; (8003ab8 <branchesSevenToTen+0x834>)
 80038ce:	fb83 1302 	smull	r1, r3, r3, r2
 80038d2:	1199      	asrs	r1, r3, #6
 80038d4:	17d3      	asrs	r3, r2, #31
 80038d6:	1acb      	subs	r3, r1, r3
 80038d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	4a76      	ldr	r2, [pc, #472]	; (8003abc <branchesSevenToTen+0x838>)
 80038e4:	fb82 1203 	smull	r1, r2, r2, r3
 80038e8:	1152      	asrs	r2, r2, #5
 80038ea:	17db      	asrs	r3, r3, #31
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	3330      	adds	r3, #48	; 0x30
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	727b      	strb	r3, [r7, #9]
			send_string[2] = ((offset1 % 100) / 10) + 48;
 80038f6:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <branchesSevenToTen+0x82c>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b70      	ldr	r3, [pc, #448]	; (8003abc <branchesSevenToTen+0x838>)
 80038fc:	fb83 1302 	smull	r1, r3, r3, r2
 8003900:	1159      	asrs	r1, r3, #5
 8003902:	17d3      	asrs	r3, r2, #31
 8003904:	1acb      	subs	r3, r1, r3
 8003906:	2164      	movs	r1, #100	; 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	4a6c      	ldr	r2, [pc, #432]	; (8003ac0 <branchesSevenToTen+0x83c>)
 8003910:	fb82 1203 	smull	r1, r2, r2, r3
 8003914:	1092      	asrs	r2, r2, #2
 8003916:	17db      	asrs	r3, r3, #31
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	3330      	adds	r3, #48	; 0x30
 800391e:	b2db      	uxtb	r3, r3
 8003920:	72bb      	strb	r3, [r7, #10]
			send_string[3] = (offset1 % 10) + 48;
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b66      	ldr	r3, [pc, #408]	; (8003ac0 <branchesSevenToTen+0x83c>)
 8003928:	fb83 1302 	smull	r1, r3, r3, r2
 800392c:	1099      	asrs	r1, r3, #2
 800392e:	17d3      	asrs	r3, r2, #31
 8003930:	1ac9      	subs	r1, r1, r3
 8003932:	460b      	mov	r3, r1
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	1ad1      	subs	r1, r2, r3
 800393c:	b2cb      	uxtb	r3, r1
 800393e:	3330      	adds	r3, #48	; 0x30
 8003940:	b2db      	uxtb	r3, r3
 8003942:	72fb      	strb	r3, [r7, #11]
			lcd_send_string(send_string);
 8003944:	f107 0308 	add.w	r3, r7, #8
 8003948:	4618      	mov	r0, r3
 800394a:	f7fd ff02 	bl	8001752 <lcd_send_string>
}
 800394e:	e0ab      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (upButtonPressed == 1) {
 8003950:	4b5c      	ldr	r3, [pc, #368]	; (8003ac4 <branchesSevenToTen+0x840>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d10b      	bne.n	8003970 <branchesSevenToTen+0x6ec>
			upButtonPressed = 0;
 8003958:	4b5a      	ldr	r3, [pc, #360]	; (8003ac4 <branchesSevenToTen+0x840>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
			output_branch_state = 9;
 800395e:	4b5a      	ldr	r3, [pc, #360]	; (8003ac8 <branchesSevenToTen+0x844>)
 8003960:	2209      	movs	r2, #9
 8003962:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003964:	4b59      	ldr	r3, [pc, #356]	; (8003acc <branchesSevenToTen+0x848>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800396a:	f7fd ff06 	bl	800177a <lcd_clear>
}
 800396e:	e09b      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (rightButtonPressed == 1) {
 8003970:	4b57      	ldr	r3, [pc, #348]	; (8003ad0 <branchesSevenToTen+0x84c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d172      	bne.n	8003a5e <branchesSevenToTen+0x7da>
			rightButtonPressed = 0;
 8003978:	4b55      	ldr	r3, [pc, #340]	; (8003ad0 <branchesSevenToTen+0x84c>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
			lcd_put_cur(1, 0);
 800397e:	2100      	movs	r1, #0
 8003980:	2001      	movs	r0, #1
 8003982:	f7fd fe8b 	bl	800169c <lcd_put_cur>
			if ((offset1 + 100) > 2200) {
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3364      	adds	r3, #100	; 0x64
 800398c:	f640 0298 	movw	r2, #2200	; 0x898
 8003990:	4293      	cmp	r3, r2
 8003992:	dd06      	ble.n	80039a2 <branchesSevenToTen+0x71e>
				offset1 = (offset1 + 100) - 2200;
 8003994:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 800399c:	4a44      	ldr	r2, [pc, #272]	; (8003ab0 <branchesSevenToTen+0x82c>)
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e004      	b.n	80039ac <branchesSevenToTen+0x728>
				offset1 = offset1 + 100;
 80039a2:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <branchesSevenToTen+0x82c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3364      	adds	r3, #100	; 0x64
 80039a8:	4a41      	ldr	r2, [pc, #260]	; (8003ab0 <branchesSevenToTen+0x82c>)
 80039aa:	6013      	str	r3, [r2, #0]
			char send_string[] = "XXXXmV";
 80039ac:	4a41      	ldr	r2, [pc, #260]	; (8003ab4 <branchesSevenToTen+0x830>)
 80039ae:	463b      	mov	r3, r7
 80039b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039b4:	6018      	str	r0, [r3, #0]
 80039b6:	3304      	adds	r3, #4
 80039b8:	8019      	strh	r1, [r3, #0]
 80039ba:	3302      	adds	r3, #2
 80039bc:	0c0a      	lsrs	r2, r1, #16
 80039be:	701a      	strb	r2, [r3, #0]
			send_string[0] = (offset1 / 1000) + 48;
 80039c0:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <branchesSevenToTen+0x82c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a3c      	ldr	r2, [pc, #240]	; (8003ab8 <branchesSevenToTen+0x834>)
 80039c6:	fb82 1203 	smull	r1, r2, r2, r3
 80039ca:	1192      	asrs	r2, r2, #6
 80039cc:	17db      	asrs	r3, r3, #31
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	3330      	adds	r3, #48	; 0x30
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	703b      	strb	r3, [r7, #0]
			send_string[1] = ((offset1 % 1000) / 100) + 48;
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <branchesSevenToTen+0x82c>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <branchesSevenToTen+0x834>)
 80039de:	fb83 1302 	smull	r1, r3, r3, r2
 80039e2:	1199      	asrs	r1, r3, #6
 80039e4:	17d3      	asrs	r3, r2, #31
 80039e6:	1acb      	subs	r3, r1, r3
 80039e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	4a32      	ldr	r2, [pc, #200]	; (8003abc <branchesSevenToTen+0x838>)
 80039f4:	fb82 1203 	smull	r1, r2, r2, r3
 80039f8:	1152      	asrs	r2, r2, #5
 80039fa:	17db      	asrs	r3, r3, #31
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3330      	adds	r3, #48	; 0x30
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	707b      	strb	r3, [r7, #1]
			send_string[2] = ((offset1 % 100) / 10) + 48;
 8003a06:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <branchesSevenToTen+0x838>)
 8003a0c:	fb83 1302 	smull	r1, r3, r3, r2
 8003a10:	1159      	asrs	r1, r3, #5
 8003a12:	17d3      	asrs	r3, r2, #31
 8003a14:	1acb      	subs	r3, r1, r3
 8003a16:	2164      	movs	r1, #100	; 0x64
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	4a28      	ldr	r2, [pc, #160]	; (8003ac0 <branchesSevenToTen+0x83c>)
 8003a20:	fb82 1203 	smull	r1, r2, r2, r3
 8003a24:	1092      	asrs	r2, r2, #2
 8003a26:	17db      	asrs	r3, r3, #31
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3330      	adds	r3, #48	; 0x30
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	70bb      	strb	r3, [r7, #2]
			send_string[3] = (offset1 % 10) + 48;
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <branchesSevenToTen+0x83c>)
 8003a38:	fb83 1302 	smull	r1, r3, r3, r2
 8003a3c:	1099      	asrs	r1, r3, #2
 8003a3e:	17d3      	asrs	r3, r2, #31
 8003a40:	1ac9      	subs	r1, r1, r3
 8003a42:	460b      	mov	r3, r1
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	1ad1      	subs	r1, r2, r3
 8003a4c:	b2cb      	uxtb	r3, r1
 8003a4e:	3330      	adds	r3, #48	; 0x30
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	70fb      	strb	r3, [r7, #3]
			lcd_send_string(send_string);
 8003a54:	463b      	mov	r3, r7
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fe7b 	bl	8001752 <lcd_send_string>
}
 8003a5c:	e024      	b.n	8003aa8 <branchesSevenToTen+0x824>
		} else if (buttonPressed == 1) {
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <branchesSevenToTen+0x850>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d120      	bne.n	8003aa8 <branchesSevenToTen+0x824>
			buttonPressed = 0;
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <branchesSevenToTen+0x850>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
			if (signal_type_DAC[0] == 'd')
 8003a6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <branchesSevenToTen+0x854>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b64      	cmp	r3, #100	; 0x64
 8003a72:	d109      	bne.n	8003a88 <branchesSevenToTen+0x804>
				DC_offset_DAC = offset1;
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <branchesSevenToTen+0x858>)
 8003a82:	edc3 7a00 	vstr	s15, [r3]
 8003a86:	e008      	b.n	8003a9a <branchesSevenToTen+0x816>
				S_offset_DAC = offset1;
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <branchesSevenToTen+0x82c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <branchesSevenToTen+0x85c>)
 8003a96:	edc3 7a00 	vstr	s15, [r3]
			lcd_put_cur(1, 8);
 8003a9a:	2108      	movs	r1, #8
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f7fd fdfd 	bl	800169c <lcd_put_cur>
			lcd_send_string("SET");
 8003aa2:	4810      	ldr	r0, [pc, #64]	; (8003ae4 <branchesSevenToTen+0x860>)
 8003aa4:	f7fd fe55 	bl	8001752 <lcd_send_string>
}
 8003aa8:	bf00      	nop
 8003aaa:	3730      	adds	r7, #48	; 0x30
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000118 	.word	0x20000118
 8003ab4:	0800c2f0 	.word	0x0800c2f0
 8003ab8:	10624dd3 	.word	0x10624dd3
 8003abc:	51eb851f 	.word	0x51eb851f
 8003ac0:	66666667 	.word	0x66666667
 8003ac4:	20000114 	.word	0x20000114
 8003ac8:	20000059 	.word	0x20000059
 8003acc:	200000fa 	.word	0x200000fa
 8003ad0:	2000122c 	.word	0x2000122c
 8003ad4:	2000023c 	.word	0x2000023c
 8003ad8:	2000004c 	.word	0x2000004c
 8003adc:	20000044 	.word	0x20000044
 8003ae0:	20000048 	.word	0x20000048
 8003ae4:	0800c298 	.word	0x0800c298

08003ae8 <branchesElevenToFourteen>:

void branchesElevenToFourteen()
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b08d      	sub	sp, #52	; 0x34
 8003aec:	af00      	add	r7, sp, #0
	if (output_branch_state == 11) {
 8003aee:	4bb5      	ldr	r3, [pc, #724]	; (8003dc4 <branchesElevenToFourteen+0x2dc>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b0b      	cmp	r3, #11
 8003af4:	d14a      	bne.n	8003b8c <branchesElevenToFourteen+0xa4>
		if (output_state_has_displayed == 0) {
 8003af6:	4bb4      	ldr	r3, [pc, #720]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <branchesElevenToFourteen+0x22>
			lcd_send_string("FREQUENCY");
 8003afe:	48b3      	ldr	r0, [pc, #716]	; (8003dcc <branchesElevenToFourteen+0x2e4>)
 8003b00:	f7fd fe27 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 8003b04:	4bb0      	ldr	r3, [pc, #704]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
		}

		if (downButtonPressed == 1) {
 8003b0a:	4bb1      	ldr	r3, [pc, #708]	; (8003dd0 <branchesElevenToFourteen+0x2e8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10b      	bne.n	8003b2a <branchesElevenToFourteen+0x42>
			downButtonPressed = 0;
 8003b12:	4baf      	ldr	r3, [pc, #700]	; (8003dd0 <branchesElevenToFourteen+0x2e8>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
			output_branch_state = 12;
 8003b18:	4baa      	ldr	r3, [pc, #680]	; (8003dc4 <branchesElevenToFourteen+0x2dc>)
 8003b1a:	220c      	movs	r2, #12
 8003b1c:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003b1e:	4baa      	ldr	r3, [pc, #680]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003b24:	f7fd fe29 	bl	800177a <lcd_clear>
					duty_cycle_DAC = dutcyc;
					lcd_put_cur(6, 0);
					lcd_send_string("SET");
				}
	}
}
 8003b28:	e37d      	b.n	8004226 <branchesElevenToFourteen+0x73e>
		} else if (upButtonPressed == 1) {
 8003b2a:	4baa      	ldr	r3, [pc, #680]	; (8003dd4 <branchesElevenToFourteen+0x2ec>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d10b      	bne.n	8003b4a <branchesElevenToFourteen+0x62>
			upButtonPressed = 0;
 8003b32:	4ba8      	ldr	r3, [pc, #672]	; (8003dd4 <branchesElevenToFourteen+0x2ec>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
			output_branch_state = 6;
 8003b38:	4ba2      	ldr	r3, [pc, #648]	; (8003dc4 <branchesElevenToFourteen+0x2dc>)
 8003b3a:	2206      	movs	r2, #6
 8003b3c:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003b3e:	4ba2      	ldr	r3, [pc, #648]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003b44:	f7fd fe19 	bl	800177a <lcd_clear>
}
 8003b48:	e36d      	b.n	8004226 <branchesElevenToFourteen+0x73e>
		} else if (rightButtonPressed == 1) {
 8003b4a:	4ba3      	ldr	r3, [pc, #652]	; (8003dd8 <branchesElevenToFourteen+0x2f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10b      	bne.n	8003b6a <branchesElevenToFourteen+0x82>
			rightButtonPressed = 0;
 8003b52:	4ba1      	ldr	r3, [pc, #644]	; (8003dd8 <branchesElevenToFourteen+0x2f0>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
			output_branch_state = 13;
 8003b58:	4b9a      	ldr	r3, [pc, #616]	; (8003dc4 <branchesElevenToFourteen+0x2dc>)
 8003b5a:	220d      	movs	r2, #13
 8003b5c:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003b5e:	4b9a      	ldr	r3, [pc, #616]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003b64:	f7fd fe09 	bl	800177a <lcd_clear>
}
 8003b68:	e35d      	b.n	8004226 <branchesElevenToFourteen+0x73e>
		} else if (leftButtonPressed == 1) {
 8003b6a:	4b9c      	ldr	r3, [pc, #624]	; (8003ddc <branchesElevenToFourteen+0x2f4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	f040 8359 	bne.w	8004226 <branchesElevenToFourteen+0x73e>
			leftButtonPressed = 0;
 8003b74:	4b99      	ldr	r3, [pc, #612]	; (8003ddc <branchesElevenToFourteen+0x2f4>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
			output_branch_state = 9;
 8003b7a:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <branchesElevenToFourteen+0x2dc>)
 8003b7c:	2209      	movs	r2, #9
 8003b7e:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003b80:	4b91      	ldr	r3, [pc, #580]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003b86:	f7fd fdf8 	bl	800177a <lcd_clear>
}
 8003b8a:	e34c      	b.n	8004226 <branchesElevenToFourteen+0x73e>
	} else if (output_branch_state == 12) {
 8003b8c:	4b8d      	ldr	r3, [pc, #564]	; (8003dc4 <branchesElevenToFourteen+0x2dc>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b0c      	cmp	r3, #12
 8003b92:	f040 81b2 	bne.w	8003efa <branchesElevenToFourteen+0x412>
		if (output_state_has_displayed == 0) {
 8003b96:	4b8c      	ldr	r3, [pc, #560]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d16c      	bne.n	8003c78 <branchesElevenToFourteen+0x190>
			lcd_send_string("FREQUENCY");
 8003b9e:	488b      	ldr	r0, [pc, #556]	; (8003dcc <branchesElevenToFourteen+0x2e4>)
 8003ba0:	f7fd fdd7 	bl	8001752 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f7fd fd78 	bl	800169c <lcd_put_cur>
			freq1 = frequency_DAC;
 8003bac:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <branchesElevenToFourteen+0x2f8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b8c      	ldr	r3, [pc, #560]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003bb4:	601a      	str	r2, [r3, #0]
			char send_string[] = "XXXXHz";
 8003bb6:	4a8c      	ldr	r2, [pc, #560]	; (8003de8 <branchesElevenToFourteen+0x300>)
 8003bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc0:	6018      	str	r0, [r3, #0]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	8019      	strh	r1, [r3, #0]
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	0c0a      	lsrs	r2, r1, #16
 8003bca:	701a      	strb	r2, [r3, #0]
			send_string[0] = (freq1 / 1000) + 48;
 8003bcc:	4b85      	ldr	r3, [pc, #532]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a86      	ldr	r2, [pc, #536]	; (8003dec <branchesElevenToFourteen+0x304>)
 8003bd2:	fb82 1203 	smull	r1, r2, r2, r3
 8003bd6:	1192      	asrs	r2, r2, #6
 8003bd8:	17db      	asrs	r3, r3, #31
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	3330      	adds	r3, #48	; 0x30
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			send_string[1] = ((freq1 % 1000) / 100) + 48;
 8003be6:	4b7f      	ldr	r3, [pc, #508]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b80      	ldr	r3, [pc, #512]	; (8003dec <branchesElevenToFourteen+0x304>)
 8003bec:	fb83 1302 	smull	r1, r3, r3, r2
 8003bf0:	1199      	asrs	r1, r3, #6
 8003bf2:	17d3      	asrs	r3, r2, #31
 8003bf4:	1acb      	subs	r3, r1, r3
 8003bf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	4a7b      	ldr	r2, [pc, #492]	; (8003df0 <branchesElevenToFourteen+0x308>)
 8003c02:	fb82 1203 	smull	r1, r2, r2, r3
 8003c06:	1152      	asrs	r2, r2, #5
 8003c08:	17db      	asrs	r3, r3, #31
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	3330      	adds	r3, #48	; 0x30
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			send_string[2] = ((freq1 % 100) / 10) + 48;
 8003c16:	4b73      	ldr	r3, [pc, #460]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b75      	ldr	r3, [pc, #468]	; (8003df0 <branchesElevenToFourteen+0x308>)
 8003c1c:	fb83 1302 	smull	r1, r3, r3, r2
 8003c20:	1159      	asrs	r1, r3, #5
 8003c22:	17d3      	asrs	r3, r2, #31
 8003c24:	1acb      	subs	r3, r1, r3
 8003c26:	2164      	movs	r1, #100	; 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	4a71      	ldr	r2, [pc, #452]	; (8003df4 <branchesElevenToFourteen+0x30c>)
 8003c30:	fb82 1203 	smull	r1, r2, r2, r3
 8003c34:	1092      	asrs	r2, r2, #2
 8003c36:	17db      	asrs	r3, r3, #31
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	3330      	adds	r3, #48	; 0x30
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			send_string[3] = (freq1 % 10) + 48;
 8003c44:	4b67      	ldr	r3, [pc, #412]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <branchesElevenToFourteen+0x30c>)
 8003c4a:	fb83 1302 	smull	r1, r3, r3, r2
 8003c4e:	1099      	asrs	r1, r3, #2
 8003c50:	17d3      	asrs	r3, r2, #31
 8003c52:	1ac9      	subs	r1, r1, r3
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	1ad1      	subs	r1, r2, r3
 8003c5e:	b2cb      	uxtb	r3, r1
 8003c60:	3330      	adds	r3, #48	; 0x30
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			lcd_send_string(send_string);
 8003c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fd fd70 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 8003c72:	4b55      	ldr	r3, [pc, #340]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
		if (leftButtonPressed == 1) {
 8003c78:	4b58      	ldr	r3, [pc, #352]	; (8003ddc <branchesElevenToFourteen+0x2f4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d176      	bne.n	8003d6e <branchesElevenToFourteen+0x286>
			leftButtonPressed = 0;
 8003c80:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <branchesElevenToFourteen+0x2f4>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
			lcd_put_cur(1, 0);
 8003c86:	2100      	movs	r1, #0
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f7fd fd07 	bl	800169c <lcd_put_cur>
			if ((freq1 - 100) < 0) {
 8003c8e:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3b64      	subs	r3, #100	; 0x64
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	da06      	bge.n	8003ca6 <branchesElevenToFourteen+0x1be>
				freq1 = 2200 - (100 - freq1);
 8003c98:	4b52      	ldr	r3, [pc, #328]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8003ca0:	4a50      	ldr	r2, [pc, #320]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e004      	b.n	8003cb0 <branchesElevenToFourteen+0x1c8>
				freq1 = freq1 - 100;
 8003ca6:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3b64      	subs	r3, #100	; 0x64
 8003cac:	4a4d      	ldr	r2, [pc, #308]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003cae:	6013      	str	r3, [r2, #0]
			char send_string[] = "XXXXHz";
 8003cb0:	4a4d      	ldr	r2, [pc, #308]	; (8003de8 <branchesElevenToFourteen+0x300>)
 8003cb2:	f107 0320 	add.w	r3, r7, #32
 8003cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cba:	6018      	str	r0, [r3, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	8019      	strh	r1, [r3, #0]
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	0c0a      	lsrs	r2, r1, #16
 8003cc4:	701a      	strb	r2, [r3, #0]
			send_string[0] = (freq1 / 1000) + 48;
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a48      	ldr	r2, [pc, #288]	; (8003dec <branchesElevenToFourteen+0x304>)
 8003ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8003cd0:	1192      	asrs	r2, r2, #6
 8003cd2:	17db      	asrs	r3, r3, #31
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3330      	adds	r3, #48	; 0x30
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f887 3020 	strb.w	r3, [r7, #32]
			send_string[1] = ((freq1 % 1000) / 100) + 48;
 8003ce0:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b41      	ldr	r3, [pc, #260]	; (8003dec <branchesElevenToFourteen+0x304>)
 8003ce6:	fb83 1302 	smull	r1, r3, r3, r2
 8003cea:	1199      	asrs	r1, r3, #6
 8003cec:	17d3      	asrs	r3, r2, #31
 8003cee:	1acb      	subs	r3, r1, r3
 8003cf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	4a3d      	ldr	r2, [pc, #244]	; (8003df0 <branchesElevenToFourteen+0x308>)
 8003cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8003d00:	1152      	asrs	r2, r2, #5
 8003d02:	17db      	asrs	r3, r3, #31
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3330      	adds	r3, #48	; 0x30
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			send_string[2] = ((freq1 % 100) / 10) + 48;
 8003d10:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <branchesElevenToFourteen+0x308>)
 8003d16:	fb83 1302 	smull	r1, r3, r3, r2
 8003d1a:	1159      	asrs	r1, r3, #5
 8003d1c:	17d3      	asrs	r3, r2, #31
 8003d1e:	1acb      	subs	r3, r1, r3
 8003d20:	2164      	movs	r1, #100	; 0x64
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	4a32      	ldr	r2, [pc, #200]	; (8003df4 <branchesElevenToFourteen+0x30c>)
 8003d2a:	fb82 1203 	smull	r1, r2, r2, r3
 8003d2e:	1092      	asrs	r2, r2, #2
 8003d30:	17db      	asrs	r3, r3, #31
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	3330      	adds	r3, #48	; 0x30
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			send_string[3] = (freq1 % 10) + 48;
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <branchesElevenToFourteen+0x30c>)
 8003d44:	fb83 1302 	smull	r1, r3, r3, r2
 8003d48:	1099      	asrs	r1, r3, #2
 8003d4a:	17d3      	asrs	r3, r2, #31
 8003d4c:	1ac9      	subs	r1, r1, r3
 8003d4e:	460b      	mov	r3, r1
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	1ad1      	subs	r1, r2, r3
 8003d58:	b2cb      	uxtb	r3, r1
 8003d5a:	3330      	adds	r3, #48	; 0x30
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			lcd_send_string(send_string);
 8003d62:	f107 0320 	add.w	r3, r7, #32
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd fcf3 	bl	8001752 <lcd_send_string>
}
 8003d6c:	e25b      	b.n	8004226 <branchesElevenToFourteen+0x73e>
		} else if (upButtonPressed == 1) {
 8003d6e:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <branchesElevenToFourteen+0x2ec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10b      	bne.n	8003d8e <branchesElevenToFourteen+0x2a6>
			upButtonPressed = 0;
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <branchesElevenToFourteen+0x2ec>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
			output_branch_state = 11;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <branchesElevenToFourteen+0x2dc>)
 8003d7e:	220b      	movs	r2, #11
 8003d80:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <branchesElevenToFourteen+0x2e0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003d88:	f7fd fcf7 	bl	800177a <lcd_clear>
}
 8003d8c:	e24b      	b.n	8004226 <branchesElevenToFourteen+0x73e>
		} else if (rightButtonPressed == 1) {
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <branchesElevenToFourteen+0x2f0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	f040 809c 	bne.w	8003ed0 <branchesElevenToFourteen+0x3e8>
			rightButtonPressed = 0;
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <branchesElevenToFourteen+0x2f0>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
			lcd_put_cur(1, 0);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	2001      	movs	r0, #1
 8003da2:	f7fd fc7b 	bl	800169c <lcd_put_cur>
			if ((freq1 + 100 > 2200)) {
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3364      	adds	r3, #100	; 0x64
 8003dac:	f640 0298 	movw	r2, #2200	; 0x898
 8003db0:	4293      	cmp	r3, r2
 8003db2:	dd21      	ble.n	8003df8 <branchesElevenToFourteen+0x310>
				freq1 = (freq1 + 100) - 2200;
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <branchesElevenToFourteen+0x2fc>)
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e02b      	b.n	8003e1a <branchesElevenToFourteen+0x332>
 8003dc2:	bf00      	nop
 8003dc4:	20000059 	.word	0x20000059
 8003dc8:	200000fa 	.word	0x200000fa
 8003dcc:	0800c2f8 	.word	0x0800c2f8
 8003dd0:	20000234 	.word	0x20000234
 8003dd4:	20000114 	.word	0x20000114
 8003dd8:	2000122c 	.word	0x2000122c
 8003ddc:	20001230 	.word	0x20001230
 8003de0:	20000040 	.word	0x20000040
 8003de4:	200001e0 	.word	0x200001e0
 8003de8:	0800c310 	.word	0x0800c310
 8003dec:	10624dd3 	.word	0x10624dd3
 8003df0:	51eb851f 	.word	0x51eb851f
 8003df4:	66666667 	.word	0x66666667
				freq1 = freq+100;
 8003df8:	4b94      	ldr	r3, [pc, #592]	; (800404c <branchesElevenToFourteen+0x564>)
 8003dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	4b93      	ldr	r3, [pc, #588]	; (8004050 <branchesElevenToFourteen+0x568>)
 8003e04:	f7fc f9ee 	bl	80001e4 <__adddf3>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	4621      	mov	r1, r4
 8003e10:	f7fc fe38 	bl	8000a84 <__aeabi_d2iz>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b8f      	ldr	r3, [pc, #572]	; (8004054 <branchesElevenToFourteen+0x56c>)
 8003e18:	601a      	str	r2, [r3, #0]
			char send_string[] = "XXXXHz";
 8003e1a:	4a8f      	ldr	r2, [pc, #572]	; (8004058 <branchesElevenToFourteen+0x570>)
 8003e1c:	f107 0318 	add.w	r3, r7, #24
 8003e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e24:	6018      	str	r0, [r3, #0]
 8003e26:	3304      	adds	r3, #4
 8003e28:	8019      	strh	r1, [r3, #0]
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	0c0a      	lsrs	r2, r1, #16
 8003e2e:	701a      	strb	r2, [r3, #0]
			send_string[0] = (freq1 / 1000) + 48;
 8003e30:	4b88      	ldr	r3, [pc, #544]	; (8004054 <branchesElevenToFourteen+0x56c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a89      	ldr	r2, [pc, #548]	; (800405c <branchesElevenToFourteen+0x574>)
 8003e36:	fb82 1203 	smull	r1, r2, r2, r3
 8003e3a:	1192      	asrs	r2, r2, #6
 8003e3c:	17db      	asrs	r3, r3, #31
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3330      	adds	r3, #48	; 0x30
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	763b      	strb	r3, [r7, #24]
			send_string[1] = ((freq1 % 1000) / 100) + 48;
 8003e48:	4b82      	ldr	r3, [pc, #520]	; (8004054 <branchesElevenToFourteen+0x56c>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b83      	ldr	r3, [pc, #524]	; (800405c <branchesElevenToFourteen+0x574>)
 8003e4e:	fb83 1302 	smull	r1, r3, r3, r2
 8003e52:	1199      	asrs	r1, r3, #6
 8003e54:	17d3      	asrs	r3, r2, #31
 8003e56:	1acb      	subs	r3, r1, r3
 8003e58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	4a7f      	ldr	r2, [pc, #508]	; (8004060 <branchesElevenToFourteen+0x578>)
 8003e64:	fb82 1203 	smull	r1, r2, r2, r3
 8003e68:	1152      	asrs	r2, r2, #5
 8003e6a:	17db      	asrs	r3, r3, #31
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	3330      	adds	r3, #48	; 0x30
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	767b      	strb	r3, [r7, #25]
			send_string[2] = ((freq1 % 100) / 10) + 48;
 8003e76:	4b77      	ldr	r3, [pc, #476]	; (8004054 <branchesElevenToFourteen+0x56c>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b79      	ldr	r3, [pc, #484]	; (8004060 <branchesElevenToFourteen+0x578>)
 8003e7c:	fb83 1302 	smull	r1, r3, r3, r2
 8003e80:	1159      	asrs	r1, r3, #5
 8003e82:	17d3      	asrs	r3, r2, #31
 8003e84:	1acb      	subs	r3, r1, r3
 8003e86:	2164      	movs	r1, #100	; 0x64
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	4a75      	ldr	r2, [pc, #468]	; (8004064 <branchesElevenToFourteen+0x57c>)
 8003e90:	fb82 1203 	smull	r1, r2, r2, r3
 8003e94:	1092      	asrs	r2, r2, #2
 8003e96:	17db      	asrs	r3, r3, #31
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3330      	adds	r3, #48	; 0x30
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	76bb      	strb	r3, [r7, #26]
			send_string[3] = (freq1 % 10) + 48;
 8003ea2:	4b6c      	ldr	r3, [pc, #432]	; (8004054 <branchesElevenToFourteen+0x56c>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <branchesElevenToFourteen+0x57c>)
 8003ea8:	fb83 1302 	smull	r1, r3, r3, r2
 8003eac:	1099      	asrs	r1, r3, #2
 8003eae:	17d3      	asrs	r3, r2, #31
 8003eb0:	1ac9      	subs	r1, r1, r3
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	1ad1      	subs	r1, r2, r3
 8003ebc:	b2cb      	uxtb	r3, r1
 8003ebe:	3330      	adds	r3, #48	; 0x30
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	76fb      	strb	r3, [r7, #27]
			lcd_send_string(send_string);
 8003ec4:	f107 0318 	add.w	r3, r7, #24
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fd fc42 	bl	8001752 <lcd_send_string>
}
 8003ece:	e1aa      	b.n	8004226 <branchesElevenToFourteen+0x73e>
		} else if (buttonPressed == 1) {
 8003ed0:	4b65      	ldr	r3, [pc, #404]	; (8004068 <branchesElevenToFourteen+0x580>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	f040 81a6 	bne.w	8004226 <branchesElevenToFourteen+0x73e>
			buttonPressed = 0;
 8003eda:	4b63      	ldr	r3, [pc, #396]	; (8004068 <branchesElevenToFourteen+0x580>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
			frequency_DAC = freq1;
 8003ee0:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <branchesElevenToFourteen+0x56c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b61      	ldr	r3, [pc, #388]	; (800406c <branchesElevenToFourteen+0x584>)
 8003ee8:	601a      	str	r2, [r3, #0]
			lcd_put_cur(1, 8);
 8003eea:	2108      	movs	r1, #8
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7fd fbd5 	bl	800169c <lcd_put_cur>
			lcd_send_string("SET");
 8003ef2:	485f      	ldr	r0, [pc, #380]	; (8004070 <branchesElevenToFourteen+0x588>)
 8003ef4:	f7fd fc2d 	bl	8001752 <lcd_send_string>
}
 8003ef8:	e195      	b.n	8004226 <branchesElevenToFourteen+0x73e>
	else if (output_branch_state == 13)
 8003efa:	4b5e      	ldr	r3, [pc, #376]	; (8004074 <branchesElevenToFourteen+0x58c>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b0d      	cmp	r3, #13
 8003f00:	d13a      	bne.n	8003f78 <branchesElevenToFourteen+0x490>
		if (output_state_has_displayed == 0) {
 8003f02:	4b5d      	ldr	r3, [pc, #372]	; (8004078 <branchesElevenToFourteen+0x590>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d105      	bne.n	8003f16 <branchesElevenToFourteen+0x42e>
					lcd_send_string("DUTY CYCLE");
 8003f0a:	485c      	ldr	r0, [pc, #368]	; (800407c <branchesElevenToFourteen+0x594>)
 8003f0c:	f7fd fc21 	bl	8001752 <lcd_send_string>
					output_state_has_displayed = 1;
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <branchesElevenToFourteen+0x590>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
				if (downButtonPressed == 1) {
 8003f16:	4b5a      	ldr	r3, [pc, #360]	; (8004080 <branchesElevenToFourteen+0x598>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10b      	bne.n	8003f36 <branchesElevenToFourteen+0x44e>
					downButtonPressed = 0;
 8003f1e:	4b58      	ldr	r3, [pc, #352]	; (8004080 <branchesElevenToFourteen+0x598>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
					output_branch_state = 14;
 8003f24:	4b53      	ldr	r3, [pc, #332]	; (8004074 <branchesElevenToFourteen+0x58c>)
 8003f26:	220e      	movs	r2, #14
 8003f28:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 8003f2a:	4b53      	ldr	r3, [pc, #332]	; (8004078 <branchesElevenToFourteen+0x590>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8003f30:	f7fd fc23 	bl	800177a <lcd_clear>
}
 8003f34:	e177      	b.n	8004226 <branchesElevenToFourteen+0x73e>
				} else if (upButtonPressed == 1) {
 8003f36:	4b53      	ldr	r3, [pc, #332]	; (8004084 <branchesElevenToFourteen+0x59c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d10b      	bne.n	8003f56 <branchesElevenToFourteen+0x46e>
					upButtonPressed = 0;
 8003f3e:	4b51      	ldr	r3, [pc, #324]	; (8004084 <branchesElevenToFourteen+0x59c>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
					output_branch_state = 6;
 8003f44:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <branchesElevenToFourteen+0x58c>)
 8003f46:	2206      	movs	r2, #6
 8003f48:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 8003f4a:	4b4b      	ldr	r3, [pc, #300]	; (8004078 <branchesElevenToFourteen+0x590>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8003f50:	f7fd fc13 	bl	800177a <lcd_clear>
}
 8003f54:	e167      	b.n	8004226 <branchesElevenToFourteen+0x73e>
				} else if (leftButtonPressed == 1) {
 8003f56:	4b4c      	ldr	r3, [pc, #304]	; (8004088 <branchesElevenToFourteen+0x5a0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 8163 	bne.w	8004226 <branchesElevenToFourteen+0x73e>
					leftButtonPressed = 0;
 8003f60:	4b49      	ldr	r3, [pc, #292]	; (8004088 <branchesElevenToFourteen+0x5a0>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
					output_branch_state = 11;
 8003f66:	4b43      	ldr	r3, [pc, #268]	; (8004074 <branchesElevenToFourteen+0x58c>)
 8003f68:	220b      	movs	r2, #11
 8003f6a:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 8003f6c:	4b42      	ldr	r3, [pc, #264]	; (8004078 <branchesElevenToFourteen+0x590>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8003f72:	f7fd fc02 	bl	800177a <lcd_clear>
}
 8003f76:	e156      	b.n	8004226 <branchesElevenToFourteen+0x73e>
	else if (output_branch_state == 14)
 8003f78:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <branchesElevenToFourteen+0x58c>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b0e      	cmp	r3, #14
 8003f7e:	f040 8152 	bne.w	8004226 <branchesElevenToFourteen+0x73e>
		if (output_state_has_displayed == 0) {
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <branchesElevenToFourteen+0x590>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d14e      	bne.n	8004028 <branchesElevenToFourteen+0x540>
					lcd_send_string("DUTY CYCLE");
 8003f8a:	483c      	ldr	r0, [pc, #240]	; (800407c <branchesElevenToFourteen+0x594>)
 8003f8c:	f7fd fbe1 	bl	8001752 <lcd_send_string>
					lcd_put_cur(1, 0);
 8003f90:	2100      	movs	r1, #0
 8003f92:	2001      	movs	r0, #1
 8003f94:	f7fd fb82 	bl	800169c <lcd_put_cur>
					dutcyc = duty_cycle_DAC;
 8003f98:	4b3c      	ldr	r3, [pc, #240]	; (800408c <branchesElevenToFourteen+0x5a4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b3c      	ldr	r3, [pc, #240]	; (8004090 <branchesElevenToFourteen+0x5a8>)
 8003fa0:	601a      	str	r2, [r3, #0]
					char send_string[] = "XXX%";
 8003fa2:	4a3c      	ldr	r2, [pc, #240]	; (8004094 <branchesElevenToFourteen+0x5ac>)
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fac:	6018      	str	r0, [r3, #0]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	7019      	strb	r1, [r3, #0]
					send_string[0] = (dutcyc/100) + 48;
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <branchesElevenToFourteen+0x5a8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <branchesElevenToFourteen+0x578>)
 8003fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8003fbc:	1152      	asrs	r2, r2, #5
 8003fbe:	17db      	asrs	r3, r3, #31
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3330      	adds	r3, #48	; 0x30
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	743b      	strb	r3, [r7, #16]
					send_string[1] = ((dutcyc % 100)/10) + 48;
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <branchesElevenToFourteen+0x5a8>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <branchesElevenToFourteen+0x578>)
 8003fd0:	fb83 1302 	smull	r1, r3, r3, r2
 8003fd4:	1159      	asrs	r1, r3, #5
 8003fd6:	17d3      	asrs	r3, r2, #31
 8003fd8:	1acb      	subs	r3, r1, r3
 8003fda:	2164      	movs	r1, #100	; 0x64
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	4a20      	ldr	r2, [pc, #128]	; (8004064 <branchesElevenToFourteen+0x57c>)
 8003fe4:	fb82 1203 	smull	r1, r2, r2, r3
 8003fe8:	1092      	asrs	r2, r2, #2
 8003fea:	17db      	asrs	r3, r3, #31
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3330      	adds	r3, #48	; 0x30
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	747b      	strb	r3, [r7, #17]
					send_string[2] = (dutcyc % 10) + 48;
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <branchesElevenToFourteen+0x5a8>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <branchesElevenToFourteen+0x57c>)
 8003ffc:	fb83 1302 	smull	r1, r3, r3, r2
 8004000:	1099      	asrs	r1, r3, #2
 8004002:	17d3      	asrs	r3, r2, #31
 8004004:	1ac9      	subs	r1, r1, r3
 8004006:	460b      	mov	r3, r1
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	1ad1      	subs	r1, r2, r3
 8004010:	b2cb      	uxtb	r3, r1
 8004012:	3330      	adds	r3, #48	; 0x30
 8004014:	b2db      	uxtb	r3, r3
 8004016:	74bb      	strb	r3, [r7, #18]
					lcd_send_string(send_string);
 8004018:	f107 0310 	add.w	r3, r7, #16
 800401c:	4618      	mov	r0, r3
 800401e:	f7fd fb98 	bl	8001752 <lcd_send_string>
					output_state_has_displayed = 1;
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <branchesElevenToFourteen+0x590>)
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
				if (leftButtonPressed == 1) {
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <branchesElevenToFourteen+0x5a0>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d17d      	bne.n	800412c <branchesElevenToFourteen+0x644>
					leftButtonPressed = 0;
 8004030:	4b15      	ldr	r3, [pc, #84]	; (8004088 <branchesElevenToFourteen+0x5a0>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
					if ((dutcyc - 10) < 0) {
 8004036:	4b16      	ldr	r3, [pc, #88]	; (8004090 <branchesElevenToFourteen+0x5a8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3b0a      	subs	r3, #10
 800403c:	2b00      	cmp	r3, #0
 800403e:	da2b      	bge.n	8004098 <branchesElevenToFourteen+0x5b0>
						dutcyc = 100 - (10 - dutcyc);
 8004040:	4b13      	ldr	r3, [pc, #76]	; (8004090 <branchesElevenToFourteen+0x5a8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	335a      	adds	r3, #90	; 0x5a
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <branchesElevenToFourteen+0x5a8>)
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e02a      	b.n	80040a2 <branchesElevenToFourteen+0x5ba>
 800404c:	20000090 	.word	0x20000090
 8004050:	40590000 	.word	0x40590000
 8004054:	200001e0 	.word	0x200001e0
 8004058:	0800c310 	.word	0x0800c310
 800405c:	10624dd3 	.word	0x10624dd3
 8004060:	51eb851f 	.word	0x51eb851f
 8004064:	66666667 	.word	0x66666667
 8004068:	2000023c 	.word	0x2000023c
 800406c:	20000040 	.word	0x20000040
 8004070:	0800c298 	.word	0x0800c298
 8004074:	20000059 	.word	0x20000059
 8004078:	200000fa 	.word	0x200000fa
 800407c:	0800c304 	.word	0x0800c304
 8004080:	20000234 	.word	0x20000234
 8004084:	20000114 	.word	0x20000114
 8004088:	20001230 	.word	0x20001230
 800408c:	200000f4 	.word	0x200000f4
 8004090:	20000188 	.word	0x20000188
 8004094:	0800c318 	.word	0x0800c318
						dutcyc = dutcyc - 10;
 8004098:	4b65      	ldr	r3, [pc, #404]	; (8004230 <branchesElevenToFourteen+0x748>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3b0a      	subs	r3, #10
 800409e:	4a64      	ldr	r2, [pc, #400]	; (8004230 <branchesElevenToFourteen+0x748>)
 80040a0:	6013      	str	r3, [r2, #0]
					lcd_put_cur(1, 0);
 80040a2:	2100      	movs	r1, #0
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7fd faf9 	bl	800169c <lcd_put_cur>
					char send_string[] = "XXX%";
 80040aa:	4a62      	ldr	r2, [pc, #392]	; (8004234 <branchesElevenToFourteen+0x74c>)
 80040ac:	f107 0308 	add.w	r3, r7, #8
 80040b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040b4:	6018      	str	r0, [r3, #0]
 80040b6:	3304      	adds	r3, #4
 80040b8:	7019      	strb	r1, [r3, #0]
					send_string[0] = (dutcyc/100) + 48;
 80040ba:	4b5d      	ldr	r3, [pc, #372]	; (8004230 <branchesElevenToFourteen+0x748>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a5e      	ldr	r2, [pc, #376]	; (8004238 <branchesElevenToFourteen+0x750>)
 80040c0:	fb82 1203 	smull	r1, r2, r2, r3
 80040c4:	1152      	asrs	r2, r2, #5
 80040c6:	17db      	asrs	r3, r3, #31
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3330      	adds	r3, #48	; 0x30
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	723b      	strb	r3, [r7, #8]
					send_string[1] = ((dutcyc % 100)/10) + 48;
 80040d2:	4b57      	ldr	r3, [pc, #348]	; (8004230 <branchesElevenToFourteen+0x748>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b58      	ldr	r3, [pc, #352]	; (8004238 <branchesElevenToFourteen+0x750>)
 80040d8:	fb83 1302 	smull	r1, r3, r3, r2
 80040dc:	1159      	asrs	r1, r3, #5
 80040de:	17d3      	asrs	r3, r2, #31
 80040e0:	1acb      	subs	r3, r1, r3
 80040e2:	2164      	movs	r1, #100	; 0x64
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	4a54      	ldr	r2, [pc, #336]	; (800423c <branchesElevenToFourteen+0x754>)
 80040ec:	fb82 1203 	smull	r1, r2, r2, r3
 80040f0:	1092      	asrs	r2, r2, #2
 80040f2:	17db      	asrs	r3, r3, #31
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3330      	adds	r3, #48	; 0x30
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	727b      	strb	r3, [r7, #9]
					send_string[2] = (dutcyc % 10) + 48;
 80040fe:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <branchesElevenToFourteen+0x748>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b4e      	ldr	r3, [pc, #312]	; (800423c <branchesElevenToFourteen+0x754>)
 8004104:	fb83 1302 	smull	r1, r3, r3, r2
 8004108:	1099      	asrs	r1, r3, #2
 800410a:	17d3      	asrs	r3, r2, #31
 800410c:	1ac9      	subs	r1, r1, r3
 800410e:	460b      	mov	r3, r1
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	1ad1      	subs	r1, r2, r3
 8004118:	b2cb      	uxtb	r3, r1
 800411a:	3330      	adds	r3, #48	; 0x30
 800411c:	b2db      	uxtb	r3, r3
 800411e:	72bb      	strb	r3, [r7, #10]
					lcd_send_string(send_string);
 8004120:	f107 0308 	add.w	r3, r7, #8
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd fb14 	bl	8001752 <lcd_send_string>
}
 800412a:	e07c      	b.n	8004226 <branchesElevenToFourteen+0x73e>
				} else if (upButtonPressed == 1) {
 800412c:	4b44      	ldr	r3, [pc, #272]	; (8004240 <branchesElevenToFourteen+0x758>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d10b      	bne.n	800414c <branchesElevenToFourteen+0x664>
					upButtonPressed = 0;
 8004134:	4b42      	ldr	r3, [pc, #264]	; (8004240 <branchesElevenToFourteen+0x758>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
					output_branch_state = 13;
 800413a:	4b42      	ldr	r3, [pc, #264]	; (8004244 <branchesElevenToFourteen+0x75c>)
 800413c:	220d      	movs	r2, #13
 800413e:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 8004140:	4b41      	ldr	r3, [pc, #260]	; (8004248 <branchesElevenToFourteen+0x760>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8004146:	f7fd fb18 	bl	800177a <lcd_clear>
}
 800414a:	e06c      	b.n	8004226 <branchesElevenToFourteen+0x73e>
				} else if (rightButtonPressed == 1) {
 800414c:	4b3f      	ldr	r3, [pc, #252]	; (800424c <branchesElevenToFourteen+0x764>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d155      	bne.n	8004200 <branchesElevenToFourteen+0x718>
					rightButtonPressed = 0;
 8004154:	4b3d      	ldr	r3, [pc, #244]	; (800424c <branchesElevenToFourteen+0x764>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
					lcd_put_cur(1, 0);
 800415a:	2100      	movs	r1, #0
 800415c:	2001      	movs	r0, #1
 800415e:	f7fd fa9d 	bl	800169c <lcd_put_cur>
					if ((dutcyc + 10 > 100)) {
 8004162:	4b33      	ldr	r3, [pc, #204]	; (8004230 <branchesElevenToFourteen+0x748>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330a      	adds	r3, #10
 8004168:	2b64      	cmp	r3, #100	; 0x64
 800416a:	dd05      	ble.n	8004178 <branchesElevenToFourteen+0x690>
						dutcyc = (dutcyc + 10) - 100;
 800416c:	4b30      	ldr	r3, [pc, #192]	; (8004230 <branchesElevenToFourteen+0x748>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3b5a      	subs	r3, #90	; 0x5a
 8004172:	4a2f      	ldr	r2, [pc, #188]	; (8004230 <branchesElevenToFourteen+0x748>)
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e004      	b.n	8004182 <branchesElevenToFourteen+0x69a>
						dutcyc = dutcyc+10;
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <branchesElevenToFourteen+0x748>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330a      	adds	r3, #10
 800417e:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <branchesElevenToFourteen+0x748>)
 8004180:	6013      	str	r3, [r2, #0]
					char send_string[] = "XXX%";
 8004182:	4a2c      	ldr	r2, [pc, #176]	; (8004234 <branchesElevenToFourteen+0x74c>)
 8004184:	463b      	mov	r3, r7
 8004186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800418a:	6018      	str	r0, [r3, #0]
 800418c:	3304      	adds	r3, #4
 800418e:	7019      	strb	r1, [r3, #0]
					send_string[0] = (dutcyc/100) + 48;
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <branchesElevenToFourteen+0x748>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a28      	ldr	r2, [pc, #160]	; (8004238 <branchesElevenToFourteen+0x750>)
 8004196:	fb82 1203 	smull	r1, r2, r2, r3
 800419a:	1152      	asrs	r2, r2, #5
 800419c:	17db      	asrs	r3, r3, #31
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3330      	adds	r3, #48	; 0x30
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	703b      	strb	r3, [r7, #0]
					send_string[1] = ((dutcyc % 100)/10) + 48;
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <branchesElevenToFourteen+0x748>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b22      	ldr	r3, [pc, #136]	; (8004238 <branchesElevenToFourteen+0x750>)
 80041ae:	fb83 1302 	smull	r1, r3, r3, r2
 80041b2:	1159      	asrs	r1, r3, #5
 80041b4:	17d3      	asrs	r3, r2, #31
 80041b6:	1acb      	subs	r3, r1, r3
 80041b8:	2164      	movs	r1, #100	; 0x64
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	4a1e      	ldr	r2, [pc, #120]	; (800423c <branchesElevenToFourteen+0x754>)
 80041c2:	fb82 1203 	smull	r1, r2, r2, r3
 80041c6:	1092      	asrs	r2, r2, #2
 80041c8:	17db      	asrs	r3, r3, #31
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	3330      	adds	r3, #48	; 0x30
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	707b      	strb	r3, [r7, #1]
					send_string[2] = (dutcyc % 10) + 48;
 80041d4:	4b16      	ldr	r3, [pc, #88]	; (8004230 <branchesElevenToFourteen+0x748>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <branchesElevenToFourteen+0x754>)
 80041da:	fb83 1302 	smull	r1, r3, r3, r2
 80041de:	1099      	asrs	r1, r3, #2
 80041e0:	17d3      	asrs	r3, r2, #31
 80041e2:	1ac9      	subs	r1, r1, r3
 80041e4:	460b      	mov	r3, r1
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	1ad1      	subs	r1, r2, r3
 80041ee:	b2cb      	uxtb	r3, r1
 80041f0:	3330      	adds	r3, #48	; 0x30
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	70bb      	strb	r3, [r7, #2]
					lcd_send_string(send_string);
 80041f6:	463b      	mov	r3, r7
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fd faaa 	bl	8001752 <lcd_send_string>
}
 80041fe:	e012      	b.n	8004226 <branchesElevenToFourteen+0x73e>
				} else if (buttonPressed == 1) {
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <branchesElevenToFourteen+0x768>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10e      	bne.n	8004226 <branchesElevenToFourteen+0x73e>
					buttonPressed = 0;
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <branchesElevenToFourteen+0x768>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
					duty_cycle_DAC = dutcyc;
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <branchesElevenToFourteen+0x748>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <branchesElevenToFourteen+0x76c>)
 8004216:	601a      	str	r2, [r3, #0]
					lcd_put_cur(6, 0);
 8004218:	2100      	movs	r1, #0
 800421a:	2006      	movs	r0, #6
 800421c:	f7fd fa3e 	bl	800169c <lcd_put_cur>
					lcd_send_string("SET");
 8004220:	480d      	ldr	r0, [pc, #52]	; (8004258 <branchesElevenToFourteen+0x770>)
 8004222:	f7fd fa96 	bl	8001752 <lcd_send_string>
}
 8004226:	bf00      	nop
 8004228:	3734      	adds	r7, #52	; 0x34
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}
 800422e:	bf00      	nop
 8004230:	20000188 	.word	0x20000188
 8004234:	0800c318 	.word	0x0800c318
 8004238:	51eb851f 	.word	0x51eb851f
 800423c:	66666667 	.word	0x66666667
 8004240:	20000114 	.word	0x20000114
 8004244:	20000059 	.word	0x20000059
 8004248:	200000fa 	.word	0x200000fa
 800424c:	2000122c 	.word	0x2000122c
 8004250:	2000023c 	.word	0x2000023c
 8004254:	200000f4 	.word	0x200000f4
 8004258:	0800c298 	.word	0x0800c298

0800425c <branchesFifteenToSeventeen>:

void branchesFifteenToSeventeen()
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
	if (output_branch_state == 15)
 8004260:	4b6d      	ldr	r3, [pc, #436]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b0f      	cmp	r3, #15
 8004266:	d13a      	bne.n	80042de <branchesFifteenToSeventeen+0x82>
	{
		if (output_state_has_displayed == 0) {
 8004268:	4b6c      	ldr	r3, [pc, #432]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <branchesFifteenToSeventeen+0x20>
					lcd_send_string("OUTPUT");
 8004270:	486b      	ldr	r0, [pc, #428]	; (8004420 <branchesFifteenToSeventeen+0x1c4>)
 8004272:	f7fd fa6e 	bl	8001752 <lcd_send_string>
					output_state_has_displayed = 1;
 8004276:	4b69      	ldr	r3, [pc, #420]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
				}
				if (downButtonPressed == 1) {
 800427c:	4b69      	ldr	r3, [pc, #420]	; (8004424 <branchesFifteenToSeventeen+0x1c8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d10b      	bne.n	800429c <branchesFifteenToSeventeen+0x40>
					downButtonPressed = 0;
 8004284:	4b67      	ldr	r3, [pc, #412]	; (8004424 <branchesFifteenToSeventeen+0x1c8>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
					output_branch_state = 16;
 800428a:	4b63      	ldr	r3, [pc, #396]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 800428c:	2210      	movs	r2, #16
 800428e:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 8004290:	4b62      	ldr	r3, [pc, #392]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8004296:	f7fd fa70 	bl	800177a <lcd_clear>
					output_state_has_displayed = 0;
					output_LED_has_displayed = 0;
					lcd_clear();
				}
	}
}
 800429a:	e0ba      	b.n	8004412 <branchesFifteenToSeventeen+0x1b6>
				} else if (leftButtonPressed == 1) {
 800429c:	4b62      	ldr	r3, [pc, #392]	; (8004428 <branchesFifteenToSeventeen+0x1cc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d10b      	bne.n	80042bc <branchesFifteenToSeventeen+0x60>
					leftButtonPressed = 0;
 80042a4:	4b60      	ldr	r3, [pc, #384]	; (8004428 <branchesFifteenToSeventeen+0x1cc>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
					output_branch_state = 6;
 80042aa:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 80042ac:	2206      	movs	r2, #6
 80042ae:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 80042b0:	4b5a      	ldr	r3, [pc, #360]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80042b6:	f7fd fa60 	bl	800177a <lcd_clear>
}
 80042ba:	e0aa      	b.n	8004412 <branchesFifteenToSeventeen+0x1b6>
				} else if (upButtonPressed == 1) {
 80042bc:	4b5b      	ldr	r3, [pc, #364]	; (800442c <branchesFifteenToSeventeen+0x1d0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 80a6 	bne.w	8004412 <branchesFifteenToSeventeen+0x1b6>
					upButtonPressed = 0;
 80042c6:	4b59      	ldr	r3, [pc, #356]	; (800442c <branchesFifteenToSeventeen+0x1d0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
					output_branch_state = 1;
 80042cc:	4b52      	ldr	r3, [pc, #328]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 80042d2:	4b52      	ldr	r3, [pc, #328]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80042d8:	f7fd fa4f 	bl	800177a <lcd_clear>
}
 80042dc:	e099      	b.n	8004412 <branchesFifteenToSeventeen+0x1b6>
	else if (output_branch_state == 16)
 80042de:	4b4e      	ldr	r3, [pc, #312]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d14a      	bne.n	800437c <branchesFifteenToSeventeen+0x120>
		if (output_state_has_displayed == 0) {
 80042e6:	4b4d      	ldr	r3, [pc, #308]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d113      	bne.n	8004316 <branchesFifteenToSeventeen+0xba>
			lcd_send_string("OUTPUT ON");
 80042ee:	4850      	ldr	r0, [pc, #320]	; (8004430 <branchesFifteenToSeventeen+0x1d4>)
 80042f0:	f7fd fa2f 	bl	8001752 <lcd_send_string>
			if (outputState == 1)
 80042f4:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <branchesFifteenToSeventeen+0x1d8>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d109      	bne.n	8004310 <branchesFifteenToSeventeen+0xb4>
				stopDMA = 0;
 80042fc:	4b4e      	ldr	r3, [pc, #312]	; (8004438 <branchesFifteenToSeventeen+0x1dc>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
				lcd_put_cur(1, 0);
 8004302:	2100      	movs	r1, #0
 8004304:	2001      	movs	r0, #1
 8004306:	f7fd f9c9 	bl	800169c <lcd_put_cur>
				lcd_send_string("SET");
 800430a:	484c      	ldr	r0, [pc, #304]	; (800443c <branchesFifteenToSeventeen+0x1e0>)
 800430c:	f7fd fa21 	bl	8001752 <lcd_send_string>
			output_state_has_displayed = 1;
 8004310:	4b42      	ldr	r3, [pc, #264]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
		if (rightButtonPressed == 1) {
 8004316:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <branchesFifteenToSeventeen+0x1e4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10b      	bne.n	8004336 <branchesFifteenToSeventeen+0xda>
			rightButtonPressed = 0;
 800431e:	4b48      	ldr	r3, [pc, #288]	; (8004440 <branchesFifteenToSeventeen+0x1e4>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
			output_branch_state = 17;
 8004324:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 8004326:	2211      	movs	r2, #17
 8004328:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 800432a:	4b3c      	ldr	r3, [pc, #240]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8004330:	f7fd fa23 	bl	800177a <lcd_clear>
}
 8004334:	e06d      	b.n	8004412 <branchesFifteenToSeventeen+0x1b6>
		} else if (upButtonPressed == 1) {
 8004336:	4b3d      	ldr	r3, [pc, #244]	; (800442c <branchesFifteenToSeventeen+0x1d0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10b      	bne.n	8004356 <branchesFifteenToSeventeen+0xfa>
			upButtonPressed = 0;
 800433e:	4b3b      	ldr	r3, [pc, #236]	; (800442c <branchesFifteenToSeventeen+0x1d0>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
			output_branch_state = 15;
 8004344:	4b34      	ldr	r3, [pc, #208]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 8004346:	220f      	movs	r2, #15
 8004348:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 800434a:	4b34      	ldr	r3, [pc, #208]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8004350:	f7fd fa13 	bl	800177a <lcd_clear>
}
 8004354:	e05d      	b.n	8004412 <branchesFifteenToSeventeen+0x1b6>
		} else if (buttonPressed == 1) {
 8004356:	4b3b      	ldr	r3, [pc, #236]	; (8004444 <branchesFifteenToSeventeen+0x1e8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d159      	bne.n	8004412 <branchesFifteenToSeventeen+0x1b6>
			buttonPressed = 0;
 800435e:	4b39      	ldr	r3, [pc, #228]	; (8004444 <branchesFifteenToSeventeen+0x1e8>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
			outputState = 1;
 8004364:	4b33      	ldr	r3, [pc, #204]	; (8004434 <branchesFifteenToSeventeen+0x1d8>)
 8004366:	2201      	movs	r2, #1
 8004368:	701a      	strb	r2, [r3, #0]
			stopDMA = 0;
 800436a:	4b33      	ldr	r3, [pc, #204]	; (8004438 <branchesFifteenToSeventeen+0x1dc>)
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
			output_state_has_displayed = 0;
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8004376:	f7fd fa00 	bl	800177a <lcd_clear>
}
 800437a:	e04a      	b.n	8004412 <branchesFifteenToSeventeen+0x1b6>
	else if (output_branch_state == 17)
 800437c:	4b26      	ldr	r3, [pc, #152]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b11      	cmp	r3, #17
 8004382:	d146      	bne.n	8004412 <branchesFifteenToSeventeen+0x1b6>
		if (output_state_has_displayed == 0) {
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d110      	bne.n	80043ae <branchesFifteenToSeventeen+0x152>
					lcd_send_string("OUTPUT OFF");
 800438c:	482e      	ldr	r0, [pc, #184]	; (8004448 <branchesFifteenToSeventeen+0x1ec>)
 800438e:	f7fd f9e0 	bl	8001752 <lcd_send_string>
					if (outputState == 0)
 8004392:	4b28      	ldr	r3, [pc, #160]	; (8004434 <branchesFifteenToSeventeen+0x1d8>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <branchesFifteenToSeventeen+0x14c>
						lcd_put_cur(1,0);
 800439a:	2100      	movs	r1, #0
 800439c:	2001      	movs	r0, #1
 800439e:	f7fd f97d 	bl	800169c <lcd_put_cur>
						lcd_send_string("SET");
 80043a2:	4826      	ldr	r0, [pc, #152]	; (800443c <branchesFifteenToSeventeen+0x1e0>)
 80043a4:	f7fd f9d5 	bl	8001752 <lcd_send_string>
					output_state_has_displayed = 1;
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
				if (leftButtonPressed == 1) {
 80043ae:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <branchesFifteenToSeventeen+0x1cc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d10b      	bne.n	80043ce <branchesFifteenToSeventeen+0x172>
					leftButtonPressed = 0;
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <branchesFifteenToSeventeen+0x1cc>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
					output_branch_state = 16;
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 80043be:	2210      	movs	r2, #16
 80043c0:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80043c8:	f7fd f9d7 	bl	800177a <lcd_clear>
}
 80043cc:	e021      	b.n	8004412 <branchesFifteenToSeventeen+0x1b6>
				} else if (upButtonPressed == 1) {
 80043ce:	4b17      	ldr	r3, [pc, #92]	; (800442c <branchesFifteenToSeventeen+0x1d0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10b      	bne.n	80043ee <branchesFifteenToSeventeen+0x192>
					upButtonPressed = 0;
 80043d6:	4b15      	ldr	r3, [pc, #84]	; (800442c <branchesFifteenToSeventeen+0x1d0>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
					output_branch_state = 15;
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <branchesFifteenToSeventeen+0x1bc>)
 80043de:	220f      	movs	r2, #15
 80043e0:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 80043e2:	4b0e      	ldr	r3, [pc, #56]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 80043e8:	f7fd f9c7 	bl	800177a <lcd_clear>
}
 80043ec:	e011      	b.n	8004412 <branchesFifteenToSeventeen+0x1b6>
				} else if (buttonPressed == 1) {
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <branchesFifteenToSeventeen+0x1e8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10d      	bne.n	8004412 <branchesFifteenToSeventeen+0x1b6>
					buttonPressed = 0;
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <branchesFifteenToSeventeen+0x1e8>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
					outputState = 0;
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <branchesFifteenToSeventeen+0x1d8>)
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
					output_state_has_displayed = 0;
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <branchesFifteenToSeventeen+0x1c0>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
					output_LED_has_displayed = 0;
 8004408:	4b10      	ldr	r3, [pc, #64]	; (800444c <branchesFifteenToSeventeen+0x1f0>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 800440e:	f7fd f9b4 	bl	800177a <lcd_clear>
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000059 	.word	0x20000059
 800441c:	200000fa 	.word	0x200000fa
 8004420:	0800c320 	.word	0x0800c320
 8004424:	20000234 	.word	0x20000234
 8004428:	20001230 	.word	0x20001230
 800442c:	20000114 	.word	0x20000114
 8004430:	0800c328 	.word	0x0800c328
 8004434:	20000012 	.word	0x20000012
 8004438:	200000f2 	.word	0x200000f2
 800443c:	0800c298 	.word	0x0800c298
 8004440:	2000122c 	.word	0x2000122c
 8004444:	2000023c 	.word	0x2000023c
 8004448:	0800c204 	.word	0x0800c204
 800444c:	200000fc 	.word	0x200000fc

08004450 <executeOutputState>:

void executeOutputState()
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
	branchesOneToSix();
 8004454:	f7fe fd26 	bl	8002ea4 <branchesOneToSix>
	branchesSevenToTen();
 8004458:	f7fe ff14 	bl	8003284 <branchesSevenToTen>
	branchesElevenToFourteen();
 800445c:	f7ff fb44 	bl	8003ae8 <branchesElevenToFourteen>
	branchesFifteenToSeventeen();
 8004460:	f7ff fefc 	bl	800425c <branchesFifteenToSeventeen>
}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}

08004468 <executeDisplayAndButtons>:

void executeDisplayAndButtons()
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
	if (display_state == 1) {
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <executeDisplayAndButtons+0x74>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d114      	bne.n	800449e <executeDisplayAndButtons+0x36>
		if (systemState == 1) {
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <executeDisplayAndButtons+0x78>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d102      	bne.n	8004482 <executeDisplayAndButtons+0x1a>
				executeStartMessage();
 800447c:	f7fe fbb8 	bl	8002bf0 <executeStartMessage>
 8004480:	e013      	b.n	80044aa <executeDisplayAndButtons+0x42>
		} else if (systemState == 2) {
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <executeDisplayAndButtons+0x78>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d102      	bne.n	8004490 <executeDisplayAndButtons+0x28>
				executeMeasurementState();
 800448a:	f7fe fc03 	bl	8002c94 <executeMeasurementState>
 800448e:	e00c      	b.n	80044aa <executeDisplayAndButtons+0x42>
		} else if (systemState == 3) {
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <executeDisplayAndButtons+0x78>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d108      	bne.n	80044aa <executeDisplayAndButtons+0x42>
				executeOutputState();
 8004498:	f7ff ffda 	bl	8004450 <executeOutputState>
 800449c:	e005      	b.n	80044aa <executeDisplayAndButtons+0x42>
		}
	} else if (display_state == 2) {
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <executeDisplayAndButtons+0x74>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d101      	bne.n	80044aa <executeDisplayAndButtons+0x42>
			executeMeasurementOutput();
 80044a6:	f7fd fe71 	bl	800218c <executeMeasurementOutput>
		}
	if (outputState == 1)
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <executeDisplayAndButtons+0x7c>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10c      	bne.n	80044cc <executeDisplayAndButtons+0x64>
	{
		if (output_LED_has_displayed == 0)
 80044b2:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <executeDisplayAndButtons+0x80>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10d      	bne.n	80044d6 <executeDisplayAndButtons+0x6e>
		{
			output_LED_has_displayed = 1;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <executeDisplayAndButtons+0x80>)
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80044c0:	2201      	movs	r2, #1
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	4809      	ldr	r0, [pc, #36]	; (80044ec <executeDisplayAndButtons+0x84>)
 80044c6:	f002 ff15 	bl	80072f4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
	}
}
 80044ca:	e004      	b.n	80044d6 <executeDisplayAndButtons+0x6e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80044cc:	2200      	movs	r2, #0
 80044ce:	2180      	movs	r1, #128	; 0x80
 80044d0:	4806      	ldr	r0, [pc, #24]	; (80044ec <executeDisplayAndButtons+0x84>)
 80044d2:	f002 ff0f 	bl	80072f4 <HAL_GPIO_WritePin>
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000051 	.word	0x20000051
 80044e0:	20000038 	.word	0x20000038
 80044e4:	20000012 	.word	0x20000012
 80044e8:	200000fc 	.word	0x200000fc
 80044ec:	48000800 	.word	0x48000800

080044f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ADC_trigger = 0;
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <main+0x94>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
	buttonPressed = 0;
 80044fa:	4b23      	ldr	r3, [pc, #140]	; (8004588 <main+0x98>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
	systemState = 1;
 8004500:	4b22      	ldr	r3, [pc, #136]	; (800458c <main+0x9c>)
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004506:	f000 fddf 	bl	80050c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800450a:	f000 f84f 	bl	80045ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800450e:	f000 fabf 	bl	8004a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8004512:	f000 fa9f 	bl	8004a54 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004516:	f000 fa6d 	bl	80049f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800451a:	f000 f8b1 	bl	8004680 <MX_ADC1_Init>
  MX_DAC1_Init();
 800451e:	f000 f91f 	bl	8004760 <MX_DAC1_Init>
  MX_TIM2_Init();
 8004522:	f000 f9a3 	bl	800486c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004526:	f000 fa17 	bl	8004958 <MX_TIM3_Init>
  MX_TIM1_Init();
 800452a:	f000 f94b 	bl	80047c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Transmit(&huart2, sn, 13, 50);
 800452e:	2332      	movs	r3, #50	; 0x32
 8004530:	220d      	movs	r2, #13
 8004532:	4917      	ldr	r1, [pc, #92]	; (8004590 <main+0xa0>)
 8004534:	4817      	ldr	r0, [pc, #92]	; (8004594 <main+0xa4>)
 8004536:	f005 fbf7 	bl	8009d28 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx, 1);
 800453a:	2201      	movs	r2, #1
 800453c:	4916      	ldr	r1, [pc, #88]	; (8004598 <main+0xa8>)
 800453e:	4815      	ldr	r0, [pc, #84]	; (8004594 <main+0xa4>)
 8004540:	f005 fc86 	bl	8009e50 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8004544:	2201      	movs	r2, #1
 8004546:	2120      	movs	r1, #32
 8004548:	4814      	ldr	r0, [pc, #80]	; (800459c <main+0xac>)
 800454a:	f002 fed3 	bl	80072f4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 800454e:	4814      	ldr	r0, [pc, #80]	; (80045a0 <main+0xb0>)
 8004550:	f004 fb2a 	bl	8008ba8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim1);
 8004554:	4813      	ldr	r0, [pc, #76]	; (80045a4 <main+0xb4>)
 8004556:	f004 fabf 	bl	8008ad8 <HAL_TIM_Base_Start>
	lcd_init();
 800455a:	f7fd f8bd 	bl	80016d8 <lcd_init>
	lcd_send_cmd(0x28);
 800455e:	2028      	movs	r0, #40	; 0x28
 8004560:	f7fd f868 	bl	8001634 <lcd_send_cmd>
	  	 //Menu and state execution



		//Commands received from TS
			if (receiveCommand == 1) {
 8004564:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <main+0xb8>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <main+0x8a>
		 receiveCommand = 0;
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <main+0xb8>)
 800456e:	2200      	movs	r2, #0
 8004570:	701a      	strb	r2, [r3, #0]
		 determineCommandType();
 8004572:	f7fc fd49 	bl	8001008 <determineCommandType>
		 executeCommand();
 8004576:	f7fd fcc9 	bl	8001f0c <executeCommand>
		 }

			executeDisplayAndButtons();
 800457a:	f7ff ff75 	bl	8004468 <executeDisplayAndButtons>

		//receive and measure the input signal and then store the value measured in the correct variables
		// Output a signal based on certain parameters if output state is on.
		measure_ADC_output_DAC();
 800457e:	f7fd fde1 	bl	8002144 <measure_ADC_output_DAC>
			if (receiveCommand == 1) {
 8004582:	e7ef      	b.n	8004564 <main+0x74>
 8004584:	20001308 	.word	0x20001308
 8004588:	2000023c 	.word	0x2000023c
 800458c:	20000038 	.word	0x20000038
 8004590:	20000000 	.word	0x20000000
 8004594:	20001280 	.word	0x20001280
 8004598:	20000190 	.word	0x20000190
 800459c:	48000400 	.word	0x48000400
 80045a0:	20001234 	.word	0x20001234
 80045a4:	200011e0 	.word	0x200011e0
 80045a8:	20000084 	.word	0x20000084

080045ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b0a6      	sub	sp, #152	; 0x98
 80045b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045b6:	2228      	movs	r2, #40	; 0x28
 80045b8:	2100      	movs	r1, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f006 fdf4 	bl	800b1a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	2258      	movs	r2, #88	; 0x58
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f006 fde6 	bl	800b1a8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80045dc:	2302      	movs	r3, #2
 80045de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045e0:	2301      	movs	r3, #1
 80045e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045e4:	2310      	movs	r3, #16
 80045e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045ea:	2302      	movs	r3, #2
 80045ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80045f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80045fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004600:	2300      	movs	r3, #0
 8004602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004606:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800460a:	4618      	mov	r0, r3
 800460c:	f002 fea2 	bl	8007354 <HAL_RCC_OscConfig>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004616:	f000 fb0b 	bl	8004c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800461a:	230f      	movs	r3, #15
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800461e:	2302      	movs	r3, #2
 8004620:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004622:	2300      	movs	r3, #0
 8004624:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800462c:	2300      	movs	r3, #0
 800462e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004630:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f003 fda2 	bl	8008180 <HAL_RCC_ClockConfig>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004642:	f000 faf5 	bl	8004c30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <SystemClock_Config+0xd0>)
 8004648:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800464e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8004654:	2300      	movs	r3, #0
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8004658:	2300      	movs	r3, #0
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800465c:	2300      	movs	r3, #0
 800465e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f003 ffc2 	bl	80085ec <HAL_RCCEx_PeriphCLKConfig>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800466e:	f000 fadf 	bl	8004c30 <Error_Handler>
  }
}
 8004672:	bf00      	nop
 8004674:	3798      	adds	r7, #152	; 0x98
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	00301082 	.word	0x00301082

08004680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	; 0x28
 8004684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004686:	f107 031c 	add.w	r3, r7, #28
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	611a      	str	r2, [r3, #16]
 80046a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80046a2:	4b2e      	ldr	r3, [pc, #184]	; (800475c <MX_ADC1_Init+0xdc>)
 80046a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80046a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80046aa:	4b2c      	ldr	r3, [pc, #176]	; (800475c <MX_ADC1_Init+0xdc>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046b0:	4b2a      	ldr	r3, [pc, #168]	; (800475c <MX_ADC1_Init+0xdc>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80046b6:	4b29      	ldr	r3, [pc, #164]	; (800475c <MX_ADC1_Init+0xdc>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <MX_ADC1_Init+0xdc>)
 80046be:	2200      	movs	r2, #0
 80046c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <MX_ADC1_Init+0xdc>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <MX_ADC1_Init+0xdc>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046d0:	4b22      	ldr	r3, [pc, #136]	; (800475c <MX_ADC1_Init+0xdc>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046d6:	4b21      	ldr	r3, [pc, #132]	; (800475c <MX_ADC1_Init+0xdc>)
 80046d8:	2200      	movs	r2, #0
 80046da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80046dc:	4b1f      	ldr	r3, [pc, #124]	; (800475c <MX_ADC1_Init+0xdc>)
 80046de:	2201      	movs	r2, #1
 80046e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <MX_ADC1_Init+0xdc>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046ea:	4b1c      	ldr	r3, [pc, #112]	; (800475c <MX_ADC1_Init+0xdc>)
 80046ec:	2204      	movs	r2, #4
 80046ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <MX_ADC1_Init+0xdc>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80046f6:	4b19      	ldr	r3, [pc, #100]	; (800475c <MX_ADC1_Init+0xdc>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046fc:	4817      	ldr	r0, [pc, #92]	; (800475c <MX_ADC1_Init+0xdc>)
 80046fe:	f000 fd6b 	bl	80051d8 <HAL_ADC_Init>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8004708:	f000 fa92 	bl	8004c30 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004710:	f107 031c 	add.w	r3, r7, #28
 8004714:	4619      	mov	r1, r3
 8004716:	4811      	ldr	r0, [pc, #68]	; (800475c <MX_ADC1_Init+0xdc>)
 8004718:	f001 fca0 	bl	800605c <HAL_ADCEx_MultiModeConfigChannel>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8004722:	f000 fa85 	bl	8004c30 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004726:	2301      	movs	r3, #1
 8004728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800472a:	2301      	movs	r3, #1
 800472c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4806      	ldr	r0, [pc, #24]	; (800475c <MX_ADC1_Init+0xdc>)
 8004744:	f001 f99e 	bl	8005a84 <HAL_ADC_ConfigChannel>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800474e:	f000 fa6f 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004752:	bf00      	nop
 8004754:	3728      	adds	r7, #40	; 0x28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	200001e4 	.word	0x200001e4

08004760 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004766:	1d3b      	adds	r3, r7, #4
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8004770:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <MX_DAC1_Init+0x58>)
 8004772:	4a12      	ldr	r2, [pc, #72]	; (80047bc <MX_DAC1_Init+0x5c>)
 8004774:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004776:	4810      	ldr	r0, [pc, #64]	; (80047b8 <MX_DAC1_Init+0x58>)
 8004778:	f001 fff1 	bl	800675e <HAL_DAC_Init>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8004782:	f000 fa55 	bl	8004c30 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8004786:	230c      	movs	r3, #12
 8004788:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	2200      	movs	r2, #0
 8004792:	4619      	mov	r1, r3
 8004794:	4808      	ldr	r0, [pc, #32]	; (80047b8 <MX_DAC1_Init+0x58>)
 8004796:	f002 f921 	bl	80069dc <HAL_DAC_ConfigChannel>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80047a0:	f000 fa46 	bl	8004c30 <Error_Handler>
  }
  __HAL_REMAPTRIGGER_ENABLE(HAL_REMAPTRIGGER_DAC1_TRIG);
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <MX_DAC1_Init+0x60>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <MX_DAC1_Init+0x60>)
 80047aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	2000011c 	.word	0x2000011c
 80047bc:	40007400 	.word	0x40007400
 80047c0:	40010000 	.word	0x40010000

080047c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047ca:	f107 0310 	add.w	r3, r7, #16
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	609a      	str	r2, [r3, #8]
 80047d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047d8:	1d3b      	adds	r3, r7, #4
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	605a      	str	r2, [r3, #4]
 80047e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <MX_TIM1_Init+0xa0>)
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <MX_TIM1_Init+0xa4>)
 80047e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <MX_TIM1_Init+0xa0>)
 80047ea:	2247      	movs	r2, #71	; 0x47
 80047ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ee:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <MX_TIM1_Init+0xa0>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <MX_TIM1_Init+0xa0>)
 80047f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <MX_TIM1_Init+0xa0>)
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004802:	4b18      	ldr	r3, [pc, #96]	; (8004864 <MX_TIM1_Init+0xa0>)
 8004804:	2200      	movs	r2, #0
 8004806:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004808:	4b16      	ldr	r3, [pc, #88]	; (8004864 <MX_TIM1_Init+0xa0>)
 800480a:	2200      	movs	r2, #0
 800480c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800480e:	4815      	ldr	r0, [pc, #84]	; (8004864 <MX_TIM1_Init+0xa0>)
 8004810:	f004 f90a 	bl	8008a28 <HAL_TIM_Base_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800481a:	f000 fa09 	bl	8004c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800481e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	4619      	mov	r1, r3
 800482a:	480e      	ldr	r0, [pc, #56]	; (8004864 <MX_TIM1_Init+0xa0>)
 800482c:	f004 fc56 	bl	80090dc <HAL_TIM_ConfigClockSource>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004836:	f000 f9fb 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4806      	ldr	r0, [pc, #24]	; (8004864 <MX_TIM1_Init+0xa0>)
 800484c:	f005 f974 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004856:	f000 f9eb 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800485a:	bf00      	nop
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200011e0 	.word	0x200011e0
 8004868:	40012c00 	.word	0x40012c00

0800486c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08e      	sub	sp, #56	; 0x38
 8004870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	605a      	str	r2, [r3, #4]
 800487c:	609a      	str	r2, [r3, #8]
 800487e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004880:	f107 031c 	add.w	r3, r7, #28
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800488c:	463b      	mov	r3, r7
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	609a      	str	r2, [r3, #8]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	615a      	str	r2, [r3, #20]
 800489c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800489e:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048a8:	2247      	movs	r2, #71	; 0x47
 80048aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ac:	4b29      	ldr	r3, [pc, #164]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80048b2:	4b28      	ldr	r3, [pc, #160]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048b4:	2263      	movs	r2, #99	; 0x63
 80048b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b8:	4b26      	ldr	r3, [pc, #152]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048be:	4b25      	ldr	r3, [pc, #148]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80048c4:	4823      	ldr	r0, [pc, #140]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048c6:	f004 f8af 	bl	8008a28 <HAL_TIM_Base_Init>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80048d0:	f000 f9ae 	bl	8004c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048de:	4619      	mov	r1, r3
 80048e0:	481c      	ldr	r0, [pc, #112]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048e2:	f004 fbfb 	bl	80090dc <HAL_TIM_ConfigClockSource>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80048ec:	f000 f9a0 	bl	8004c30 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80048f0:	4818      	ldr	r0, [pc, #96]	; (8004954 <MX_TIM2_Init+0xe8>)
 80048f2:	f004 f9f8 	bl	8008ce6 <HAL_TIM_OC_Init>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80048fc:	f000 f998 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004908:	f107 031c 	add.w	r3, r7, #28
 800490c:	4619      	mov	r1, r3
 800490e:	4811      	ldr	r0, [pc, #68]	; (8004954 <MX_TIM2_Init+0xe8>)
 8004910:	f005 f912 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800491a:	f000 f989 	bl	8004c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800491e:	2300      	movs	r3, #0
 8004920:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800492e:	463b      	mov	r3, r7
 8004930:	2200      	movs	r2, #0
 8004932:	4619      	mov	r1, r3
 8004934:	4807      	ldr	r0, [pc, #28]	; (8004954 <MX_TIM2_Init+0xe8>)
 8004936:	f004 fb57 	bl	8008fe8 <HAL_TIM_OC_ConfigChannel>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004940:	f000 f976 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004944:	4803      	ldr	r0, [pc, #12]	; (8004954 <MX_TIM2_Init+0xe8>)
 8004946:	f000 fa99 	bl	8004e7c <HAL_TIM_MspPostInit>

}
 800494a:	bf00      	nop
 800494c:	3738      	adds	r7, #56	; 0x38
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20001234 	.word	0x20001234

08004958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800495e:	f107 0310 	add.w	r3, r7, #16
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800496c:	1d3b      	adds	r3, r7, #4
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
 8004974:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <MX_TIM3_Init+0x94>)
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <MX_TIM3_Init+0x98>)
 800497a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <MX_TIM3_Init+0x94>)
 800497e:	2247      	movs	r2, #71	; 0x47
 8004980:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <MX_TIM3_Init+0x94>)
 8004984:	2200      	movs	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8004988:	4b18      	ldr	r3, [pc, #96]	; (80049ec <MX_TIM3_Init+0x94>)
 800498a:	2209      	movs	r2, #9
 800498c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800498e:	4b17      	ldr	r3, [pc, #92]	; (80049ec <MX_TIM3_Init+0x94>)
 8004990:	2200      	movs	r2, #0
 8004992:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004994:	4b15      	ldr	r3, [pc, #84]	; (80049ec <MX_TIM3_Init+0x94>)
 8004996:	2200      	movs	r2, #0
 8004998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800499a:	4814      	ldr	r0, [pc, #80]	; (80049ec <MX_TIM3_Init+0x94>)
 800499c:	f004 f844 	bl	8008a28 <HAL_TIM_Base_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80049a6:	f000 f943 	bl	8004c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	4619      	mov	r1, r3
 80049b6:	480d      	ldr	r0, [pc, #52]	; (80049ec <MX_TIM3_Init+0x94>)
 80049b8:	f004 fb90 	bl	80090dc <HAL_TIM_ConfigClockSource>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80049c2:	f000 f935 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80049c6:	2320      	movs	r3, #32
 80049c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4806      	ldr	r0, [pc, #24]	; (80049ec <MX_TIM3_Init+0x94>)
 80049d4:	f005 f8b0 	bl	8009b38 <HAL_TIMEx_MasterConfigSynchronization>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80049de:	f000 f927 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80049e2:	bf00      	nop
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000194 	.word	0x20000194
 80049f0:	40000400 	.word	0x40000400

080049f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049f8:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 80049fa:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <MX_USART2_UART_Init+0x5c>)
 80049fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a12:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a1a:	220c      	movs	r2, #12
 8004a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a36:	4805      	ldr	r0, [pc, #20]	; (8004a4c <MX_USART2_UART_Init+0x58>)
 8004a38:	f005 f928 	bl	8009c8c <HAL_UART_Init>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004a42:	f000 f8f5 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20001280 	.word	0x20001280
 8004a50:	40004400 	.word	0x40004400

08004a54 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <MX_DMA_Init+0x38>)
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <MX_DMA_Init+0x38>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6153      	str	r3, [r2, #20]
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <MX_DMA_Init+0x38>)
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004a72:	2200      	movs	r2, #0
 8004a74:	2100      	movs	r1, #0
 8004a76:	200d      	movs	r0, #13
 8004a78:	f001 fe3b 	bl	80066f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004a7c:	200d      	movs	r0, #13
 8004a7e:	f001 fe54 	bl	800672a <HAL_NVIC_EnableIRQ>

}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a96:	f107 0314 	add.w	r3, r7, #20
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aa6:	4b5f      	ldr	r3, [pc, #380]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	4a5e      	ldr	r2, [pc, #376]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ab0:	6153      	str	r3, [r2, #20]
 8004ab2:	4b5c      	ldr	r3, [pc, #368]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004abe:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ac8:	6153      	str	r3, [r2, #20]
 8004aca:	4b56      	ldr	r3, [pc, #344]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ad6:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4a52      	ldr	r2, [pc, #328]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae0:	6153      	str	r3, [r2, #20]
 8004ae2:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aee:	4b4d      	ldr	r3, [pc, #308]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	4a4c      	ldr	r2, [pc, #304]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af8:	6153      	str	r3, [r2, #20]
 8004afa:	4b4a      	ldr	r3, [pc, #296]	; (8004c24 <MX_GPIO_Init+0x194>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15 
 8004b06:	2200      	movs	r2, #0
 8004b08:	f24c 4122 	movw	r1, #50210	; 0xc422
 8004b0c:	4846      	ldr	r0, [pc, #280]	; (8004c28 <MX_GPIO_Init+0x198>)
 8004b0e:	f002 fbf1 	bl	80072f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8004b12:	2200      	movs	r2, #0
 8004b14:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004b18:	4844      	ldr	r0, [pc, #272]	; (8004c2c <MX_GPIO_Init+0x19c>)
 8004b1a:	f002 fbeb 	bl	80072f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b28:	f002 fbe4 	bl	80072f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b2c:	23c0      	movs	r3, #192	; 0xc0
 8004b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3a:	f107 0314 	add.w	r3, r7, #20
 8004b3e:	4619      	mov	r1, r3
 8004b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b44:	f002 fa4c 	bl	8006fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB14 PB15 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15 
 8004b48:	f24c 4322 	movw	r3, #50210	; 0xc422
 8004b4c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b56:	2300      	movs	r3, #0
 8004b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5a:	f107 0314 	add.w	r3, r7, #20
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4831      	ldr	r0, [pc, #196]	; (8004c28 <MX_GPIO_Init+0x198>)
 8004b62:	f002 fa3d 	bl	8006fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8004b66:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004b6c:	2311      	movs	r3, #17
 8004b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b74:	2300      	movs	r3, #0
 8004b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	482b      	ldr	r0, [pc, #172]	; (8004c2c <MX_GPIO_Init+0x19c>)
 8004b80:	f002 fa2e 	bl	8006fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b90:	2300      	movs	r3, #0
 8004b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b94:	f107 0314 	add.w	r3, r7, #20
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4824      	ldr	r0, [pc, #144]	; (8004c2c <MX_GPIO_Init+0x19c>)
 8004b9c:	f002 fa20 	bl	8006fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb2:	f107 0314 	add.w	r3, r7, #20
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bbc:	f002 fa10 	bl	8006fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004bc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004bc6:	2311      	movs	r3, #17
 8004bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bdc:	f002 fa00 	bl	8006fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 8004be0:	f44f 7344 	mov.w	r3, #784	; 0x310
 8004be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bec:	2301      	movs	r3, #1
 8004bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	480c      	ldr	r0, [pc, #48]	; (8004c28 <MX_GPIO_Init+0x198>)
 8004bf8:	f002 f9f2 	bl	8006fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2100      	movs	r1, #0
 8004c00:	200a      	movs	r0, #10
 8004c02:	f001 fd76 	bl	80066f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004c06:	200a      	movs	r0, #10
 8004c08:	f001 fd8f 	bl	800672a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2017      	movs	r0, #23
 8004c12:	f001 fd6e 	bl	80066f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004c16:	2017      	movs	r0, #23
 8004c18:	f001 fd87 	bl	800672a <HAL_NVIC_EnableIRQ>

}
 8004c1c:	bf00      	nop
 8004c1e:	3728      	adds	r7, #40	; 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40021000 	.word	0x40021000
 8004c28:	48000400 	.word	0x48000400
 8004c2c:	48000800 	.word	0x48000800

08004c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <HAL_MspInit+0x44>)
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <HAL_MspInit+0x44>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6193      	str	r3, [r2, #24]
 8004c52:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <HAL_MspInit+0x44>)
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_MspInit+0x44>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <HAL_MspInit+0x44>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c68:	61d3      	str	r3, [r2, #28]
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_MspInit+0x44>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004c76:	2007      	movs	r0, #7
 8004c78:	f001 fd30 	bl	80066dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000

08004c88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca8:	d124      	bne.n	8004cf4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <HAL_ADC_MspInit+0x74>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <HAL_ADC_MspInit+0x74>)
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6153      	str	r3, [r2, #20]
 8004cb6:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_ADC_MspInit+0x74>)
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <HAL_ADC_MspInit+0x74>)
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <HAL_ADC_MspInit+0x74>)
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ccc:	6153      	str	r3, [r2, #20]
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_ADC_MspInit+0x74>)
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	4619      	mov	r1, r3
 8004cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cf0:	f002 f976 	bl	8006fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004cf4:	bf00      	nop
 8004cf6:	3728      	adds	r7, #40	; 0x28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40021000 	.word	0x40021000

08004d00 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2c      	ldr	r2, [pc, #176]	; (8004dd0 <HAL_DAC_MspInit+0xd0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d152      	bne.n	8004dc8 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004d22:	4b2c      	ldr	r3, [pc, #176]	; (8004dd4 <HAL_DAC_MspInit+0xd4>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	4a2b      	ldr	r2, [pc, #172]	; (8004dd4 <HAL_DAC_MspInit+0xd4>)
 8004d28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d2c:	61d3      	str	r3, [r2, #28]
 8004d2e:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <HAL_DAC_MspInit+0xd4>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d3a:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <HAL_DAC_MspInit+0xd4>)
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <HAL_DAC_MspInit+0xd4>)
 8004d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d44:	6153      	str	r3, [r2, #20]
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_DAC_MspInit+0xd4>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d52:	2310      	movs	r3, #16
 8004d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d56:	2303      	movs	r3, #3
 8004d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d68:	f002 f93a 	bl	8006fe0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004d6e:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <HAL_DAC_MspInit+0xdc>)
 8004d70:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d72:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004d74:	2210      	movs	r2, #16
 8004d76:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d78:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004d7e:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d84:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d8a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d8c:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d92:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004d96:	2220      	movs	r2, #32
 8004d98:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8004da0:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004da2:	f001 fef2 	bl	8006b8a <HAL_DMA_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8004dac:	f7ff ff40 	bl	8004c30 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_DAC_MspInit+0xe0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <HAL_DAC_MspInit+0xe0>)
 8004db6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dba:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a06      	ldr	r2, [pc, #24]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004dc0:	609a      	str	r2, [r3, #8]
 8004dc2:	4a05      	ldr	r2, [pc, #20]	; (8004dd8 <HAL_DAC_MspInit+0xd8>)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004dc8:	bf00      	nop
 8004dca:	3728      	adds	r7, #40	; 0x28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40007400 	.word	0x40007400
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	20000144 	.word	0x20000144
 8004ddc:	40020030 	.word	0x40020030
 8004de0:	40010000 	.word	0x40010000

08004de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_TIM_Base_MspInit+0x8c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10c      	bne.n	8004e10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004df6:	4b1f      	ldr	r3, [pc, #124]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e00:	6193      	str	r3, [r2, #24]
 8004e02:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e0e:	e02a      	b.n	8004e66 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e18:	d114      	bne.n	8004e44 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	61d3      	str	r3, [r2, #28]
 8004e26:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2100      	movs	r1, #0
 8004e36:	201c      	movs	r0, #28
 8004e38:	f001 fc5b 	bl	80066f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e3c:	201c      	movs	r0, #28
 8004e3e:	f001 fc74 	bl	800672a <HAL_NVIC_EnableIRQ>
}
 8004e42:	e010      	b.n	8004e66 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0b      	ldr	r2, [pc, #44]	; (8004e78 <HAL_TIM_Base_MspInit+0x94>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10b      	bne.n	8004e66 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	61d3      	str	r3, [r2, #28]
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_TIM_Base_MspInit+0x90>)
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
}
 8004e66:	bf00      	nop
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40000400 	.word	0x40000400

08004e7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e84:	f107 030c 	add.w	r3, r7, #12
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9c:	d11d      	bne.n	8004eda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9e:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <HAL_TIM_MspPostInit+0x68>)
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4a10      	ldr	r2, [pc, #64]	; (8004ee4 <HAL_TIM_MspPostInit+0x68>)
 8004ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea8:	6153      	str	r3, [r2, #20]
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <HAL_TIM_MspPostInit+0x68>)
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ecc:	f107 030c 	add.w	r3, r7, #12
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ed6:	f002 f883 	bl	8006fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004eda:	bf00      	nop
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000

08004ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef0:	f107 0314 	add.w	r3, r7, #20
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <HAL_UART_MspInit+0x8c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d130      	bne.n	8004f6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_UART_MspInit+0x90>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_UART_MspInit+0x90>)
 8004f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f14:	61d3      	str	r3, [r2, #28]
 8004f16:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <HAL_UART_MspInit+0x90>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <HAL_UART_MspInit+0x90>)
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <HAL_UART_MspInit+0x90>)
 8004f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f2c:	6153      	str	r3, [r2, #20]
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_UART_MspInit+0x90>)
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f46:	2303      	movs	r3, #3
 8004f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f4a:	2307      	movs	r3, #7
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	4619      	mov	r1, r3
 8004f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f58:	f002 f842 	bl	8006fe0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2026      	movs	r0, #38	; 0x26
 8004f62:	f001 fbc6 	bl	80066f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f66:	2026      	movs	r0, #38	; 0x26
 8004f68:	f001 fbdf 	bl	800672a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004f6c:	bf00      	nop
 8004f6e:	3728      	adds	r7, #40	; 0x28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40004400 	.word	0x40004400
 8004f78:	40021000 	.word	0x40021000

08004f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f8e:	e7fe      	b.n	8004f8e <HardFault_Handler+0x4>

08004f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f94:	e7fe      	b.n	8004f94 <MemManage_Handler+0x4>

08004f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f96:	b480      	push	{r7}
 8004f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f9a:	e7fe      	b.n	8004f9a <BusFault_Handler+0x4>

08004f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fa0:	e7fe      	b.n	8004fa0 <UsageFault_Handler+0x4>

08004fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fd0:	f000 f8c0 	bl	8005154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fd4:	bf00      	nop
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004fdc:	2010      	movs	r0, #16
 8004fde:	f002 f9a1 	bl	8007324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004fec:	4802      	ldr	r0, [pc, #8]	; (8004ff8 <DMA1_Channel3_IRQHandler+0x10>)
 8004fee:	f001 fee9 	bl	8006dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000144 	.word	0x20000144

08004ffc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005000:	2040      	movs	r0, #64	; 0x40
 8005002:	f002 f98f 	bl	8007324 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005006:	2080      	movs	r0, #128	; 0x80
 8005008:	f002 f98c 	bl	8007324 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800500c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005010:	f002 f988 	bl	8007324 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005014:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005018:	f002 f984 	bl	8007324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}

08005020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	ADC_trigger = 1;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <TIM2_IRQHandler+0x14>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800502a:	4803      	ldr	r0, [pc, #12]	; (8005038 <TIM2_IRQHandler+0x18>)
 800502c:	f003 febc 	bl	8008da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005030:	bf00      	nop
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20001308 	.word	0x20001308
 8005038:	20001234 	.word	0x20001234

0800503c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005040:	4802      	ldr	r0, [pc, #8]	; (800504c <USART2_IRQHandler+0x10>)
 8005042:	f004 ff53 	bl	8009eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20001280 	.word	0x20001280

08005050 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <SystemInit+0x20>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	4a05      	ldr	r2, [pc, #20]	; (8005070 <SystemInit+0x20>)
 800505c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000ed00 	.word	0xe000ed00

08005074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005078:	480d      	ldr	r0, [pc, #52]	; (80050b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800507a:	490e      	ldr	r1, [pc, #56]	; (80050b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800507c:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <LoopForever+0xe>)
  movs r3, #0
 800507e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005080:	e002      	b.n	8005088 <LoopCopyDataInit>

08005082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005086:	3304      	adds	r3, #4

08005088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800508a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800508c:	d3f9      	bcc.n	8005082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800508e:	4a0b      	ldr	r2, [pc, #44]	; (80050bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005090:	4c0b      	ldr	r4, [pc, #44]	; (80050c0 <LoopForever+0x16>)
  movs r3, #0
 8005092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005094:	e001      	b.n	800509a <LoopFillZerobss>

08005096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005098:	3204      	adds	r2, #4

0800509a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800509a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800509c:	d3fb      	bcc.n	8005096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800509e:	f7ff ffd7 	bl	8005050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050a2:	f006 f85d 	bl	800b160 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80050a6:	f7ff fa23 	bl	80044f0 <main>

080050aa <LoopForever>:

LoopForever:
    b LoopForever
 80050aa:	e7fe      	b.n	80050aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80050ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80050b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80050b8:	0800c558 	.word	0x0800c558
  ldr r2, =_sbss
 80050bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80050c0:	20001310 	.word	0x20001310

080050c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050c4:	e7fe      	b.n	80050c4 <ADC1_2_IRQHandler>
	...

080050c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050cc:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_Init+0x28>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <HAL_Init+0x28>)
 80050d2:	f043 0310 	orr.w	r3, r3, #16
 80050d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050d8:	2003      	movs	r0, #3
 80050da:	f001 faff 	bl	80066dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050de:	2000      	movs	r0, #0
 80050e0:	f000 f808 	bl	80050f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050e4:	f7ff fdac 	bl	8004c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40022000 	.word	0x40022000

080050f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050fc:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_InitTick+0x54>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <HAL_InitTick+0x58>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	4619      	mov	r1, r3
 8005106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800510a:	fbb3 f3f1 	udiv	r3, r3, r1
 800510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005112:	4618      	mov	r0, r3
 8005114:	f001 fb17 	bl	8006746 <HAL_SYSTICK_Config>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e00e      	b.n	8005140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b0f      	cmp	r3, #15
 8005126:	d80a      	bhi.n	800513e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005128:	2200      	movs	r2, #0
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	f001 fadf 	bl	80066f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005134:	4a06      	ldr	r2, [pc, #24]	; (8005150 <HAL_InitTick+0x5c>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e000      	b.n	8005140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	2000005c 	.word	0x2000005c
 800514c:	20000064 	.word	0x20000064
 8005150:	20000060 	.word	0x20000060

08005154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <HAL_IncTick+0x20>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_IncTick+0x24>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4413      	add	r3, r2
 8005164:	4a04      	ldr	r2, [pc, #16]	; (8005178 <HAL_IncTick+0x24>)
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000064 	.word	0x20000064
 8005178:	2000130c 	.word	0x2000130c

0800517c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return uwTick;  
 8005180:	4b03      	ldr	r3, [pc, #12]	; (8005190 <HAL_GetTick+0x14>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	2000130c 	.word	0x2000130c

08005194 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800519c:	f7ff ffee 	bl	800517c <HAL_GetTick>
 80051a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d005      	beq.n	80051ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_Delay+0x40>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80051ba:	bf00      	nop
 80051bc:	f7ff ffde 	bl	800517c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d8f7      	bhi.n	80051bc <HAL_Delay+0x28>
  {
  }
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000064 	.word	0x20000064

080051d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b09a      	sub	sp, #104	; 0x68
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e1e3      	b.n	80055c0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	d176      	bne.n	80052f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d152      	bne.n	80052b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff fd2b 	bl	8004c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d13b      	bne.n	80052b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f001 f861 	bl	8006308 <ADC_Disable>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d12f      	bne.n	80052b8 <HAL_ADC_Init+0xe0>
 8005258:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800525c:	2b00      	cmp	r3, #0
 800525e:	d12b      	bne.n	80052b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005268:	f023 0302 	bic.w	r3, r3, #2
 800526c:	f043 0202 	orr.w	r2, r3, #2
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005282:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005292:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005294:	4b92      	ldr	r3, [pc, #584]	; (80054e0 <HAL_ADC_Init+0x308>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a92      	ldr	r2, [pc, #584]	; (80054e4 <HAL_ADC_Init+0x30c>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	0c9a      	lsrs	r2, r3, #18
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052aa:	e002      	b.n	80052b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1f9      	bne.n	80052ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80052d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d4:	d110      	bne.n	80052f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f023 0312 	bic.w	r3, r3, #18
 80052de:	f043 0210 	orr.w	r2, r3, #16
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	f043 0201 	orr.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 8150 	bne.w	80055a6 <HAL_ADC_Init+0x3ce>
 8005306:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 814b 	bne.w	80055a6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800531a:	2b00      	cmp	r3, #0
 800531c:	f040 8143 	bne.w	80055a6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005328:	f043 0202 	orr.w	r2, r3, #2
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005338:	d004      	beq.n	8005344 <HAL_ADC_Init+0x16c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6a      	ldr	r2, [pc, #424]	; (80054e8 <HAL_ADC_Init+0x310>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_ADC_Init+0x170>
 8005344:	4b69      	ldr	r3, [pc, #420]	; (80054ec <HAL_ADC_Init+0x314>)
 8005346:	e000      	b.n	800534a <HAL_ADC_Init+0x172>
 8005348:	4b69      	ldr	r3, [pc, #420]	; (80054f0 <HAL_ADC_Init+0x318>)
 800534a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005354:	d102      	bne.n	800535c <HAL_ADC_Init+0x184>
 8005356:	4b64      	ldr	r3, [pc, #400]	; (80054e8 <HAL_ADC_Init+0x310>)
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e01a      	b.n	8005392 <HAL_ADC_Init+0x1ba>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a61      	ldr	r2, [pc, #388]	; (80054e8 <HAL_ADC_Init+0x310>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d103      	bne.n	800536e <HAL_ADC_Init+0x196>
 8005366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e011      	b.n	8005392 <HAL_ADC_Init+0x1ba>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a60      	ldr	r2, [pc, #384]	; (80054f4 <HAL_ADC_Init+0x31c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d102      	bne.n	800537e <HAL_ADC_Init+0x1a6>
 8005378:	4b5f      	ldr	r3, [pc, #380]	; (80054f8 <HAL_ADC_Init+0x320>)
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	e009      	b.n	8005392 <HAL_ADC_Init+0x1ba>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a5d      	ldr	r2, [pc, #372]	; (80054f8 <HAL_ADC_Init+0x320>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d102      	bne.n	800538e <HAL_ADC_Init+0x1b6>
 8005388:	4b5a      	ldr	r3, [pc, #360]	; (80054f4 <HAL_ADC_Init+0x31c>)
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e001      	b.n	8005392 <HAL_ADC_Init+0x1ba>
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	2b01      	cmp	r3, #1
 800539e:	d108      	bne.n	80053b2 <HAL_ADC_Init+0x1da>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_ADC_Init+0x1da>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_ADC_Init+0x1dc>
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11c      	bne.n	80053f2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80053b8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d010      	beq.n	80053e0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d107      	bne.n	80053da <HAL_ADC_Init+0x202>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_ADC_Init+0x202>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <HAL_ADC_Init+0x204>
 80053da:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d108      	bne.n	80053f2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80053e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	7e5b      	ldrb	r3, [r3, #25]
 80053f6:	035b      	lsls	r3, r3, #13
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053fc:	2a01      	cmp	r2, #1
 80053fe:	d002      	beq.n	8005406 <HAL_ADC_Init+0x22e>
 8005400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005404:	e000      	b.n	8005408 <HAL_ADC_Init+0x230>
 8005406:	2200      	movs	r2, #0
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4313      	orrs	r3, r2
 8005416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005418:	4313      	orrs	r3, r2
 800541a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d11b      	bne.n	800545e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	7e5b      	ldrb	r3, [r3, #25]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	3b01      	subs	r3, #1
 8005434:	045a      	lsls	r2, r3, #17
 8005436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005438:	4313      	orrs	r3, r2
 800543a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543e:	663b      	str	r3, [r7, #96]	; 0x60
 8005440:	e00d      	b.n	800545e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f043 0201 	orr.w	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	2b01      	cmp	r3, #1
 8005464:	d054      	beq.n	8005510 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <HAL_ADC_Init+0x31c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_ADC_Init+0x2a2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <HAL_ADC_Init+0x320>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d140      	bne.n	80054fc <HAL_ADC_Init+0x324>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8005482:	d02a      	beq.n	80054da <HAL_ADC_Init+0x302>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548c:	d022      	beq.n	80054d4 <HAL_ADC_Init+0x2fc>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005496:	d01a      	beq.n	80054ce <HAL_ADC_Init+0x2f6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80054a0:	d012      	beq.n	80054c8 <HAL_ADC_Init+0x2f0>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80054aa:	d00a      	beq.n	80054c2 <HAL_ADC_Init+0x2ea>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80054b4:	d002      	beq.n	80054bc <HAL_ADC_Init+0x2e4>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	e023      	b.n	8005504 <HAL_ADC_Init+0x32c>
 80054bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80054c0:	e020      	b.n	8005504 <HAL_ADC_Init+0x32c>
 80054c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80054c6:	e01d      	b.n	8005504 <HAL_ADC_Init+0x32c>
 80054c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80054cc:	e01a      	b.n	8005504 <HAL_ADC_Init+0x32c>
 80054ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d2:	e017      	b.n	8005504 <HAL_ADC_Init+0x32c>
 80054d4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80054d8:	e014      	b.n	8005504 <HAL_ADC_Init+0x32c>
 80054da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80054de:	e011      	b.n	8005504 <HAL_ADC_Init+0x32c>
 80054e0:	2000005c 	.word	0x2000005c
 80054e4:	431bde83 	.word	0x431bde83
 80054e8:	50000100 	.word	0x50000100
 80054ec:	50000300 	.word	0x50000300
 80054f0:	50000700 	.word	0x50000700
 80054f4:	50000400 	.word	0x50000400
 80054f8:	50000500 	.word	0x50000500
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005508:	4313      	orrs	r3, r2
 800550a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800550c:	4313      	orrs	r3, r2
 800550e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b00      	cmp	r3, #0
 800551c:	d114      	bne.n	8005548 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552c:	f023 0302 	bic.w	r3, r3, #2
 8005530:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	7e1b      	ldrb	r3, [r3, #24]
 8005536:	039a      	lsls	r2, r3, #14
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4313      	orrs	r3, r2
 8005542:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005544:	4313      	orrs	r3, r2
 8005546:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <HAL_ADC_Init+0x3f0>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005558:	430b      	orrs	r3, r1
 800555a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d10c      	bne.n	800557e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	f023 010f 	bic.w	r1, r3, #15
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	1e5a      	subs	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
 800557c:	e007      	b.n	800558e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 020f 	bic.w	r2, r2, #15
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	f023 0303 	bic.w	r3, r3, #3
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
 80055a4:	e00a      	b.n	80055bc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f023 0312 	bic.w	r3, r3, #18
 80055ae:	f043 0210 	orr.w	r2, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80055bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3768      	adds	r7, #104	; 0x68
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	fff0c007 	.word	0xfff0c007

080055cc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f040 80f9 	bne.w	80057da <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_Start+0x2a>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e0f4      	b.n	80057e0 <HAL_ADC_Start+0x214>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fe1e 	bl	8006240 <ADC_Enable>
 8005604:	4603      	mov	r3, r0
 8005606:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 80e0 	bne.w	80057d0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800562c:	d004      	beq.n	8005638 <HAL_ADC_Start+0x6c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a6d      	ldr	r2, [pc, #436]	; (80057e8 <HAL_ADC_Start+0x21c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d106      	bne.n	8005646 <HAL_ADC_Start+0x7a>
 8005638:	4b6c      	ldr	r3, [pc, #432]	; (80057ec <HAL_ADC_Start+0x220>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	2b00      	cmp	r3, #0
 8005642:	d010      	beq.n	8005666 <HAL_ADC_Start+0x9a>
 8005644:	e005      	b.n	8005652 <HAL_ADC_Start+0x86>
 8005646:	4b6a      	ldr	r3, [pc, #424]	; (80057f0 <HAL_ADC_Start+0x224>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_ADC_Start+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800565a:	d004      	beq.n	8005666 <HAL_ADC_Start+0x9a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a64      	ldr	r2, [pc, #400]	; (80057f4 <HAL_ADC_Start+0x228>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d115      	bne.n	8005692 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d036      	beq.n	80056ee <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005688:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005690:	e02d      	b.n	80056ee <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056a6:	d004      	beq.n	80056b2 <HAL_ADC_Start+0xe6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a4e      	ldr	r2, [pc, #312]	; (80057e8 <HAL_ADC_Start+0x21c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10a      	bne.n	80056c8 <HAL_ADC_Start+0xfc>
 80056b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	e008      	b.n	80056da <HAL_ADC_Start+0x10e>
 80056c8:	4b4a      	ldr	r3, [pc, #296]	; (80057f4 <HAL_ADC_Start+0x228>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fa:	d106      	bne.n	800570a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	f023 0206 	bic.w	r2, r3, #6
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
 8005708:	e002      	b.n	8005710 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	221c      	movs	r2, #28
 800571e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005728:	d004      	beq.n	8005734 <HAL_ADC_Start+0x168>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2e      	ldr	r2, [pc, #184]	; (80057e8 <HAL_ADC_Start+0x21c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d106      	bne.n	8005742 <HAL_ADC_Start+0x176>
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <HAL_ADC_Start+0x220>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2b00      	cmp	r3, #0
 800573e:	d03e      	beq.n	80057be <HAL_ADC_Start+0x1f2>
 8005740:	e005      	b.n	800574e <HAL_ADC_Start+0x182>
 8005742:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <HAL_ADC_Start+0x224>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2b00      	cmp	r3, #0
 800574c:	d037      	beq.n	80057be <HAL_ADC_Start+0x1f2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005756:	d004      	beq.n	8005762 <HAL_ADC_Start+0x196>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <HAL_ADC_Start+0x21c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d106      	bne.n	8005770 <HAL_ADC_Start+0x1a4>
 8005762:	4b22      	ldr	r3, [pc, #136]	; (80057ec <HAL_ADC_Start+0x220>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2b05      	cmp	r3, #5
 800576c:	d027      	beq.n	80057be <HAL_ADC_Start+0x1f2>
 800576e:	e005      	b.n	800577c <HAL_ADC_Start+0x1b0>
 8005770:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <HAL_ADC_Start+0x224>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2b05      	cmp	r3, #5
 800577a:	d020      	beq.n	80057be <HAL_ADC_Start+0x1f2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005784:	d004      	beq.n	8005790 <HAL_ADC_Start+0x1c4>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_ADC_Start+0x21c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d106      	bne.n	800579e <HAL_ADC_Start+0x1d2>
 8005790:	4b16      	ldr	r3, [pc, #88]	; (80057ec <HAL_ADC_Start+0x220>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	2b09      	cmp	r3, #9
 800579a:	d010      	beq.n	80057be <HAL_ADC_Start+0x1f2>
 800579c:	e005      	b.n	80057aa <HAL_ADC_Start+0x1de>
 800579e:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <HAL_ADC_Start+0x224>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	2b09      	cmp	r3, #9
 80057a8:	d009      	beq.n	80057be <HAL_ADC_Start+0x1f2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057b2:	d004      	beq.n	80057be <HAL_ADC_Start+0x1f2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a0e      	ldr	r2, [pc, #56]	; (80057f4 <HAL_ADC_Start+0x228>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d10f      	bne.n	80057de <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0204 	orr.w	r2, r2, #4
 80057cc:	609a      	str	r2, [r3, #8]
 80057ce:	e006      	b.n	80057de <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057d8:	e001      	b.n	80057de <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80057da:	2302      	movs	r3, #2
 80057dc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	50000100 	.word	0x50000100
 80057ec:	50000300 	.word	0x50000300
 80057f0:	50000700 	.word	0x50000700
 80057f4:	50000400 	.word	0x50000400

080057f8 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_ADC_Stop+0x1a>
 800580e:	2302      	movs	r3, #2
 8005810:	e023      	b.n	800585a <HAL_ADC_Stop+0x62>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800581a:	216c      	movs	r1, #108	; 0x6c
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fdd9 	bl	80063d4 <ADC_ConversionStop>
 8005822:	4603      	mov	r3, r0
 8005824:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d111      	bne.n	8005850 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fd6b 	bl	8006308 <ADC_Disable>
 8005832:	4603      	mov	r3, r0
 8005834:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	f043 0201 	orr.w	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	2b08      	cmp	r3, #8
 8005878:	d102      	bne.n	8005880 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800587a:	2308      	movs	r3, #8
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	e03a      	b.n	80058f6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005888:	d004      	beq.n	8005894 <HAL_ADC_PollForConversion+0x30>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a72      	ldr	r2, [pc, #456]	; (8005a58 <HAL_ADC_PollForConversion+0x1f4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d101      	bne.n	8005898 <HAL_ADC_PollForConversion+0x34>
 8005894:	4b71      	ldr	r3, [pc, #452]	; (8005a5c <HAL_ADC_PollForConversion+0x1f8>)
 8005896:	e000      	b.n	800589a <HAL_ADC_PollForConversion+0x36>
 8005898:	4b71      	ldr	r3, [pc, #452]	; (8005a60 <HAL_ADC_PollForConversion+0x1fc>)
 800589a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d112      	bne.n	80058ce <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d11d      	bne.n	80058f2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0bf      	b.n	8005a4e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e0ad      	b.n	8005a4e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80058f2:	230c      	movs	r3, #12
 80058f4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058fe:	d004      	beq.n	800590a <HAL_ADC_PollForConversion+0xa6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a54      	ldr	r2, [pc, #336]	; (8005a58 <HAL_ADC_PollForConversion+0x1f4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d106      	bne.n	8005918 <HAL_ADC_PollForConversion+0xb4>
 800590a:	4b54      	ldr	r3, [pc, #336]	; (8005a5c <HAL_ADC_PollForConversion+0x1f8>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2b00      	cmp	r3, #0
 8005914:	d010      	beq.n	8005938 <HAL_ADC_PollForConversion+0xd4>
 8005916:	e005      	b.n	8005924 <HAL_ADC_PollForConversion+0xc0>
 8005918:	4b51      	ldr	r3, [pc, #324]	; (8005a60 <HAL_ADC_PollForConversion+0x1fc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <HAL_ADC_PollForConversion+0xd4>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800592c:	d004      	beq.n	8005938 <HAL_ADC_PollForConversion+0xd4>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a4c      	ldr	r2, [pc, #304]	; (8005a64 <HAL_ADC_PollForConversion+0x200>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d104      	bne.n	8005942 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e00f      	b.n	8005962 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800594a:	d004      	beq.n	8005956 <HAL_ADC_PollForConversion+0xf2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a41      	ldr	r2, [pc, #260]	; (8005a58 <HAL_ADC_PollForConversion+0x1f4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d102      	bne.n	800595c <HAL_ADC_PollForConversion+0xf8>
 8005956:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800595a:	e000      	b.n	800595e <HAL_ADC_PollForConversion+0xfa>
 800595c:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <HAL_ADC_PollForConversion+0x200>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8005962:	f7ff fc0b 	bl	800517c <HAL_GetTick>
 8005966:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005968:	e021      	b.n	80059ae <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d01d      	beq.n	80059ae <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <HAL_ADC_PollForConversion+0x124>
 8005978:	f7ff fc00 	bl	800517c <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d212      	bcs.n	80059ae <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f043 0204 	orr.w	r2, r3, #4
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e04f      	b.n	8005a4e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0d6      	beq.n	800596a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d131      	bne.n	8005a3a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d12c      	bne.n	8005a3a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d125      	bne.n	8005a3a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d112      	bne.n	8005a22 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d112      	bne.n	8005a3a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	f043 0201 	orr.w	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8005a20:	e00b      	b.n	8005a3a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	f043 0201 	orr.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	50000100 	.word	0x50000100
 8005a5c:	50000300 	.word	0x50000300
 8005a60:	50000700 	.word	0x50000700
 8005a64:	50000400 	.word	0x50000400

08005a68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b09b      	sub	sp, #108	; 0x6c
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_ADC_ConfigChannel+0x22>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e2cb      	b.n	800603e <HAL_ADC_ConfigChannel+0x5ba>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 82af 	bne.w	800601c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d81c      	bhi.n	8005b00 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	4413      	add	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	461a      	mov	r2, r3
 8005ada:	231f      	movs	r3, #31
 8005adc:	4093      	lsls	r3, r2
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	4019      	ands	r1, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	fa00 f203 	lsl.w	r2, r0, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
 8005afe:	e063      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d81e      	bhi.n	8005b46 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	3b1e      	subs	r3, #30
 8005b1c:	221f      	movs	r2, #31
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	4019      	ands	r1, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	4413      	add	r3, r2
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	3b1e      	subs	r3, #30
 8005b38:	fa00 f203 	lsl.w	r2, r0, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	635a      	str	r2, [r3, #52]	; 0x34
 8005b44:	e040      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b0e      	cmp	r3, #14
 8005b4c:	d81e      	bhi.n	8005b8c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	3b3c      	subs	r3, #60	; 0x3c
 8005b62:	221f      	movs	r2, #31
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	4019      	ands	r1, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	3b3c      	subs	r3, #60	; 0x3c
 8005b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
 8005b8a:	e01d      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	4413      	add	r3, r2
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	3b5a      	subs	r3, #90	; 0x5a
 8005ba0:	221f      	movs	r2, #31
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	4019      	ands	r1, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6818      	ldr	r0, [r3, #0]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	4413      	add	r3, r2
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	3b5a      	subs	r3, #90	; 0x5a
 8005bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f040 80e5 	bne.w	8005da2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b09      	cmp	r3, #9
 8005bde:	d91c      	bls.n	8005c1a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6999      	ldr	r1, [r3, #24]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	3b1e      	subs	r3, #30
 8005bf2:	2207      	movs	r2, #7
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	4019      	ands	r1, r3
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6898      	ldr	r0, [r3, #8]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	3b1e      	subs	r3, #30
 8005c0c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	619a      	str	r2, [r3, #24]
 8005c18:	e019      	b.n	8005c4e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6959      	ldr	r1, [r3, #20]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	2207      	movs	r2, #7
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	4019      	ands	r1, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	6898      	ldr	r0, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	fa00 f203 	lsl.w	r2, r0, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	08db      	lsrs	r3, r3, #3
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d84f      	bhi.n	8005d10 <HAL_ADC_ConfigChannel+0x28c>
 8005c70:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <HAL_ADC_ConfigChannel+0x1f4>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005c89 	.word	0x08005c89
 8005c7c:	08005cab 	.word	0x08005cab
 8005c80:	08005ccd 	.word	0x08005ccd
 8005c84:	08005cef 	.word	0x08005cef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c8e:	4b9f      	ldr	r3, [pc, #636]	; (8005f0c <HAL_ADC_ConfigChannel+0x488>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	0691      	lsls	r1, r2, #26
 8005c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005ca6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005ca8:	e07e      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005cb0:	4b96      	ldr	r3, [pc, #600]	; (8005f0c <HAL_ADC_ConfigChannel+0x488>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	0691      	lsls	r1, r2, #26
 8005cba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005cc8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005cca:	e06d      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005cd2:	4b8e      	ldr	r3, [pc, #568]	; (8005f0c <HAL_ADC_ConfigChannel+0x488>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	0691      	lsls	r1, r2, #26
 8005cdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005cea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005cec:	e05c      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005cf4:	4b85      	ldr	r3, [pc, #532]	; (8005f0c <HAL_ADC_ConfigChannel+0x488>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	0691      	lsls	r1, r2, #26
 8005cfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d00:	430a      	orrs	r2, r1
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005d0c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005d0e:	e04b      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	069b      	lsls	r3, r3, #26
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d107      	bne.n	8005d34 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d32:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	069b      	lsls	r3, r3, #26
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d107      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d56:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	069b      	lsls	r3, r3, #26
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d107      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d7a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	069b      	lsls	r3, r3, #26
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d10a      	bne.n	8005da6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d9e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005da0:	e001      	b.n	8005da6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8005da6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d108      	bne.n	8005dc8 <HAL_ADC_ConfigChannel+0x344>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_ADC_ConfigChannel+0x344>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <HAL_ADC_ConfigChannel+0x346>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f040 8131 	bne.w	8006032 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d00f      	beq.n	8005df8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43da      	mvns	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	400a      	ands	r2, r1
 8005df2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005df6:	e049      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2201      	movs	r2, #1
 8005e06:	409a      	lsls	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	d91c      	bls.n	8005e54 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6999      	ldr	r1, [r3, #24]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	3b1b      	subs	r3, #27
 8005e2c:	2207      	movs	r2, #7
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43db      	mvns	r3, r3
 8005e34:	4019      	ands	r1, r3
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6898      	ldr	r0, [r3, #8]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	3b1b      	subs	r3, #27
 8005e46:	fa00 f203 	lsl.w	r2, r0, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	619a      	str	r2, [r3, #24]
 8005e52:	e01b      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6959      	ldr	r1, [r3, #20]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	4613      	mov	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4413      	add	r3, r2
 8005e66:	2207      	movs	r2, #7
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	4019      	ands	r1, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6898      	ldr	r0, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	fa00 f203 	lsl.w	r2, r0, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e94:	d004      	beq.n	8005ea0 <HAL_ADC_ConfigChannel+0x41c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <HAL_ADC_ConfigChannel+0x48c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_ADC_ConfigChannel+0x420>
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <HAL_ADC_ConfigChannel+0x490>)
 8005ea2:	e000      	b.n	8005ea6 <HAL_ADC_ConfigChannel+0x422>
 8005ea4:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <HAL_ADC_ConfigChannel+0x494>)
 8005ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d105      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d015      	beq.n	8005ee8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005ec0:	2b11      	cmp	r3, #17
 8005ec2:	d105      	bne.n	8005ed0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005ed4:	2b12      	cmp	r3, #18
 8005ed6:	f040 80ac 	bne.w	8006032 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f040 80a5 	bne.w	8006032 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ef0:	d102      	bne.n	8005ef8 <HAL_ADC_ConfigChannel+0x474>
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <HAL_ADC_ConfigChannel+0x48c>)
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	e023      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x4bc>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <HAL_ADC_ConfigChannel+0x48c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10c      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x498>
 8005f02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e01a      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x4bc>
 8005f0a:	bf00      	nop
 8005f0c:	83fff000 	.word	0x83fff000
 8005f10:	50000100 	.word	0x50000100
 8005f14:	50000300 	.word	0x50000300
 8005f18:	50000700 	.word	0x50000700
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a4a      	ldr	r2, [pc, #296]	; (800604c <HAL_ADC_ConfigChannel+0x5c8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d102      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x4a8>
 8005f26:	4b4a      	ldr	r3, [pc, #296]	; (8006050 <HAL_ADC_ConfigChannel+0x5cc>)
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e009      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x4bc>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a47      	ldr	r2, [pc, #284]	; (8006050 <HAL_ADC_ConfigChannel+0x5cc>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d102      	bne.n	8005f3c <HAL_ADC_ConfigChannel+0x4b8>
 8005f36:	4b45      	ldr	r3, [pc, #276]	; (800604c <HAL_ADC_ConfigChannel+0x5c8>)
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e001      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x4bc>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d108      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x4dc>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x4dc>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x4de>
 8005f60:	2300      	movs	r3, #0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d150      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005f66:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d010      	beq.n	8005f8e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d107      	bne.n	8005f88 <HAL_ADC_ConfigChannel+0x504>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_ADC_ConfigChannel+0x504>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <HAL_ADC_ConfigChannel+0x506>
 8005f88:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d13c      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b10      	cmp	r3, #16
 8005f94:	d11d      	bne.n	8005fd2 <HAL_ADC_ConfigChannel+0x54e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f9e:	d118      	bne.n	8005fd2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005faa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005fac:	4b29      	ldr	r3, [pc, #164]	; (8006054 <HAL_ADC_ConfigChannel+0x5d0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a29      	ldr	r2, [pc, #164]	; (8006058 <HAL_ADC_ConfigChannel+0x5d4>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	0c9a      	lsrs	r2, r3, #18
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005fc2:	e002      	b.n	8005fca <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f9      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005fd0:	e02e      	b.n	8006030 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b11      	cmp	r3, #17
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_ADC_ConfigChannel+0x56e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fe2:	d106      	bne.n	8005ff2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ff0:	e01e      	b.n	8006030 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b12      	cmp	r3, #18
 8005ff8:	d11a      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006004:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006006:	e013      	b.n	8006030 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	f043 0220 	orr.w	r2, r3, #32
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800601a:	e00a      	b.n	8006032 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f043 0220 	orr.w	r2, r3, #32
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800602e:	e000      	b.n	8006032 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006030:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800603a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800603e:	4618      	mov	r0, r3
 8006040:	376c      	adds	r7, #108	; 0x6c
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	50000400 	.word	0x50000400
 8006050:	50000500 	.word	0x50000500
 8006054:	2000005c 	.word	0x2000005c
 8006058:	431bde83 	.word	0x431bde83

0800605c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800605c:	b480      	push	{r7}
 800605e:	b099      	sub	sp, #100	; 0x64
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006074:	d102      	bne.n	800607c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006076:	4b6d      	ldr	r3, [pc, #436]	; (800622c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	e01a      	b.n	80060b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a6a      	ldr	r2, [pc, #424]	; (800622c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d103      	bne.n	800608e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006086:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800608a:	60bb      	str	r3, [r7, #8]
 800608c:	e011      	b.n	80060b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a67      	ldr	r2, [pc, #412]	; (8006230 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d102      	bne.n	800609e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006098:	4b66      	ldr	r3, [pc, #408]	; (8006234 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	e009      	b.n	80060b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a64      	ldr	r2, [pc, #400]	; (8006234 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d102      	bne.n	80060ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80060a8:	4b61      	ldr	r3, [pc, #388]	; (8006230 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	e001      	b.n	80060b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80060ae:	2300      	movs	r3, #0
 80060b0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0b0      	b.n	800621e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e0a9      	b.n	800621e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 808d 	bne.w	80061fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 8086 	bne.w	80061fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060f8:	d004      	beq.n	8006104 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a4b      	ldr	r2, [pc, #300]	; (800622c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d101      	bne.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006104:	4b4c      	ldr	r3, [pc, #304]	; (8006238 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006106:	e000      	b.n	800610a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006108:	4b4c      	ldr	r3, [pc, #304]	; (800623c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800610a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d040      	beq.n	8006196 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6859      	ldr	r1, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006126:	035b      	lsls	r3, r3, #13
 8006128:	430b      	orrs	r3, r1
 800612a:	431a      	orrs	r2, r3
 800612c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800612e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d108      	bne.n	8006150 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006150:	2300      	movs	r3, #0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d15c      	bne.n	8006210 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d107      	bne.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006172:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006174:	2b00      	cmp	r3, #0
 8006176:	d14b      	bne.n	8006210 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006180:	f023 030f 	bic.w	r3, r3, #15
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	6811      	ldr	r1, [r2, #0]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	6892      	ldr	r2, [r2, #8]
 800618c:	430a      	orrs	r2, r1
 800618e:	431a      	orrs	r2, r3
 8006190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006192:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006194:	e03c      	b.n	8006210 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800619e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0303 	and.w	r3, r3, #3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d108      	bne.n	80061c2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d123      	bne.n	8006210 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d107      	bne.n	80061e4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80061e4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d112      	bne.n	8006210 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80061ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80061f2:	f023 030f 	bic.w	r3, r3, #15
 80061f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061f8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80061fa:	e009      	b.n	8006210 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800620e:	e000      	b.n	8006212 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006210:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800621a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800621e:	4618      	mov	r0, r3
 8006220:	3764      	adds	r7, #100	; 0x64
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	50000100 	.word	0x50000100
 8006230:	50000400 	.word	0x50000400
 8006234:	50000500 	.word	0x50000500
 8006238:	50000300 	.word	0x50000300
 800623c:	50000700 	.word	0x50000700

08006240 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b01      	cmp	r3, #1
 8006258:	d108      	bne.n	800626c <ADC_Enable+0x2c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <ADC_Enable+0x2c>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <ADC_Enable+0x2e>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d143      	bne.n	80062fa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	4b22      	ldr	r3, [pc, #136]	; (8006304 <ADC_Enable+0xc4>)
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00d      	beq.n	800629c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	f043 0210 	orr.w	r2, r3, #16
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	f043 0201 	orr.w	r2, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e02f      	b.n	80062fc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80062ac:	f7fe ff66 	bl	800517c <HAL_GetTick>
 80062b0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80062b2:	e01b      	b.n	80062ec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062b4:	f7fe ff62 	bl	800517c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d914      	bls.n	80062ec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d00d      	beq.n	80062ec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	f043 0210 	orr.w	r2, r3, #16
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e007      	b.n	80062fc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d1dc      	bne.n	80062b4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	8000003f 	.word	0x8000003f

08006308 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d108      	bne.n	8006334 <ADC_Disable+0x2c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <ADC_Disable+0x2c>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <ADC_Disable+0x2e>
 8006334:	2300      	movs	r3, #0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d047      	beq.n	80063ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 030d 	and.w	r3, r3, #13
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10f      	bne.n	8006368 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0202 	orr.w	r2, r2, #2
 8006356:	609a      	str	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2203      	movs	r2, #3
 800635e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006360:	f7fe ff0c 	bl	800517c <HAL_GetTick>
 8006364:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006366:	e029      	b.n	80063bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f043 0210 	orr.w	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e023      	b.n	80063cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006384:	f7fe fefa 	bl	800517c <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d914      	bls.n	80063bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b01      	cmp	r3, #1
 800639e:	d10d      	bne.n	80063bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	f043 0210 	orr.w	r2, r3, #16
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b0:	f043 0201 	orr.w	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e007      	b.n	80063cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d0dc      	beq.n	8006384 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 030c 	and.w	r3, r3, #12
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 809a 	beq.w	800652e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006408:	d12a      	bne.n	8006460 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800640e:	2b01      	cmp	r3, #1
 8006410:	d126      	bne.n	8006460 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8006416:	2b01      	cmp	r3, #1
 8006418:	d122      	bne.n	8006460 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800641a:	230c      	movs	r3, #12
 800641c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800641e:	e014      	b.n	800644a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4a45      	ldr	r2, [pc, #276]	; (8006538 <ADC_ConversionStop+0x164>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d90d      	bls.n	8006444 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	f043 0210 	orr.w	r2, r3, #16
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e075      	b.n	8006530 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	3301      	adds	r3, #1
 8006448:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d1e3      	bne.n	8006420 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2240      	movs	r2, #64	; 0x40
 800645e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b60      	cmp	r3, #96	; 0x60
 8006464:	d015      	beq.n	8006492 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b04      	cmp	r3, #4
 8006472:	d10e      	bne.n	8006492 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0210 	orr.w	r2, r2, #16
 8006490:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b0c      	cmp	r3, #12
 8006496:	d015      	beq.n	80064c4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d10e      	bne.n	80064c4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d107      	bne.n	80064c4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0220 	orr.w	r2, r2, #32
 80064c2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b60      	cmp	r3, #96	; 0x60
 80064c8:	d004      	beq.n	80064d4 <ADC_ConversionStop+0x100>
 80064ca:	2b6c      	cmp	r3, #108	; 0x6c
 80064cc:	d105      	bne.n	80064da <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80064ce:	230c      	movs	r3, #12
 80064d0:	617b      	str	r3, [r7, #20]
        break;
 80064d2:	e005      	b.n	80064e0 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80064d4:	2308      	movs	r3, #8
 80064d6:	617b      	str	r3, [r7, #20]
        break;
 80064d8:	e002      	b.n	80064e0 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80064da:	2304      	movs	r3, #4
 80064dc:	617b      	str	r3, [r7, #20]
        break;
 80064de:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80064e0:	f7fe fe4c 	bl	800517c <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80064e6:	e01b      	b.n	8006520 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80064e8:	f7fe fe48 	bl	800517c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b0b      	cmp	r3, #11
 80064f4:	d914      	bls.n	8006520 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	4013      	ands	r3, r2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00d      	beq.n	8006520 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f043 0210 	orr.w	r2, r3, #16
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006514:	f043 0201 	orr.w	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e007      	b.n	8006530 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1dc      	bne.n	80064e8 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	000993ff 	.word	0x000993ff

0800653c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800654c:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <__NVIC_SetPriorityGrouping+0x44>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006558:	4013      	ands	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800656e:	4a04      	ldr	r2, [pc, #16]	; (8006580 <__NVIC_SetPriorityGrouping+0x44>)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	60d3      	str	r3, [r2, #12]
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	e000ed00 	.word	0xe000ed00

08006584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <__NVIC_GetPriorityGrouping+0x18>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	0a1b      	lsrs	r3, r3, #8
 800658e:	f003 0307 	and.w	r3, r3, #7
}
 8006592:	4618      	mov	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	e000ed00 	.word	0xe000ed00

080065a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	db0b      	blt.n	80065ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	f003 021f 	and.w	r2, r3, #31
 80065b8:	4907      	ldr	r1, [pc, #28]	; (80065d8 <__NVIC_EnableIRQ+0x38>)
 80065ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	2001      	movs	r0, #1
 80065c2:	fa00 f202 	lsl.w	r2, r0, r2
 80065c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	e000e100 	.word	0xe000e100

080065dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	6039      	str	r1, [r7, #0]
 80065e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	db0a      	blt.n	8006606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	490c      	ldr	r1, [pc, #48]	; (8006628 <__NVIC_SetPriority+0x4c>)
 80065f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fa:	0112      	lsls	r2, r2, #4
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	440b      	add	r3, r1
 8006600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006604:	e00a      	b.n	800661c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	b2da      	uxtb	r2, r3
 800660a:	4908      	ldr	r1, [pc, #32]	; (800662c <__NVIC_SetPriority+0x50>)
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	3b04      	subs	r3, #4
 8006614:	0112      	lsls	r2, r2, #4
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	440b      	add	r3, r1
 800661a:	761a      	strb	r2, [r3, #24]
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	e000e100 	.word	0xe000e100
 800662c:	e000ed00 	.word	0xe000ed00

08006630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006630:	b480      	push	{r7}
 8006632:	b089      	sub	sp, #36	; 0x24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f1c3 0307 	rsb	r3, r3, #7
 800664a:	2b04      	cmp	r3, #4
 800664c:	bf28      	it	cs
 800664e:	2304      	movcs	r3, #4
 8006650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	3304      	adds	r3, #4
 8006656:	2b06      	cmp	r3, #6
 8006658:	d902      	bls.n	8006660 <NVIC_EncodePriority+0x30>
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	3b03      	subs	r3, #3
 800665e:	e000      	b.n	8006662 <NVIC_EncodePriority+0x32>
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006664:	f04f 32ff 	mov.w	r2, #4294967295
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	43da      	mvns	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	401a      	ands	r2, r3
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006678:	f04f 31ff 	mov.w	r1, #4294967295
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	fa01 f303 	lsl.w	r3, r1, r3
 8006682:	43d9      	mvns	r1, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006688:	4313      	orrs	r3, r2
         );
}
 800668a:	4618      	mov	r0, r3
 800668c:	3724      	adds	r7, #36	; 0x24
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066a8:	d301      	bcc.n	80066ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066aa:	2301      	movs	r3, #1
 80066ac:	e00f      	b.n	80066ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066ae:	4a0a      	ldr	r2, [pc, #40]	; (80066d8 <SysTick_Config+0x40>)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066b6:	210f      	movs	r1, #15
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	f7ff ff8e 	bl	80065dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066c0:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <SysTick_Config+0x40>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066c6:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <SysTick_Config+0x40>)
 80066c8:	2207      	movs	r2, #7
 80066ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	e000e010 	.word	0xe000e010

080066dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff ff29 	bl	800653c <__NVIC_SetPriorityGrouping>
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	4603      	mov	r3, r0
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006704:	f7ff ff3e 	bl	8006584 <__NVIC_GetPriorityGrouping>
 8006708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	6978      	ldr	r0, [r7, #20]
 8006710:	f7ff ff8e 	bl	8006630 <NVIC_EncodePriority>
 8006714:	4602      	mov	r2, r0
 8006716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff ff5d 	bl	80065dc <__NVIC_SetPriority>
}
 8006722:	bf00      	nop
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	4603      	mov	r3, r0
 8006732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff ff31 	bl	80065a0 <__NVIC_EnableIRQ>
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff ffa2 	bl	8006698 <SysTick_Config>
 8006754:	4603      	mov	r3, r0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e014      	b.n	800679a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d105      	bne.n	8006786 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7fe fabd 	bl	8004d00 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2202      	movs	r2, #2
 800678a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	43da      	mvns	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	400a      	ands	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	2201      	movs	r2, #1
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	43da      	mvns	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	400a      	ands	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10f      	bne.n	8006808 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fa72 	bl	8006cd6 <HAL_DMA_Abort>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e00e      	b.n	8006826 <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fa62 	bl	8006cd6 <HAL_DMA_Abort>
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006824:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2204      	movs	r2, #4
 8006830:	711a      	strb	r2, [r3, #4]
 8006832:	e002      	b.n	800683a <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	795b      	ldrb	r3, [r3, #5]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <HAL_DAC_Start_DMA+0x1e>
 800689a:	2302      	movs	r3, #2
 800689c:	e08e      	b.n	80069bc <HAL_DAC_Start_DMA+0x13c>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2202      	movs	r2, #2
 80068a8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d12a      	bne.n	8006906 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	4a43      	ldr	r2, [pc, #268]	; (80069c4 <HAL_DAC_Start_DMA+0x144>)
 80068b6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4a42      	ldr	r2, [pc, #264]	; (80069c8 <HAL_DAC_Start_DMA+0x148>)
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	4a41      	ldr	r2, [pc, #260]	; (80069cc <HAL_DAC_Start_DMA+0x14c>)
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d009      	beq.n	80068f2 <HAL_DAC_Start_DMA+0x72>
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d00c      	beq.n	80068fc <HAL_DAC_Start_DMA+0x7c>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d000      	beq.n	80068e8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80068e6:	e039      	b.n	800695c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3308      	adds	r3, #8
 80068ee:	617b      	str	r3, [r7, #20]
        break;
 80068f0:	e034      	b.n	800695c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	617b      	str	r3, [r7, #20]
        break;
 80068fa:	e02f      	b.n	800695c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3310      	adds	r3, #16
 8006902:	617b      	str	r3, [r7, #20]
        break;
 8006904:	e02a      	b.n	800695c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	4a31      	ldr	r2, [pc, #196]	; (80069d0 <HAL_DAC_Start_DMA+0x150>)
 800690c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	4a30      	ldr	r2, [pc, #192]	; (80069d4 <HAL_DAC_Start_DMA+0x154>)
 8006914:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	4a2f      	ldr	r2, [pc, #188]	; (80069d8 <HAL_DAC_Start_DMA+0x158>)
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800692c:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	2b04      	cmp	r3, #4
 8006932:	d009      	beq.n	8006948 <HAL_DAC_Start_DMA+0xc8>
 8006934:	2b08      	cmp	r3, #8
 8006936:	d00c      	beq.n	8006952 <HAL_DAC_Start_DMA+0xd2>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d000      	beq.n	800693e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800693c:	e00e      	b.n	800695c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	617b      	str	r3, [r7, #20]
        break;
 8006946:	e009      	b.n	800695c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3318      	adds	r3, #24
 800694e:	617b      	str	r3, [r7, #20]
        break;
 8006950:	e004      	b.n	800695c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	331c      	adds	r3, #28
 8006958:	617b      	str	r3, [r7, #20]
        break;
 800695a:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10f      	bne.n	8006982 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006970:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6898      	ldr	r0, [r3, #8]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	f000 f94c 	bl	8006c18 <HAL_DMA_Start_IT>
 8006980:	e00e      	b.n	80069a0 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006990:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	68d8      	ldr	r0, [r3, #12]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	f000 f93c 	bl	8006c18 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6819      	ldr	r1, [r3, #0]
 80069ac:	2201      	movs	r2, #1
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	409a      	lsls	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	08006ab3 	.word	0x08006ab3
 80069c8:	08006ad5 	.word	0x08006ad5
 80069cc:	08006af1 	.word	0x08006af1
 80069d0:	08006b1f 	.word	0x08006b1f
 80069d4:	08006b41 	.word	0x08006b41
 80069d8:	08006b5d 	.word	0x08006b5d

080069dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	795b      	ldrb	r3, [r3, #5]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_DAC_ConfigChannel+0x20>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e036      	b.n	8006a6a <HAL_DAC_ConfigChannel+0x8e>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2202      	movs	r2, #2
 8006a06:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006a10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43db      	mvns	r3, r3
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6819      	ldr	r1, [r3, #0]
 8006a4a:	22c0      	movs	r2, #192	; 0xc0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43da      	mvns	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	400a      	ands	r2, r1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7ff febf 	bl	8006844 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	711a      	strb	r2, [r3, #4]
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff feb8 	bl	8006858 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff feae 	bl	800686c <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	711a      	strb	r2, [r3, #4]
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff ffa2 	bl	8006a76 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	711a      	strb	r2, [r3, #4]
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7ff ff9b 	bl	8006a8a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f043 0204 	orr.w	r2, r3, #4
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff ff91 	bl	8006a9e <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	711a      	strb	r2, [r3, #4]
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e037      	b.n	8006c10 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006bb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006bba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9b8 	bl	8006f68 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}  
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_DMA_Start_IT+0x20>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e04a      	b.n	8006cce <HAL_DMA_Start_IT+0xb6>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d13a      	bne.n	8006cc0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f94b 	bl	8006f0a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d008      	beq.n	8006c8e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 020e 	orr.w	r2, r2, #14
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e00f      	b.n	8006cae <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 020a 	orr.w	r2, r2, #10
 8006c9c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0204 	bic.w	r2, r2, #4
 8006cac:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0201 	orr.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e005      	b.n	8006ccc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d008      	beq.n	8006cfa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2204      	movs	r2, #4
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e020      	b.n	8006d3c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 020e 	bic.w	r2, r2, #14
 8006d08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0201 	bic.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	2101      	movs	r1, #1
 8006d24:	fa01 f202 	lsl.w	r2, r1, r2
 8006d28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d005      	beq.n	8006d6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2204      	movs	r2, #4
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
 8006d68:	e027      	b.n	8006dba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 020e 	bic.w	r2, r2, #14
 8006d78:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0201 	bic.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	2101      	movs	r1, #1
 8006d94:	fa01 f202 	lsl.w	r2, r1, r2
 8006d98:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
    } 
  }
  return status;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	2204      	movs	r2, #4
 8006de2:	409a      	lsls	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d024      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x72>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d01f      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d107      	bne.n	8006e14 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0204 	bic.w	r2, r2, #4
 8006e12:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1c:	2104      	movs	r1, #4
 8006e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e22:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d06a      	beq.n	8006f02 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006e34:	e065      	b.n	8006f02 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	409a      	lsls	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02c      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0xdc>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d027      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 020a 	bic.w	r2, r2, #10
 8006e6c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	2102      	movs	r1, #2
 8006e80:	fa01 f202 	lsl.w	r2, r1, r2
 8006e84:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d035      	beq.n	8006f02 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006e9e:	e030      	b.n	8006f02 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	409a      	lsls	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d028      	beq.n	8006f02 <HAL_DMA_IRQHandler+0x13e>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d023      	beq.n	8006f02 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 020e 	bic.w	r2, r2, #14
 8006ec8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
    }
  }
}  
 8006f00:	e7ff      	b.n	8006f02 <HAL_DMA_IRQHandler+0x13e>
 8006f02:	bf00      	nop
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	2101      	movs	r1, #1
 8006f22:	fa01 f202 	lsl.w	r2, r1, r2
 8006f26:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d108      	bne.n	8006f4a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006f48:	e007      	b.n	8006f5a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	60da      	str	r2, [r3, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <DMA_CalcBaseAndBitshift+0x60>)
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d80f      	bhi.n	8006f9c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <DMA_CalcBaseAndBitshift+0x64>)
 8006f84:	4413      	add	r3, r2
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8006f88:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8c:	091b      	lsrs	r3, r3, #4
 8006f8e:	009a      	lsls	r2, r3, #2
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <DMA_CalcBaseAndBitshift+0x6c>)
 8006f98:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006f9a:	e00e      	b.n	8006fba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <DMA_CalcBaseAndBitshift+0x70>)
 8006fa4:	4413      	add	r3, r2
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	091b      	lsrs	r3, r3, #4
 8006fae:	009a      	lsls	r2, r3, #2
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <DMA_CalcBaseAndBitshift+0x74>)
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40020407 	.word	0x40020407
 8006fcc:	bffdfff8 	.word	0xbffdfff8
 8006fd0:	cccccccd 	.word	0xcccccccd
 8006fd4:	40020000 	.word	0x40020000
 8006fd8:	bffdfbf8 	.word	0xbffdfbf8
 8006fdc:	40020400 	.word	0x40020400

08006fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fee:	e160      	b.n	80072b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8152 	beq.w	80072ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d005      	beq.n	8007020 <HAL_GPIO_Init+0x40>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d130      	bne.n	8007082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	2203      	movs	r2, #3
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4013      	ands	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68da      	ldr	r2, [r3, #12]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	fa02 f303 	lsl.w	r3, r2, r3
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007056:	2201      	movs	r2, #1
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	43db      	mvns	r3, r3
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4013      	ands	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	091b      	lsrs	r3, r3, #4
 800706c:	f003 0201 	and.w	r2, r3, #1
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	fa02 f303 	lsl.w	r3, r2, r3
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4313      	orrs	r3, r2
 800707a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b03      	cmp	r3, #3
 800708c:	d017      	beq.n	80070be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	2203      	movs	r2, #3
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	43db      	mvns	r3, r3
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4013      	ands	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d123      	bne.n	8007112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	08da      	lsrs	r2, r3, #3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3208      	adds	r2, #8
 80070d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	220f      	movs	r2, #15
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	43db      	mvns	r3, r3
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4013      	ands	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	691a      	ldr	r2, [r3, #16]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	fa02 f303 	lsl.w	r3, r2, r3
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	08da      	lsrs	r2, r3, #3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3208      	adds	r2, #8
 800710c:	6939      	ldr	r1, [r7, #16]
 800710e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	2203      	movs	r2, #3
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	43db      	mvns	r3, r3
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4013      	ands	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f003 0203 	and.w	r2, r3, #3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80ac 	beq.w	80072ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007154:	4b5e      	ldr	r3, [pc, #376]	; (80072d0 <HAL_GPIO_Init+0x2f0>)
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	4a5d      	ldr	r2, [pc, #372]	; (80072d0 <HAL_GPIO_Init+0x2f0>)
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	6193      	str	r3, [r2, #24]
 8007160:	4b5b      	ldr	r3, [pc, #364]	; (80072d0 <HAL_GPIO_Init+0x2f0>)
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800716c:	4a59      	ldr	r2, [pc, #356]	; (80072d4 <HAL_GPIO_Init+0x2f4>)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	089b      	lsrs	r3, r3, #2
 8007172:	3302      	adds	r3, #2
 8007174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	220f      	movs	r2, #15
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	43db      	mvns	r3, r3
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4013      	ands	r3, r2
 800718e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007196:	d025      	beq.n	80071e4 <HAL_GPIO_Init+0x204>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a4f      	ldr	r2, [pc, #316]	; (80072d8 <HAL_GPIO_Init+0x2f8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d01f      	beq.n	80071e0 <HAL_GPIO_Init+0x200>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a4e      	ldr	r2, [pc, #312]	; (80072dc <HAL_GPIO_Init+0x2fc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d019      	beq.n	80071dc <HAL_GPIO_Init+0x1fc>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a4d      	ldr	r2, [pc, #308]	; (80072e0 <HAL_GPIO_Init+0x300>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <HAL_GPIO_Init+0x1f8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a4c      	ldr	r2, [pc, #304]	; (80072e4 <HAL_GPIO_Init+0x304>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00d      	beq.n	80071d4 <HAL_GPIO_Init+0x1f4>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a4b      	ldr	r2, [pc, #300]	; (80072e8 <HAL_GPIO_Init+0x308>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d007      	beq.n	80071d0 <HAL_GPIO_Init+0x1f0>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a4a      	ldr	r2, [pc, #296]	; (80072ec <HAL_GPIO_Init+0x30c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d101      	bne.n	80071cc <HAL_GPIO_Init+0x1ec>
 80071c8:	2306      	movs	r3, #6
 80071ca:	e00c      	b.n	80071e6 <HAL_GPIO_Init+0x206>
 80071cc:	2307      	movs	r3, #7
 80071ce:	e00a      	b.n	80071e6 <HAL_GPIO_Init+0x206>
 80071d0:	2305      	movs	r3, #5
 80071d2:	e008      	b.n	80071e6 <HAL_GPIO_Init+0x206>
 80071d4:	2304      	movs	r3, #4
 80071d6:	e006      	b.n	80071e6 <HAL_GPIO_Init+0x206>
 80071d8:	2303      	movs	r3, #3
 80071da:	e004      	b.n	80071e6 <HAL_GPIO_Init+0x206>
 80071dc:	2302      	movs	r3, #2
 80071de:	e002      	b.n	80071e6 <HAL_GPIO_Init+0x206>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e000      	b.n	80071e6 <HAL_GPIO_Init+0x206>
 80071e4:	2300      	movs	r3, #0
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	f002 0203 	and.w	r2, r2, #3
 80071ec:	0092      	lsls	r2, r2, #2
 80071ee:	4093      	lsls	r3, r2
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80071f6:	4937      	ldr	r1, [pc, #220]	; (80072d4 <HAL_GPIO_Init+0x2f4>)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	089b      	lsrs	r3, r3, #2
 80071fc:	3302      	adds	r3, #2
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007204:	4b3a      	ldr	r3, [pc, #232]	; (80072f0 <HAL_GPIO_Init+0x310>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	43db      	mvns	r3, r3
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4013      	ands	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007228:	4a31      	ldr	r2, [pc, #196]	; (80072f0 <HAL_GPIO_Init+0x310>)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800722e:	4b30      	ldr	r3, [pc, #192]	; (80072f0 <HAL_GPIO_Init+0x310>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	43db      	mvns	r3, r3
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	4013      	ands	r3, r2
 800723c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007252:	4a27      	ldr	r2, [pc, #156]	; (80072f0 <HAL_GPIO_Init+0x310>)
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007258:	4b25      	ldr	r3, [pc, #148]	; (80072f0 <HAL_GPIO_Init+0x310>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	43db      	mvns	r3, r3
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4013      	ands	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800727c:	4a1c      	ldr	r2, [pc, #112]	; (80072f0 <HAL_GPIO_Init+0x310>)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007282:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <HAL_GPIO_Init+0x310>)
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	43db      	mvns	r3, r3
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4013      	ands	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80072a6:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <HAL_GPIO_Init+0x310>)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3301      	adds	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f47f ae97 	bne.w	8006ff0 <HAL_GPIO_Init+0x10>
  }
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40010000 	.word	0x40010000
 80072d8:	48000400 	.word	0x48000400
 80072dc:	48000800 	.word	0x48000800
 80072e0:	48000c00 	.word	0x48000c00
 80072e4:	48001000 	.word	0x48001000
 80072e8:	48001400 	.word	0x48001400
 80072ec:	48001800 	.word	0x48001800
 80072f0:	40010400 	.word	0x40010400

080072f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	807b      	strh	r3, [r7, #2]
 8007300:	4613      	mov	r3, r2
 8007302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007304:	787b      	ldrb	r3, [r7, #1]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800730a:	887a      	ldrh	r2, [r7, #2]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007310:	e002      	b.n	8007318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007312:	887a      	ldrh	r2, [r7, #2]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800732e:	4b08      	ldr	r3, [pc, #32]	; (8007350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007330:	695a      	ldr	r2, [r3, #20]
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	4013      	ands	r3, r2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800733a:	4a05      	ldr	r2, [pc, #20]	; (8007350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	4618      	mov	r0, r3
 8007344:	f7f9 fda0 	bl	8000e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40010400 	.word	0x40010400

08007354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800735a:	af00      	add	r7, sp, #0
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007360:	1d3b      	adds	r3, r7, #4
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	f000 bf01 	b.w	8008170 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8160 	beq.w	800763e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800737e:	4bae      	ldr	r3, [pc, #696]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	2b04      	cmp	r3, #4
 8007388:	d00c      	beq.n	80073a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800738a:	4bab      	ldr	r3, [pc, #684]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f003 030c 	and.w	r3, r3, #12
 8007392:	2b08      	cmp	r3, #8
 8007394:	d159      	bne.n	800744a <HAL_RCC_OscConfig+0xf6>
 8007396:	4ba8      	ldr	r3, [pc, #672]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800739e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a2:	d152      	bne.n	800744a <HAL_RCC_OscConfig+0xf6>
 80073a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80073b0:	fa93 f3a3 	rbit	r3, r3
 80073b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80073b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073bc:	fab3 f383 	clz	r3, r3
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d102      	bne.n	80073d6 <HAL_RCC_OscConfig+0x82>
 80073d0:	4b99      	ldr	r3, [pc, #612]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	e015      	b.n	8007402 <HAL_RCC_OscConfig+0xae>
 80073d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80073e2:	fa93 f3a3 	rbit	r3, r3
 80073e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80073ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80073f2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80073f6:	fa93 f3a3 	rbit	r3, r3
 80073fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80073fe:	4b8e      	ldr	r3, [pc, #568]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007406:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800740a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800740e:	fa92 f2a2 	rbit	r2, r2
 8007412:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8007416:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800741a:	fab2 f282 	clz	r2, r2
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	f042 0220 	orr.w	r2, r2, #32
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	f002 021f 	and.w	r2, r2, #31
 800742a:	2101      	movs	r1, #1
 800742c:	fa01 f202 	lsl.w	r2, r1, r2
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8102 	beq.w	800763c <HAL_RCC_OscConfig+0x2e8>
 8007438:	1d3b      	adds	r3, r7, #4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 80fc 	bne.w	800763c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f000 be93 	b.w	8008170 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007454:	d106      	bne.n	8007464 <HAL_RCC_OscConfig+0x110>
 8007456:	4b78      	ldr	r3, [pc, #480]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a77      	ldr	r2, [pc, #476]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 800745c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	e030      	b.n	80074c6 <HAL_RCC_OscConfig+0x172>
 8007464:	1d3b      	adds	r3, r7, #4
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10c      	bne.n	8007488 <HAL_RCC_OscConfig+0x134>
 800746e:	4b72      	ldr	r3, [pc, #456]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a71      	ldr	r2, [pc, #452]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	4b6f      	ldr	r3, [pc, #444]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a6e      	ldr	r2, [pc, #440]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	e01e      	b.n	80074c6 <HAL_RCC_OscConfig+0x172>
 8007488:	1d3b      	adds	r3, r7, #4
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007492:	d10c      	bne.n	80074ae <HAL_RCC_OscConfig+0x15a>
 8007494:	4b68      	ldr	r3, [pc, #416]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a67      	ldr	r2, [pc, #412]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 800749a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	4b65      	ldr	r3, [pc, #404]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a64      	ldr	r2, [pc, #400]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 80074a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	e00b      	b.n	80074c6 <HAL_RCC_OscConfig+0x172>
 80074ae:	4b62      	ldr	r3, [pc, #392]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a61      	ldr	r2, [pc, #388]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 80074b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	4b5f      	ldr	r3, [pc, #380]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a5e      	ldr	r2, [pc, #376]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 80074c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074c4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074c6:	1d3b      	adds	r3, r7, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d059      	beq.n	8007584 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d0:	f7fd fe54 	bl	800517c <HAL_GetTick>
 80074d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074d8:	e00a      	b.n	80074f0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074da:	f7fd fe4f 	bl	800517c <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b64      	cmp	r3, #100	; 0x64
 80074e8:	d902      	bls.n	80074f0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	f000 be40 	b.w	8008170 <HAL_RCC_OscConfig+0xe1c>
 80074f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80074fc:	fa93 f3a3 	rbit	r3, r3
 8007500:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8007504:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007508:	fab3 f383 	clz	r3, r3
 800750c:	b2db      	uxtb	r3, r3
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	d102      	bne.n	8007522 <HAL_RCC_OscConfig+0x1ce>
 800751c:	4b46      	ldr	r3, [pc, #280]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	e015      	b.n	800754e <HAL_RCC_OscConfig+0x1fa>
 8007522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007526:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800752a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800752e:	fa93 f3a3 	rbit	r3, r3
 8007532:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800753a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800753e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007542:	fa93 f3a3 	rbit	r3, r3
 8007546:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800754a:	4b3b      	ldr	r3, [pc, #236]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007552:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8007556:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800755a:	fa92 f2a2 	rbit	r2, r2
 800755e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8007562:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007566:	fab2 f282 	clz	r2, r2
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	f042 0220 	orr.w	r2, r2, #32
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	f002 021f 	and.w	r2, r2, #31
 8007576:	2101      	movs	r1, #1
 8007578:	fa01 f202 	lsl.w	r2, r1, r2
 800757c:	4013      	ands	r3, r2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0ab      	beq.n	80074da <HAL_RCC_OscConfig+0x186>
 8007582:	e05c      	b.n	800763e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007584:	f7fd fdfa 	bl	800517c <HAL_GetTick>
 8007588:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800758c:	e00a      	b.n	80075a4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800758e:	f7fd fdf5 	bl	800517c <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b64      	cmp	r3, #100	; 0x64
 800759c:	d902      	bls.n	80075a4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	f000 bde6 	b.w	8008170 <HAL_RCC_OscConfig+0xe1c>
 80075a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80075b0:	fa93 f3a3 	rbit	r3, r3
 80075b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80075b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075bc:	fab3 f383 	clz	r3, r3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d102      	bne.n	80075d6 <HAL_RCC_OscConfig+0x282>
 80075d0:	4b19      	ldr	r3, [pc, #100]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	e015      	b.n	8007602 <HAL_RCC_OscConfig+0x2ae>
 80075d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80075e2:	fa93 f3a3 	rbit	r3, r3
 80075e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80075ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80075f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80075f6:	fa93 f3a3 	rbit	r3, r3
 80075fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80075fe:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <HAL_RCC_OscConfig+0x2e4>)
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007606:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800760a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800760e:	fa92 f2a2 	rbit	r2, r2
 8007612:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8007616:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800761a:	fab2 f282 	clz	r2, r2
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	f042 0220 	orr.w	r2, r2, #32
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	f002 021f 	and.w	r2, r2, #31
 800762a:	2101      	movs	r1, #1
 800762c:	fa01 f202 	lsl.w	r2, r1, r2
 8007630:	4013      	ands	r3, r2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1ab      	bne.n	800758e <HAL_RCC_OscConfig+0x23a>
 8007636:	e002      	b.n	800763e <HAL_RCC_OscConfig+0x2ea>
 8007638:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800763e:	1d3b      	adds	r3, r7, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 8170 	beq.w	800792e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800764e:	4bd0      	ldr	r3, [pc, #832]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f003 030c 	and.w	r3, r3, #12
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00c      	beq.n	8007674 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800765a:	4bcd      	ldr	r3, [pc, #820]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f003 030c 	and.w	r3, r3, #12
 8007662:	2b08      	cmp	r3, #8
 8007664:	d16d      	bne.n	8007742 <HAL_RCC_OscConfig+0x3ee>
 8007666:	4bca      	ldr	r3, [pc, #808]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800766e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007672:	d166      	bne.n	8007742 <HAL_RCC_OscConfig+0x3ee>
 8007674:	2302      	movs	r3, #2
 8007676:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800767e:	fa93 f3a3 	rbit	r3, r3
 8007682:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8007686:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800768a:	fab3 f383 	clz	r3, r3
 800768e:	b2db      	uxtb	r3, r3
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f043 0301 	orr.w	r3, r3, #1
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b01      	cmp	r3, #1
 800769c:	d102      	bne.n	80076a4 <HAL_RCC_OscConfig+0x350>
 800769e:	4bbc      	ldr	r3, [pc, #752]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	e013      	b.n	80076cc <HAL_RCC_OscConfig+0x378>
 80076a4:	2302      	movs	r3, #2
 80076a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80076ae:	fa93 f3a3 	rbit	r3, r3
 80076b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80076b6:	2302      	movs	r3, #2
 80076b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80076bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80076c0:	fa93 f3a3 	rbit	r3, r3
 80076c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80076c8:	4bb1      	ldr	r3, [pc, #708]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2202      	movs	r2, #2
 80076ce:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80076d2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80076d6:	fa92 f2a2 	rbit	r2, r2
 80076da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80076de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80076e2:	fab2 f282 	clz	r2, r2
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	f042 0220 	orr.w	r2, r2, #32
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	f002 021f 	and.w	r2, r2, #31
 80076f2:	2101      	movs	r1, #1
 80076f4:	fa01 f202 	lsl.w	r2, r1, r2
 80076f8:	4013      	ands	r3, r2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d007      	beq.n	800770e <HAL_RCC_OscConfig+0x3ba>
 80076fe:	1d3b      	adds	r3, r7, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d002      	beq.n	800770e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f000 bd31 	b.w	8008170 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800770e:	4ba0      	ldr	r3, [pc, #640]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007716:	1d3b      	adds	r3, r7, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	21f8      	movs	r1, #248	; 0xf8
 800771e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007722:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8007726:	fa91 f1a1 	rbit	r1, r1
 800772a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800772e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007732:	fab1 f181 	clz	r1, r1
 8007736:	b2c9      	uxtb	r1, r1
 8007738:	408b      	lsls	r3, r1
 800773a:	4995      	ldr	r1, [pc, #596]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 800773c:	4313      	orrs	r3, r2
 800773e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007740:	e0f5      	b.n	800792e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007742:	1d3b      	adds	r3, r7, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8085 	beq.w	8007858 <HAL_RCC_OscConfig+0x504>
 800774e:	2301      	movs	r3, #1
 8007750:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007754:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8007758:	fa93 f3a3 	rbit	r3, r3
 800775c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8007760:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007764:	fab3 f383 	clz	r3, r3
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800776e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	461a      	mov	r2, r3
 8007776:	2301      	movs	r3, #1
 8007778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800777a:	f7fd fcff 	bl	800517c <HAL_GetTick>
 800777e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007782:	e00a      	b.n	800779a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007784:	f7fd fcfa 	bl	800517c <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d902      	bls.n	800779a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	f000 bceb 	b.w	8008170 <HAL_RCC_OscConfig+0xe1c>
 800779a:	2302      	movs	r3, #2
 800779c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80077a4:	fa93 f3a3 	rbit	r3, r3
 80077a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80077ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b0:	fab3 f383 	clz	r3, r3
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d102      	bne.n	80077ca <HAL_RCC_OscConfig+0x476>
 80077c4:	4b72      	ldr	r3, [pc, #456]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	e013      	b.n	80077f2 <HAL_RCC_OscConfig+0x49e>
 80077ca:	2302      	movs	r3, #2
 80077cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80077d4:	fa93 f3a3 	rbit	r3, r3
 80077d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80077dc:	2302      	movs	r3, #2
 80077de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80077e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80077e6:	fa93 f3a3 	rbit	r3, r3
 80077ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80077ee:	4b68      	ldr	r3, [pc, #416]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	2202      	movs	r2, #2
 80077f4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80077f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80077fc:	fa92 f2a2 	rbit	r2, r2
 8007800:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8007804:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007808:	fab2 f282 	clz	r2, r2
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	f042 0220 	orr.w	r2, r2, #32
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	f002 021f 	and.w	r2, r2, #31
 8007818:	2101      	movs	r1, #1
 800781a:	fa01 f202 	lsl.w	r2, r1, r2
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0af      	beq.n	8007784 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007824:	4b5a      	ldr	r3, [pc, #360]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800782c:	1d3b      	adds	r3, r7, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	21f8      	movs	r1, #248	; 0xf8
 8007834:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007838:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800783c:	fa91 f1a1 	rbit	r1, r1
 8007840:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8007844:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007848:	fab1 f181 	clz	r1, r1
 800784c:	b2c9      	uxtb	r1, r1
 800784e:	408b      	lsls	r3, r1
 8007850:	494f      	ldr	r1, [pc, #316]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 8007852:	4313      	orrs	r3, r2
 8007854:	600b      	str	r3, [r1, #0]
 8007856:	e06a      	b.n	800792e <HAL_RCC_OscConfig+0x5da>
 8007858:	2301      	movs	r3, #1
 800785a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007862:	fa93 f3a3 	rbit	r3, r3
 8007866:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800786a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800786e:	fab3 f383 	clz	r3, r3
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	461a      	mov	r2, r3
 8007880:	2300      	movs	r3, #0
 8007882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007884:	f7fd fc7a 	bl	800517c <HAL_GetTick>
 8007888:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800788c:	e00a      	b.n	80078a4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800788e:	f7fd fc75 	bl	800517c <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d902      	bls.n	80078a4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	f000 bc66 	b.w	8008170 <HAL_RCC_OscConfig+0xe1c>
 80078a4:	2302      	movs	r3, #2
 80078a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80078ae:	fa93 f3a3 	rbit	r3, r3
 80078b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80078b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ba:	fab3 f383 	clz	r3, r3
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d102      	bne.n	80078d4 <HAL_RCC_OscConfig+0x580>
 80078ce:	4b30      	ldr	r3, [pc, #192]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	e013      	b.n	80078fc <HAL_RCC_OscConfig+0x5a8>
 80078d4:	2302      	movs	r3, #2
 80078d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078de:	fa93 f3a3 	rbit	r3, r3
 80078e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80078e6:	2302      	movs	r3, #2
 80078e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078f0:	fa93 f3a3 	rbit	r3, r3
 80078f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80078f8:	4b25      	ldr	r3, [pc, #148]	; (8007990 <HAL_RCC_OscConfig+0x63c>)
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2202      	movs	r2, #2
 80078fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007902:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007906:	fa92 f2a2 	rbit	r2, r2
 800790a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800790e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007912:	fab2 f282 	clz	r2, r2
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	f042 0220 	orr.w	r2, r2, #32
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	f002 021f 	and.w	r2, r2, #31
 8007922:	2101      	movs	r1, #1
 8007924:	fa01 f202 	lsl.w	r2, r1, r2
 8007928:	4013      	ands	r3, r2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1af      	bne.n	800788e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800792e:	1d3b      	adds	r3, r7, #4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80da 	beq.w	8007af2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800793e:	1d3b      	adds	r3, r7, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d069      	beq.n	8007a1c <HAL_RCC_OscConfig+0x6c8>
 8007948:	2301      	movs	r3, #1
 800794a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007952:	fa93 f3a3 	rbit	r3, r3
 8007956:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800795a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800795e:	fab3 f383 	clz	r3, r3
 8007962:	b2db      	uxtb	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <HAL_RCC_OscConfig+0x640>)
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	461a      	mov	r2, r3
 800796e:	2301      	movs	r3, #1
 8007970:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007972:	f7fd fc03 	bl	800517c <HAL_GetTick>
 8007976:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800797a:	e00d      	b.n	8007998 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800797c:	f7fd fbfe 	bl	800517c <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d905      	bls.n	8007998 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e3ef      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
 8007990:	40021000 	.word	0x40021000
 8007994:	10908120 	.word	0x10908120
 8007998:	2302      	movs	r3, #2
 800799a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800799e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a2:	fa93 f2a3 	rbit	r2, r3
 80079a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80079b0:	2202      	movs	r2, #2
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	fa93 f2a3 	rbit	r2, r3
 80079be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80079c8:	2202      	movs	r2, #2
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	fa93 f2a3 	rbit	r2, r3
 80079d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80079da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079dc:	4ba4      	ldr	r3, [pc, #656]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 80079de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80079e4:	2102      	movs	r1, #2
 80079e6:	6019      	str	r1, [r3, #0]
 80079e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	fa93 f1a3 	rbit	r1, r3
 80079f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80079f6:	6019      	str	r1, [r3, #0]
  return result;
 80079f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	fab3 f383 	clz	r3, r3
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	2101      	movs	r1, #1
 8007a10:	fa01 f303 	lsl.w	r3, r1, r3
 8007a14:	4013      	ands	r3, r2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0b0      	beq.n	800797c <HAL_RCC_OscConfig+0x628>
 8007a1a:	e06a      	b.n	8007af2 <HAL_RCC_OscConfig+0x79e>
 8007a1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007a20:	2201      	movs	r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	fa93 f2a3 	rbit	r2, r3
 8007a2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007a32:	601a      	str	r2, [r3, #0]
  return result;
 8007a34:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007a38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a3a:	fab3 f383 	clz	r3, r3
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	4b8c      	ldr	r3, [pc, #560]	; (8007c74 <HAL_RCC_OscConfig+0x920>)
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a4e:	f7fd fb95 	bl	800517c <HAL_GetTick>
 8007a52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a56:	e009      	b.n	8007a6c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a58:	f7fd fb90 	bl	800517c <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d901      	bls.n	8007a6c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e381      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
 8007a6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007a70:	2202      	movs	r2, #2
 8007a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	fa93 f2a3 	rbit	r2, r3
 8007a7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007a88:	2202      	movs	r2, #2
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	fa93 f2a3 	rbit	r2, r3
 8007a96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	fa93 f2a3 	rbit	r2, r3
 8007aae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007ab2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ab4:	4b6e      	ldr	r3, [pc, #440]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ab8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007abc:	2102      	movs	r1, #2
 8007abe:	6019      	str	r1, [r3, #0]
 8007ac0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	fa93 f1a3 	rbit	r1, r3
 8007aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007ace:	6019      	str	r1, [r3, #0]
  return result;
 8007ad0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	fab3 f383 	clz	r3, r3
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aec:	4013      	ands	r3, r2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1b2      	bne.n	8007a58 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8157 	beq.w	8007db0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b02:	2300      	movs	r3, #0
 8007b04:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b08:	4b59      	ldr	r3, [pc, #356]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d112      	bne.n	8007b3a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b14:	4b56      	ldr	r3, [pc, #344]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	4a55      	ldr	r2, [pc, #340]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b1e:	61d3      	str	r3, [r2, #28]
 8007b20:	4b53      	ldr	r3, [pc, #332]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007b28:	f107 030c 	add.w	r3, r7, #12
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b3a:	4b4f      	ldr	r3, [pc, #316]	; (8007c78 <HAL_RCC_OscConfig+0x924>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d11a      	bne.n	8007b7c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b46:	4b4c      	ldr	r3, [pc, #304]	; (8007c78 <HAL_RCC_OscConfig+0x924>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a4b      	ldr	r2, [pc, #300]	; (8007c78 <HAL_RCC_OscConfig+0x924>)
 8007b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b52:	f7fd fb13 	bl	800517c <HAL_GetTick>
 8007b56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b5a:	e009      	b.n	8007b70 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b5c:	f7fd fb0e 	bl	800517c <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b64      	cmp	r3, #100	; 0x64
 8007b6a:	d901      	bls.n	8007b70 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e2ff      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b70:	4b41      	ldr	r3, [pc, #260]	; (8007c78 <HAL_RCC_OscConfig+0x924>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0ef      	beq.n	8007b5c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b7c:	1d3b      	adds	r3, r7, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d106      	bne.n	8007b94 <HAL_RCC_OscConfig+0x840>
 8007b86:	4b3a      	ldr	r3, [pc, #232]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	4a39      	ldr	r2, [pc, #228]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007b8c:	f043 0301 	orr.w	r3, r3, #1
 8007b90:	6213      	str	r3, [r2, #32]
 8007b92:	e02f      	b.n	8007bf4 <HAL_RCC_OscConfig+0x8a0>
 8007b94:	1d3b      	adds	r3, r7, #4
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10c      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x864>
 8007b9e:	4b34      	ldr	r3, [pc, #208]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	4a33      	ldr	r2, [pc, #204]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007ba4:	f023 0301 	bic.w	r3, r3, #1
 8007ba8:	6213      	str	r3, [r2, #32]
 8007baa:	4b31      	ldr	r3, [pc, #196]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	4a30      	ldr	r2, [pc, #192]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bb0:	f023 0304 	bic.w	r3, r3, #4
 8007bb4:	6213      	str	r3, [r2, #32]
 8007bb6:	e01d      	b.n	8007bf4 <HAL_RCC_OscConfig+0x8a0>
 8007bb8:	1d3b      	adds	r3, r7, #4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	d10c      	bne.n	8007bdc <HAL_RCC_OscConfig+0x888>
 8007bc2:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	4a2a      	ldr	r2, [pc, #168]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bc8:	f043 0304 	orr.w	r3, r3, #4
 8007bcc:	6213      	str	r3, [r2, #32]
 8007bce:	4b28      	ldr	r3, [pc, #160]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	4a27      	ldr	r2, [pc, #156]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bd4:	f043 0301 	orr.w	r3, r3, #1
 8007bd8:	6213      	str	r3, [r2, #32]
 8007bda:	e00b      	b.n	8007bf4 <HAL_RCC_OscConfig+0x8a0>
 8007bdc:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	4a23      	ldr	r2, [pc, #140]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007be2:	f023 0301 	bic.w	r3, r3, #1
 8007be6:	6213      	str	r3, [r2, #32]
 8007be8:	4b21      	ldr	r3, [pc, #132]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	4a20      	ldr	r2, [pc, #128]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007bee:	f023 0304 	bic.w	r3, r3, #4
 8007bf2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007bf4:	1d3b      	adds	r3, r7, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d06a      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bfe:	f7fd fabd 	bl	800517c <HAL_GetTick>
 8007c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c06:	e00b      	b.n	8007c20 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c08:	f7fd fab8 	bl	800517c <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d901      	bls.n	8007c20 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e2a7      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
 8007c20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c24:	2202      	movs	r2, #2
 8007c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	fa93 f2a3 	rbit	r2, r3
 8007c32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	fa93 f2a3 	rbit	r2, r3
 8007c4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007c4e:	601a      	str	r2, [r3, #0]
  return result;
 8007c50:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007c54:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c56:	fab3 f383 	clz	r3, r3
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f043 0302 	orr.w	r3, r3, #2
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d108      	bne.n	8007c7c <HAL_RCC_OscConfig+0x928>
 8007c6a:	4b01      	ldr	r3, [pc, #4]	; (8007c70 <HAL_RCC_OscConfig+0x91c>)
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	e013      	b.n	8007c98 <HAL_RCC_OscConfig+0x944>
 8007c70:	40021000 	.word	0x40021000
 8007c74:	10908120 	.word	0x10908120
 8007c78:	40007000 	.word	0x40007000
 8007c7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007c80:	2202      	movs	r2, #2
 8007c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	fa93 f2a3 	rbit	r2, r3
 8007c8e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	4bc0      	ldr	r3, [pc, #768]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007c9c:	2102      	movs	r1, #2
 8007c9e:	6011      	str	r1, [r2, #0]
 8007ca0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	fa92 f1a2 	rbit	r1, r2
 8007caa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007cae:	6011      	str	r1, [r2, #0]
  return result;
 8007cb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	fab2 f282 	clz	r2, r2
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc0:	b2d2      	uxtb	r2, r2
 8007cc2:	f002 021f 	and.w	r2, r2, #31
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d09a      	beq.n	8007c08 <HAL_RCC_OscConfig+0x8b4>
 8007cd2:	e063      	b.n	8007d9c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cd4:	f7fd fa52 	bl	800517c <HAL_GetTick>
 8007cd8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cdc:	e00b      	b.n	8007cf6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cde:	f7fd fa4d 	bl	800517c <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e23c      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
 8007cf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	fa93 f2a3 	rbit	r2, r3
 8007d08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007d12:	2202      	movs	r2, #2
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	fa93 f2a3 	rbit	r2, r3
 8007d20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007d24:	601a      	str	r2, [r3, #0]
  return result;
 8007d26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007d2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d2c:	fab3 f383 	clz	r3, r3
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	095b      	lsrs	r3, r3, #5
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	f043 0302 	orr.w	r3, r3, #2
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d102      	bne.n	8007d46 <HAL_RCC_OscConfig+0x9f2>
 8007d40:	4b95      	ldr	r3, [pc, #596]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	e00d      	b.n	8007d62 <HAL_RCC_OscConfig+0xa0e>
 8007d46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	fa93 f2a3 	rbit	r2, r3
 8007d58:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	4b8e      	ldr	r3, [pc, #568]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8007d66:	2102      	movs	r1, #2
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	fa92 f1a2 	rbit	r1, r2
 8007d74:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007d78:	6011      	str	r1, [r2, #0]
  return result;
 8007d7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007d7e:	6812      	ldr	r2, [r2, #0]
 8007d80:	fab2 f282 	clz	r2, r2
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	f002 021f 	and.w	r2, r2, #31
 8007d90:	2101      	movs	r1, #1
 8007d92:	fa01 f202 	lsl.w	r2, r1, r2
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1a0      	bne.n	8007cde <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d9c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d105      	bne.n	8007db0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007da4:	4b7c      	ldr	r3, [pc, #496]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	4a7b      	ldr	r2, [pc, #492]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007db0:	1d3b      	adds	r3, r7, #4
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 81d9 	beq.w	800816e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dbc:	4b76      	ldr	r3, [pc, #472]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f003 030c 	and.w	r3, r3, #12
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	f000 81a6 	beq.w	8008116 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dca:	1d3b      	adds	r3, r7, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	f040 811e 	bne.w	8008012 <HAL_RCC_OscConfig+0xcbe>
 8007dd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007dda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	fa93 f2a3 	rbit	r2, r3
 8007dea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007dee:	601a      	str	r2, [r3, #0]
  return result;
 8007df0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007df4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007df6:	fab3 f383 	clz	r3, r3
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	461a      	mov	r2, r3
 8007e08:	2300      	movs	r3, #0
 8007e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e0c:	f7fd f9b6 	bl	800517c <HAL_GetTick>
 8007e10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e14:	e009      	b.n	8007e2a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e16:	f7fd f9b1 	bl	800517c <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e1a2      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
 8007e2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	fa93 f2a3 	rbit	r2, r3
 8007e3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007e42:	601a      	str	r2, [r3, #0]
  return result;
 8007e44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007e48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e4a:	fab3 f383 	clz	r3, r3
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	f043 0301 	orr.w	r3, r3, #1
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d102      	bne.n	8007e64 <HAL_RCC_OscConfig+0xb10>
 8007e5e:	4b4e      	ldr	r3, [pc, #312]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	e01b      	b.n	8007e9c <HAL_RCC_OscConfig+0xb48>
 8007e64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	fa93 f2a3 	rbit	r2, r3
 8007e78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	fa93 f2a3 	rbit	r2, r3
 8007e92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	4b3f      	ldr	r3, [pc, #252]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007ea0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007ea4:	6011      	str	r1, [r2, #0]
 8007ea6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	fa92 f1a2 	rbit	r1, r2
 8007eb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007eb4:	6011      	str	r1, [r2, #0]
  return result;
 8007eb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	fab2 f282 	clz	r2, r2
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	f042 0220 	orr.w	r2, r2, #32
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	f002 021f 	and.w	r2, r2, #31
 8007ecc:	2101      	movs	r1, #1
 8007ece:	fa01 f202 	lsl.w	r2, r1, r2
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d19e      	bne.n	8007e16 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ed8:	4b2f      	ldr	r3, [pc, #188]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	f023 020f 	bic.w	r2, r3, #15
 8007ee0:	1d3b      	adds	r3, r7, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	492c      	ldr	r1, [pc, #176]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007eec:	4b2a      	ldr	r3, [pc, #168]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8007ef4:	1d3b      	adds	r3, r7, #4
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6a19      	ldr	r1, [r3, #32]
 8007efa:	1d3b      	adds	r3, r7, #4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	430b      	orrs	r3, r1
 8007f02:	4925      	ldr	r1, [pc, #148]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	604b      	str	r3, [r1, #4]
 8007f08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	fa93 f2a3 	rbit	r2, r3
 8007f1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f20:	601a      	str	r2, [r3, #0]
  return result;
 8007f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f28:	fab3 f383 	clz	r3, r3
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f3e:	f7fd f91d 	bl	800517c <HAL_GetTick>
 8007f42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f46:	e009      	b.n	8007f5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f48:	f7fd f918 	bl	800517c <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e109      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
 8007f5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	fa93 f2a3 	rbit	r2, r3
 8007f70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f74:	601a      	str	r2, [r3, #0]
  return result;
 8007f76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f7c:	fab3 f383 	clz	r3, r3
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d105      	bne.n	8007f9c <HAL_RCC_OscConfig+0xc48>
 8007f90:	4b01      	ldr	r3, [pc, #4]	; (8007f98 <HAL_RCC_OscConfig+0xc44>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	e01e      	b.n	8007fd4 <HAL_RCC_OscConfig+0xc80>
 8007f96:	bf00      	nop
 8007f98:	40021000 	.word	0x40021000
 8007f9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	fa93 f2a3 	rbit	r2, r3
 8007fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	fa93 f2a3 	rbit	r2, r3
 8007fca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	4b6a      	ldr	r3, [pc, #424]	; (800817c <HAL_RCC_OscConfig+0xe28>)
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007fd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007fdc:	6011      	str	r1, [r2, #0]
 8007fde:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007fe2:	6812      	ldr	r2, [r2, #0]
 8007fe4:	fa92 f1a2 	rbit	r1, r2
 8007fe8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007fec:	6011      	str	r1, [r2, #0]
  return result;
 8007fee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	fab2 f282 	clz	r2, r2
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	f042 0220 	orr.w	r2, r2, #32
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	f002 021f 	and.w	r2, r2, #31
 8008004:	2101      	movs	r1, #1
 8008006:	fa01 f202 	lsl.w	r2, r1, r2
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d09b      	beq.n	8007f48 <HAL_RCC_OscConfig+0xbf4>
 8008010:	e0ad      	b.n	800816e <HAL_RCC_OscConfig+0xe1a>
 8008012:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008016:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800801a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800801c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	fa93 f2a3 	rbit	r2, r3
 8008026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800802a:	601a      	str	r2, [r3, #0]
  return result;
 800802c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008030:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008032:	fab3 f383 	clz	r3, r3
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800803c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	461a      	mov	r2, r3
 8008044:	2300      	movs	r3, #0
 8008046:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008048:	f7fd f898 	bl	800517c <HAL_GetTick>
 800804c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008050:	e009      	b.n	8008066 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008052:	f7fd f893 	bl	800517c <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e084      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
 8008066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800806a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800806e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	fa93 f2a3 	rbit	r2, r3
 800807a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800807e:	601a      	str	r2, [r3, #0]
  return result;
 8008080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008084:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008086:	fab3 f383 	clz	r3, r3
 800808a:	b2db      	uxtb	r3, r3
 800808c:	095b      	lsrs	r3, r3, #5
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f043 0301 	orr.w	r3, r3, #1
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b01      	cmp	r3, #1
 8008098:	d102      	bne.n	80080a0 <HAL_RCC_OscConfig+0xd4c>
 800809a:	4b38      	ldr	r3, [pc, #224]	; (800817c <HAL_RCC_OscConfig+0xe28>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	e01b      	b.n	80080d8 <HAL_RCC_OscConfig+0xd84>
 80080a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	fa93 f2a3 	rbit	r2, r3
 80080b4:	f107 0320 	add.w	r3, r7, #32
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	f107 031c 	add.w	r3, r7, #28
 80080be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f107 031c 	add.w	r3, r7, #28
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	fa93 f2a3 	rbit	r2, r3
 80080ce:	f107 0318 	add.w	r3, r7, #24
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	4b29      	ldr	r3, [pc, #164]	; (800817c <HAL_RCC_OscConfig+0xe28>)
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	f107 0214 	add.w	r2, r7, #20
 80080dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	f107 0214 	add.w	r2, r7, #20
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	fa92 f1a2 	rbit	r1, r2
 80080ec:	f107 0210 	add.w	r2, r7, #16
 80080f0:	6011      	str	r1, [r2, #0]
  return result;
 80080f2:	f107 0210 	add.w	r2, r7, #16
 80080f6:	6812      	ldr	r2, [r2, #0]
 80080f8:	fab2 f282 	clz	r2, r2
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	f042 0220 	orr.w	r2, r2, #32
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	f002 021f 	and.w	r2, r2, #31
 8008108:	2101      	movs	r1, #1
 800810a:	fa01 f202 	lsl.w	r2, r1, r2
 800810e:	4013      	ands	r3, r2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d19e      	bne.n	8008052 <HAL_RCC_OscConfig+0xcfe>
 8008114:	e02b      	b.n	800816e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008116:	1d3b      	adds	r3, r7, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e025      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008124:	4b15      	ldr	r3, [pc, #84]	; (800817c <HAL_RCC_OscConfig+0xe28>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800812c:	4b13      	ldr	r3, [pc, #76]	; (800817c <HAL_RCC_OscConfig+0xe28>)
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008134:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008138:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800813c:	1d3b      	adds	r3, r7, #4
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	429a      	cmp	r2, r3
 8008144:	d111      	bne.n	800816a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8008146:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800814a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008154:	429a      	cmp	r2, r3
 8008156:	d108      	bne.n	800816a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8008158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800815c:	f003 020f 	and.w	r2, r3, #15
 8008160:	1d3b      	adds	r3, r7, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8008166:	429a      	cmp	r2, r3
 8008168:	d001      	beq.n	800816e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40021000 	.word	0x40021000

08008180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b09e      	sub	sp, #120	; 0x78
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e162      	b.n	800845e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008198:	4b90      	ldr	r3, [pc, #576]	; (80083dc <HAL_RCC_ClockConfig+0x25c>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d910      	bls.n	80081c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a6:	4b8d      	ldr	r3, [pc, #564]	; (80083dc <HAL_RCC_ClockConfig+0x25c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f023 0207 	bic.w	r2, r3, #7
 80081ae:	498b      	ldr	r1, [pc, #556]	; (80083dc <HAL_RCC_ClockConfig+0x25c>)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b6:	4b89      	ldr	r3, [pc, #548]	; (80083dc <HAL_RCC_ClockConfig+0x25c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d001      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e14a      	b.n	800845e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d008      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081d4:	4b82      	ldr	r3, [pc, #520]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	497f      	ldr	r1, [pc, #508]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80dc 	beq.w	80083ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d13c      	bne.n	8008276 <HAL_RCC_ClockConfig+0xf6>
 80081fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008200:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008204:	fa93 f3a3 	rbit	r3, r3
 8008208:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800820a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800820c:	fab3 f383 	clz	r3, r3
 8008210:	b2db      	uxtb	r3, r3
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	b2db      	uxtb	r3, r3
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b01      	cmp	r3, #1
 800821e:	d102      	bne.n	8008226 <HAL_RCC_ClockConfig+0xa6>
 8008220:	4b6f      	ldr	r3, [pc, #444]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	e00f      	b.n	8008246 <HAL_RCC_ClockConfig+0xc6>
 8008226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800822a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800822c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800822e:	fa93 f3a3 	rbit	r3, r3
 8008232:	667b      	str	r3, [r7, #100]	; 0x64
 8008234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008238:	663b      	str	r3, [r7, #96]	; 0x60
 800823a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800823c:	fa93 f3a3 	rbit	r3, r3
 8008240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008242:	4b67      	ldr	r3, [pc, #412]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800824a:	65ba      	str	r2, [r7, #88]	; 0x58
 800824c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800824e:	fa92 f2a2 	rbit	r2, r2
 8008252:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008256:	fab2 f282 	clz	r2, r2
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	f042 0220 	orr.w	r2, r2, #32
 8008260:	b2d2      	uxtb	r2, r2
 8008262:	f002 021f 	and.w	r2, r2, #31
 8008266:	2101      	movs	r1, #1
 8008268:	fa01 f202 	lsl.w	r2, r1, r2
 800826c:	4013      	ands	r3, r2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d17b      	bne.n	800836a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e0f3      	b.n	800845e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d13c      	bne.n	80082f8 <HAL_RCC_ClockConfig+0x178>
 800827e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008282:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008286:	fa93 f3a3 	rbit	r3, r3
 800828a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800828c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800828e:	fab3 f383 	clz	r3, r3
 8008292:	b2db      	uxtb	r3, r3
 8008294:	095b      	lsrs	r3, r3, #5
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d102      	bne.n	80082a8 <HAL_RCC_ClockConfig+0x128>
 80082a2:	4b4f      	ldr	r3, [pc, #316]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	e00f      	b.n	80082c8 <HAL_RCC_ClockConfig+0x148>
 80082a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b0:	fa93 f3a3 	rbit	r3, r3
 80082b4:	647b      	str	r3, [r7, #68]	; 0x44
 80082b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082ba:	643b      	str	r3, [r7, #64]	; 0x40
 80082bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082be:	fa93 f3a3 	rbit	r3, r3
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c4:	4b46      	ldr	r3, [pc, #280]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80082ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d0:	fa92 f2a2 	rbit	r2, r2
 80082d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80082d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d8:	fab2 f282 	clz	r2, r2
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	f042 0220 	orr.w	r2, r2, #32
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	f002 021f 	and.w	r2, r2, #31
 80082e8:	2101      	movs	r1, #1
 80082ea:	fa01 f202 	lsl.w	r2, r1, r2
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d13a      	bne.n	800836a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e0b2      	b.n	800845e <HAL_RCC_ClockConfig+0x2de>
 80082f8:	2302      	movs	r3, #2
 80082fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	fa93 f3a3 	rbit	r3, r3
 8008302:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008306:	fab3 f383 	clz	r3, r3
 800830a:	b2db      	uxtb	r3, r3
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b01      	cmp	r3, #1
 8008318:	d102      	bne.n	8008320 <HAL_RCC_ClockConfig+0x1a0>
 800831a:	4b31      	ldr	r3, [pc, #196]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	e00d      	b.n	800833c <HAL_RCC_ClockConfig+0x1bc>
 8008320:	2302      	movs	r3, #2
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	fa93 f3a3 	rbit	r3, r3
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
 800832c:	2302      	movs	r3, #2
 800832e:	623b      	str	r3, [r7, #32]
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	fa93 f3a3 	rbit	r3, r3
 8008336:	61fb      	str	r3, [r7, #28]
 8008338:	4b29      	ldr	r3, [pc, #164]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	2202      	movs	r2, #2
 800833e:	61ba      	str	r2, [r7, #24]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	fa92 f2a2 	rbit	r2, r2
 8008346:	617a      	str	r2, [r7, #20]
  return result;
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	fab2 f282 	clz	r2, r2
 800834e:	b2d2      	uxtb	r2, r2
 8008350:	f042 0220 	orr.w	r2, r2, #32
 8008354:	b2d2      	uxtb	r2, r2
 8008356:	f002 021f 	and.w	r2, r2, #31
 800835a:	2101      	movs	r1, #1
 800835c:	fa01 f202 	lsl.w	r2, r1, r2
 8008360:	4013      	ands	r3, r2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e079      	b.n	800845e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800836a:	4b1d      	ldr	r3, [pc, #116]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f023 0203 	bic.w	r2, r3, #3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	491a      	ldr	r1, [pc, #104]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 8008378:	4313      	orrs	r3, r2
 800837a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800837c:	f7fc fefe 	bl	800517c <HAL_GetTick>
 8008380:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008382:	e00a      	b.n	800839a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008384:	f7fc fefa 	bl	800517c <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008392:	4293      	cmp	r3, r2
 8008394:	d901      	bls.n	800839a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e061      	b.n	800845e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800839a:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <HAL_RCC_ClockConfig+0x260>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f003 020c 	and.w	r2, r3, #12
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d1eb      	bne.n	8008384 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <HAL_RCC_ClockConfig+0x25c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0307 	and.w	r3, r3, #7
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d214      	bcs.n	80083e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ba:	4b08      	ldr	r3, [pc, #32]	; (80083dc <HAL_RCC_ClockConfig+0x25c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f023 0207 	bic.w	r2, r3, #7
 80083c2:	4906      	ldr	r1, [pc, #24]	; (80083dc <HAL_RCC_ClockConfig+0x25c>)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ca:	4b04      	ldr	r3, [pc, #16]	; (80083dc <HAL_RCC_ClockConfig+0x25c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d005      	beq.n	80083e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e040      	b.n	800845e <HAL_RCC_ClockConfig+0x2de>
 80083dc:	40022000 	.word	0x40022000
 80083e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d008      	beq.n	8008402 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083f0:	4b1d      	ldr	r3, [pc, #116]	; (8008468 <HAL_RCC_ClockConfig+0x2e8>)
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	491a      	ldr	r1, [pc, #104]	; (8008468 <HAL_RCC_ClockConfig+0x2e8>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0308 	and.w	r3, r3, #8
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800840e:	4b16      	ldr	r3, [pc, #88]	; (8008468 <HAL_RCC_ClockConfig+0x2e8>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	00db      	lsls	r3, r3, #3
 800841c:	4912      	ldr	r1, [pc, #72]	; (8008468 <HAL_RCC_ClockConfig+0x2e8>)
 800841e:	4313      	orrs	r3, r2
 8008420:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008422:	f000 f829 	bl	8008478 <HAL_RCC_GetSysClockFreq>
 8008426:	4601      	mov	r1, r0
 8008428:	4b0f      	ldr	r3, [pc, #60]	; (8008468 <HAL_RCC_ClockConfig+0x2e8>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008430:	22f0      	movs	r2, #240	; 0xf0
 8008432:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	fa92 f2a2 	rbit	r2, r2
 800843a:	60fa      	str	r2, [r7, #12]
  return result;
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	fab2 f282 	clz	r2, r2
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	40d3      	lsrs	r3, r2
 8008446:	4a09      	ldr	r2, [pc, #36]	; (800846c <HAL_RCC_ClockConfig+0x2ec>)
 8008448:	5cd3      	ldrb	r3, [r2, r3]
 800844a:	fa21 f303 	lsr.w	r3, r1, r3
 800844e:	4a08      	ldr	r2, [pc, #32]	; (8008470 <HAL_RCC_ClockConfig+0x2f0>)
 8008450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008452:	4b08      	ldr	r3, [pc, #32]	; (8008474 <HAL_RCC_ClockConfig+0x2f4>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7fc fe4c 	bl	80050f4 <HAL_InitTick>
  
  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3778      	adds	r7, #120	; 0x78
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40021000 	.word	0x40021000
 800846c:	0800c334 	.word	0x0800c334
 8008470:	2000005c 	.word	0x2000005c
 8008474:	20000060 	.word	0x20000060

08008478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008478:	b480      	push	{r7}
 800847a:	b08b      	sub	sp, #44	; 0x2c
 800847c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	2300      	movs	r3, #0
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	2300      	movs	r3, #0
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008492:	4b2a      	ldr	r3, [pc, #168]	; (800853c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f003 030c 	and.w	r3, r3, #12
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d002      	beq.n	80084a8 <HAL_RCC_GetSysClockFreq+0x30>
 80084a2:	2b08      	cmp	r3, #8
 80084a4:	d003      	beq.n	80084ae <HAL_RCC_GetSysClockFreq+0x36>
 80084a6:	e03f      	b.n	8008528 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80084a8:	4b25      	ldr	r3, [pc, #148]	; (8008540 <HAL_RCC_GetSysClockFreq+0xc8>)
 80084aa:	623b      	str	r3, [r7, #32]
      break;
 80084ac:	e03f      	b.n	800852e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80084b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80084b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	fa92 f2a2 	rbit	r2, r2
 80084c0:	607a      	str	r2, [r7, #4]
  return result;
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	fab2 f282 	clz	r2, r2
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	40d3      	lsrs	r3, r2
 80084cc:	4a1d      	ldr	r2, [pc, #116]	; (8008544 <HAL_RCC_GetSysClockFreq+0xcc>)
 80084ce:	5cd3      	ldrb	r3, [r2, r3]
 80084d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80084d2:	4b1a      	ldr	r3, [pc, #104]	; (800853c <HAL_RCC_GetSysClockFreq+0xc4>)
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	220f      	movs	r2, #15
 80084dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	fa92 f2a2 	rbit	r2, r2
 80084e4:	60fa      	str	r2, [r7, #12]
  return result;
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	fab2 f282 	clz	r2, r2
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	40d3      	lsrs	r3, r2
 80084f0:	4a15      	ldr	r2, [pc, #84]	; (8008548 <HAL_RCC_GetSysClockFreq+0xd0>)
 80084f2:	5cd3      	ldrb	r3, [r2, r3]
 80084f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d008      	beq.n	8008512 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008500:	4a0f      	ldr	r2, [pc, #60]	; (8008540 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	fbb2 f2f3 	udiv	r2, r2, r3
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
 8008510:	e007      	b.n	8008522 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008512:	4a0b      	ldr	r2, [pc, #44]	; (8008540 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	fbb2 f2f3 	udiv	r2, r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	fb02 f303 	mul.w	r3, r2, r3
 8008520:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	623b      	str	r3, [r7, #32]
      break;
 8008526:	e002      	b.n	800852e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008528:	4b05      	ldr	r3, [pc, #20]	; (8008540 <HAL_RCC_GetSysClockFreq+0xc8>)
 800852a:	623b      	str	r3, [r7, #32]
      break;
 800852c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800852e:	6a3b      	ldr	r3, [r7, #32]
}
 8008530:	4618      	mov	r0, r3
 8008532:	372c      	adds	r7, #44	; 0x2c
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	40021000 	.word	0x40021000
 8008540:	007a1200 	.word	0x007a1200
 8008544:	0800c34c 	.word	0x0800c34c
 8008548:	0800c35c 	.word	0x0800c35c

0800854c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008550:	4b03      	ldr	r3, [pc, #12]	; (8008560 <HAL_RCC_GetHCLKFreq+0x14>)
 8008552:	681b      	ldr	r3, [r3, #0]
}
 8008554:	4618      	mov	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	2000005c 	.word	0x2000005c

08008564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800856a:	f7ff ffef 	bl	800854c <HAL_RCC_GetHCLKFreq>
 800856e:	4601      	mov	r1, r0
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008578:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800857c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	fa92 f2a2 	rbit	r2, r2
 8008584:	603a      	str	r2, [r7, #0]
  return result;
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	fab2 f282 	clz	r2, r2
 800858c:	b2d2      	uxtb	r2, r2
 800858e:	40d3      	lsrs	r3, r2
 8008590:	4a04      	ldr	r2, [pc, #16]	; (80085a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008592:	5cd3      	ldrb	r3, [r2, r3]
 8008594:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	40021000 	.word	0x40021000
 80085a4:	0800c344 	.word	0x0800c344

080085a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80085ae:	f7ff ffcd 	bl	800854c <HAL_RCC_GetHCLKFreq>
 80085b2:	4601      	mov	r1, r0
 80085b4:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80085bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80085c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	fa92 f2a2 	rbit	r2, r2
 80085c8:	603a      	str	r2, [r7, #0]
  return result;
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	fab2 f282 	clz	r2, r2
 80085d0:	b2d2      	uxtb	r2, r2
 80085d2:	40d3      	lsrs	r3, r2
 80085d4:	4a04      	ldr	r2, [pc, #16]	; (80085e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80085d6:	5cd3      	ldrb	r3, [r2, r3]
 80085d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	40021000 	.word	0x40021000
 80085e8:	0800c344 	.word	0x0800c344

080085ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b092      	sub	sp, #72	; 0x48
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 80d4 	beq.w	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008610:	4b4e      	ldr	r3, [pc, #312]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10e      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800861c:	4b4b      	ldr	r3, [pc, #300]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	4a4a      	ldr	r2, [pc, #296]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008626:	61d3      	str	r3, [r2, #28]
 8008628:	4b48      	ldr	r3, [pc, #288]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008630:	60bb      	str	r3, [r7, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800863a:	4b45      	ldr	r3, [pc, #276]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008642:	2b00      	cmp	r3, #0
 8008644:	d118      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008646:	4b42      	ldr	r3, [pc, #264]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a41      	ldr	r2, [pc, #260]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800864c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008650:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008652:	f7fc fd93 	bl	800517c <HAL_GetTick>
 8008656:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008658:	e008      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865a:	f7fc fd8f 	bl	800517c <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b64      	cmp	r3, #100	; 0x64
 8008666:	d901      	bls.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e1d6      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800866c:	4b38      	ldr	r3, [pc, #224]	; (8008750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0f0      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008678:	4b34      	ldr	r3, [pc, #208]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8084 	beq.w	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008694:	429a      	cmp	r2, r3
 8008696:	d07c      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008698:	4b2c      	ldr	r3, [pc, #176]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	fa93 f3a3 	rbit	r3, r3
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086b2:	fab3 f383 	clz	r3, r3
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	461a      	mov	r2, r3
 80086ba:	4b26      	ldr	r3, [pc, #152]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	461a      	mov	r2, r3
 80086c2:	2301      	movs	r3, #1
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	fa93 f3a3 	rbit	r3, r3
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086d6:	fab3 f383 	clz	r3, r3
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	461a      	mov	r2, r3
 80086e6:	2300      	movs	r3, #0
 80086e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80086ea:	4a18      	ldr	r2, [pc, #96]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80086f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d04b      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086fa:	f7fc fd3f 	bl	800517c <HAL_GetTick>
 80086fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008700:	e00a      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008702:	f7fc fd3b 	bl	800517c <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008710:	4293      	cmp	r3, r2
 8008712:	d901      	bls.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e180      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008718:	2302      	movs	r3, #2
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	fa93 f3a3 	rbit	r3, r3
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
 8008724:	2302      	movs	r3, #2
 8008726:	623b      	str	r3, [r7, #32]
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	fa93 f3a3 	rbit	r3, r3
 800872e:	61fb      	str	r3, [r7, #28]
  return result;
 8008730:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008732:	fab3 f383 	clz	r3, r3
 8008736:	b2db      	uxtb	r3, r3
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f043 0302 	orr.w	r3, r3, #2
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b02      	cmp	r3, #2
 8008744:	d108      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008746:	4b01      	ldr	r3, [pc, #4]	; (800874c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	e00d      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800874c:	40021000 	.word	0x40021000
 8008750:	40007000 	.word	0x40007000
 8008754:	10908100 	.word	0x10908100
 8008758:	2302      	movs	r3, #2
 800875a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	fa93 f3a3 	rbit	r3, r3
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	4ba0      	ldr	r3, [pc, #640]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	2202      	movs	r2, #2
 800876a:	613a      	str	r2, [r7, #16]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	fa92 f2a2 	rbit	r2, r2
 8008772:	60fa      	str	r2, [r7, #12]
  return result;
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	fab2 f282 	clz	r2, r2
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	f002 021f 	and.w	r2, r2, #31
 8008786:	2101      	movs	r1, #1
 8008788:	fa01 f202 	lsl.w	r2, r1, r2
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0b7      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008792:	4b95      	ldr	r3, [pc, #596]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	4992      	ldr	r1, [pc, #584]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80087a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d105      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087ac:	4b8e      	ldr	r3, [pc, #568]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	4a8d      	ldr	r2, [pc, #564]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80087b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087c4:	4b88      	ldr	r3, [pc, #544]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	f023 0203 	bic.w	r2, r3, #3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	4985      	ldr	r1, [pc, #532]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d008      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087e2:	4b81      	ldr	r3, [pc, #516]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	497e      	ldr	r1, [pc, #504]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d008      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008800:	4b79      	ldr	r3, [pc, #484]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	4976      	ldr	r1, [pc, #472]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800880e:	4313      	orrs	r3, r2
 8008810:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b00      	cmp	r3, #0
 800881c:	d008      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800881e:	4b72      	ldr	r3, [pc, #456]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f023 0210 	bic.w	r2, r3, #16
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	496f      	ldr	r1, [pc, #444]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800882c:	4313      	orrs	r3, r2
 800882e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d008      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800883c:	4b6a      	ldr	r3, [pc, #424]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008848:	4967      	ldr	r1, [pc, #412]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800884a:	4313      	orrs	r3, r2
 800884c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d008      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800885a:	4b63      	ldr	r3, [pc, #396]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	f023 0220 	bic.w	r2, r3, #32
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	4960      	ldr	r1, [pc, #384]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008868:	4313      	orrs	r3, r2
 800886a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008878:	4b5b      	ldr	r3, [pc, #364]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	4958      	ldr	r1, [pc, #352]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008886:	4313      	orrs	r3, r2
 8008888:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d008      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008896:	4b54      	ldr	r3, [pc, #336]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	4951      	ldr	r1, [pc, #324]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0310 	and.w	r3, r3, #16
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d008      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80088b4:	4b4c      	ldr	r3, [pc, #304]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	4949      	ldr	r1, [pc, #292]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d008      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80088d2:	4b45      	ldr	r3, [pc, #276]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	4942      	ldr	r1, [pc, #264]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d008      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80088f0:	4b3d      	ldr	r3, [pc, #244]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	493a      	ldr	r1, [pc, #232]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890a:	2b00      	cmp	r3, #0
 800890c:	d008      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800890e:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891a:	4933      	ldr	r1, [pc, #204]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800891c:	4313      	orrs	r3, r2
 800891e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d008      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800892c:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008938:	492b      	ldr	r1, [pc, #172]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800893a:	4313      	orrs	r3, r2
 800893c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d008      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800894a:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	4924      	ldr	r1, [pc, #144]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008958:	4313      	orrs	r3, r2
 800895a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008968:	4b1f      	ldr	r3, [pc, #124]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	491c      	ldr	r1, [pc, #112]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008976:	4313      	orrs	r3, r2
 8008978:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d008      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8008986:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	4915      	ldr	r1, [pc, #84]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8008994:	4313      	orrs	r3, r2
 8008996:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d008      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80089a4:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	490d      	ldr	r1, [pc, #52]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d008      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ce:	4906      	ldr	r1, [pc, #24]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00c      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80089e0:	4b01      	ldr	r3, [pc, #4]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	e002      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80089e6:	bf00      	nop
 80089e8:	40021000 	.word	0x40021000
 80089ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f4:	490b      	ldr	r1, [pc, #44]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d008      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8008a06:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a12:	4904      	ldr	r1, [pc, #16]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3748      	adds	r7, #72	; 0x48
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	40021000 	.word	0x40021000

08008a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e049      	b.n	8008ace <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d106      	bne.n	8008a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7fc f9c8 	bl	8004de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4619      	mov	r1, r3
 8008a66:	4610      	mov	r0, r2
 8008a68:	f000 fc28 	bl	80092bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d001      	beq.n	8008af0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e047      	b.n	8008b80 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a23      	ldr	r2, [pc, #140]	; (8008b8c <HAL_TIM_Base_Start+0xb4>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d01d      	beq.n	8008b3e <HAL_TIM_Base_Start+0x66>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0a:	d018      	beq.n	8008b3e <HAL_TIM_Base_Start+0x66>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1f      	ldr	r2, [pc, #124]	; (8008b90 <HAL_TIM_Base_Start+0xb8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d013      	beq.n	8008b3e <HAL_TIM_Base_Start+0x66>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1e      	ldr	r2, [pc, #120]	; (8008b94 <HAL_TIM_Base_Start+0xbc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00e      	beq.n	8008b3e <HAL_TIM_Base_Start+0x66>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a1c      	ldr	r2, [pc, #112]	; (8008b98 <HAL_TIM_Base_Start+0xc0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d009      	beq.n	8008b3e <HAL_TIM_Base_Start+0x66>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a1b      	ldr	r2, [pc, #108]	; (8008b9c <HAL_TIM_Base_Start+0xc4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d004      	beq.n	8008b3e <HAL_TIM_Base_Start+0x66>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a19      	ldr	r2, [pc, #100]	; (8008ba0 <HAL_TIM_Base_Start+0xc8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d115      	bne.n	8008b6a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	4b17      	ldr	r3, [pc, #92]	; (8008ba4 <HAL_TIM_Base_Start+0xcc>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	d015      	beq.n	8008b7c <HAL_TIM_Base_Start+0xa4>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b56:	d011      	beq.n	8008b7c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b68:	e008      	b.n	8008b7c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	e000      	b.n	8008b7e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	40012c00 	.word	0x40012c00
 8008b90:	40000400 	.word	0x40000400
 8008b94:	40000800 	.word	0x40000800
 8008b98:	40013400 	.word	0x40013400
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40015000 	.word	0x40015000
 8008ba4:	00010007 	.word	0x00010007

08008ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d001      	beq.n	8008bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e04f      	b.n	8008c60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a23      	ldr	r2, [pc, #140]	; (8008c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d01d      	beq.n	8008c1e <HAL_TIM_Base_Start_IT+0x76>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bea:	d018      	beq.n	8008c1e <HAL_TIM_Base_Start_IT+0x76>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a1f      	ldr	r2, [pc, #124]	; (8008c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d013      	beq.n	8008c1e <HAL_TIM_Base_Start_IT+0x76>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a1e      	ldr	r2, [pc, #120]	; (8008c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d00e      	beq.n	8008c1e <HAL_TIM_Base_Start_IT+0x76>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a1c      	ldr	r2, [pc, #112]	; (8008c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d009      	beq.n	8008c1e <HAL_TIM_Base_Start_IT+0x76>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a1b      	ldr	r2, [pc, #108]	; (8008c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d004      	beq.n	8008c1e <HAL_TIM_Base_Start_IT+0x76>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a19      	ldr	r2, [pc, #100]	; (8008c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d115      	bne.n	8008c4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	4b17      	ldr	r3, [pc, #92]	; (8008c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b06      	cmp	r3, #6
 8008c2e:	d015      	beq.n	8008c5c <HAL_TIM_Base_Start_IT+0xb4>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c36:	d011      	beq.n	8008c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0201 	orr.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c48:	e008      	b.n	8008c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0201 	orr.w	r2, r2, #1
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	e000      	b.n	8008c5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	40012c00 	.word	0x40012c00
 8008c70:	40000400 	.word	0x40000400
 8008c74:	40000800 	.word	0x40000800
 8008c78:	40013400 	.word	0x40013400
 8008c7c:	40014000 	.word	0x40014000
 8008c80:	40015000 	.word	0x40015000
 8008c84:	00010007 	.word	0x00010007

08008c88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0201 	bic.w	r2, r2, #1
 8008c9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6a1a      	ldr	r2, [r3, #32]
 8008ca6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008caa:	4013      	ands	r3, r2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10f      	bne.n	8008cd0 <HAL_TIM_Base_Stop_IT+0x48>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6a1a      	ldr	r2, [r3, #32]
 8008cb6:	f240 4344 	movw	r3, #1092	; 0x444
 8008cba:	4013      	ands	r3, r2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d107      	bne.n	8008cd0 <HAL_TIM_Base_Stop_IT+0x48>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 0201 	bic.w	r2, r2, #1
 8008cce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e049      	b.n	8008d8c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f841 	bl	8008d94 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2202      	movs	r2, #2
 8008d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3304      	adds	r3, #4
 8008d22:	4619      	mov	r1, r3
 8008d24:	4610      	mov	r0, r2
 8008d26:	f000 fac9 	bl	80092bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d122      	bne.n	8008e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f003 0302 	and.w	r3, r3, #2
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d11b      	bne.n	8008e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f06f 0202 	mvn.w	r2, #2
 8008dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa48 	bl	8009280 <HAL_TIM_IC_CaptureCallback>
 8008df0:	e005      	b.n	8008dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa3a 	bl	800926c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fa4b 	bl	8009294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0304 	and.w	r3, r3, #4
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d122      	bne.n	8008e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d11b      	bne.n	8008e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f06f 0204 	mvn.w	r2, #4
 8008e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa1e 	bl	8009280 <HAL_TIM_IC_CaptureCallback>
 8008e44:	e005      	b.n	8008e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa10 	bl	800926c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa21 	bl	8009294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0308 	and.w	r3, r3, #8
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	d122      	bne.n	8008eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0308 	and.w	r3, r3, #8
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	d11b      	bne.n	8008eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0208 	mvn.w	r2, #8
 8008e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2204      	movs	r2, #4
 8008e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f9f4 	bl	8009280 <HAL_TIM_IC_CaptureCallback>
 8008e98:	e005      	b.n	8008ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f9e6 	bl	800926c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f9f7 	bl	8009294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f003 0310 	and.w	r3, r3, #16
 8008eb6:	2b10      	cmp	r3, #16
 8008eb8:	d122      	bne.n	8008f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b10      	cmp	r3, #16
 8008ec6:	d11b      	bne.n	8008f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f06f 0210 	mvn.w	r2, #16
 8008ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2208      	movs	r2, #8
 8008ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f9ca 	bl	8009280 <HAL_TIM_IC_CaptureCallback>
 8008eec:	e005      	b.n	8008efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f9bc 	bl	800926c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f9cd 	bl	8009294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d10e      	bne.n	8008f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d107      	bne.n	8008f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f06f 0201 	mvn.w	r2, #1
 8008f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f996 	bl	8009258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f36:	2b80      	cmp	r3, #128	; 0x80
 8008f38:	d10e      	bne.n	8008f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f44:	2b80      	cmp	r3, #128	; 0x80
 8008f46:	d107      	bne.n	8008f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fe86 	bl	8009c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f66:	d10e      	bne.n	8008f86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f72:	2b80      	cmp	r3, #128	; 0x80
 8008f74:	d107      	bne.n	8008f86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fe79 	bl	8009c78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	d10e      	bne.n	8008fb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9e:	2b40      	cmp	r3, #64	; 0x40
 8008fa0:	d107      	bne.n	8008fb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f97b 	bl	80092a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f003 0320 	and.w	r3, r3, #32
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	d10e      	bne.n	8008fde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	d107      	bne.n	8008fde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f06f 0220 	mvn.w	r2, #32
 8008fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fe39 	bl	8009c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d101      	bne.n	8009006 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009002:	2302      	movs	r3, #2
 8009004:	e066      	b.n	80090d4 <HAL_TIM_OC_ConfigChannel+0xec>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b14      	cmp	r3, #20
 8009012:	d857      	bhi.n	80090c4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009014:	a201      	add	r2, pc, #4	; (adr r2, 800901c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901a:	bf00      	nop
 800901c:	08009071 	.word	0x08009071
 8009020:	080090c5 	.word	0x080090c5
 8009024:	080090c5 	.word	0x080090c5
 8009028:	080090c5 	.word	0x080090c5
 800902c:	0800907f 	.word	0x0800907f
 8009030:	080090c5 	.word	0x080090c5
 8009034:	080090c5 	.word	0x080090c5
 8009038:	080090c5 	.word	0x080090c5
 800903c:	0800908d 	.word	0x0800908d
 8009040:	080090c5 	.word	0x080090c5
 8009044:	080090c5 	.word	0x080090c5
 8009048:	080090c5 	.word	0x080090c5
 800904c:	0800909b 	.word	0x0800909b
 8009050:	080090c5 	.word	0x080090c5
 8009054:	080090c5 	.word	0x080090c5
 8009058:	080090c5 	.word	0x080090c5
 800905c:	080090a9 	.word	0x080090a9
 8009060:	080090c5 	.word	0x080090c5
 8009064:	080090c5 	.word	0x080090c5
 8009068:	080090c5 	.word	0x080090c5
 800906c:	080090b7 	.word	0x080090b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68b9      	ldr	r1, [r7, #8]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 f9be 	bl	80093f8 <TIM_OC1_SetConfig>
      break;
 800907c:	e025      	b.n	80090ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fa51 	bl	800952c <TIM_OC2_SetConfig>
      break;
 800908a:	e01e      	b.n	80090ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fade 	bl	8009654 <TIM_OC3_SetConfig>
      break;
 8009098:	e017      	b.n	80090ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 fb69 	bl	8009778 <TIM_OC4_SetConfig>
      break;
 80090a6:	e010      	b.n	80090ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fbd2 	bl	8009858 <TIM_OC5_SetConfig>
      break;
 80090b4:	e009      	b.n	80090ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 fc35 	bl	800992c <TIM_OC6_SetConfig>
      break;
 80090c2:	e002      	b.n	80090ca <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
      break;
 80090c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d101      	bne.n	80090f8 <HAL_TIM_ConfigClockSource+0x1c>
 80090f4:	2302      	movs	r3, #2
 80090f6:	e0ab      	b.n	8009250 <HAL_TIM_ConfigClockSource+0x174>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800911a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b40      	cmp	r3, #64	; 0x40
 8009132:	d067      	beq.n	8009204 <HAL_TIM_ConfigClockSource+0x128>
 8009134:	2b40      	cmp	r3, #64	; 0x40
 8009136:	d80b      	bhi.n	8009150 <HAL_TIM_ConfigClockSource+0x74>
 8009138:	2b10      	cmp	r3, #16
 800913a:	d073      	beq.n	8009224 <HAL_TIM_ConfigClockSource+0x148>
 800913c:	2b10      	cmp	r3, #16
 800913e:	d802      	bhi.n	8009146 <HAL_TIM_ConfigClockSource+0x6a>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d06f      	beq.n	8009224 <HAL_TIM_ConfigClockSource+0x148>
 8009144:	e077      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x15a>
 8009146:	2b20      	cmp	r3, #32
 8009148:	d06c      	beq.n	8009224 <HAL_TIM_ConfigClockSource+0x148>
 800914a:	2b30      	cmp	r3, #48	; 0x30
 800914c:	d06a      	beq.n	8009224 <HAL_TIM_ConfigClockSource+0x148>
 800914e:	e072      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x15a>
 8009150:	2b70      	cmp	r3, #112	; 0x70
 8009152:	d00d      	beq.n	8009170 <HAL_TIM_ConfigClockSource+0x94>
 8009154:	2b70      	cmp	r3, #112	; 0x70
 8009156:	d804      	bhi.n	8009162 <HAL_TIM_ConfigClockSource+0x86>
 8009158:	2b50      	cmp	r3, #80	; 0x50
 800915a:	d033      	beq.n	80091c4 <HAL_TIM_ConfigClockSource+0xe8>
 800915c:	2b60      	cmp	r3, #96	; 0x60
 800915e:	d041      	beq.n	80091e4 <HAL_TIM_ConfigClockSource+0x108>
 8009160:	e069      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x15a>
 8009162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009166:	d069      	beq.n	800923c <HAL_TIM_ConfigClockSource+0x160>
 8009168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800916c:	d017      	beq.n	800919e <HAL_TIM_ConfigClockSource+0xc2>
 800916e:	e062      	b.n	8009236 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6899      	ldr	r1, [r3, #8]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f000 fcba 	bl	8009af8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009192:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	609a      	str	r2, [r3, #8]
      break;
 800919c:	e04f      	b.n	800923e <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	6899      	ldr	r1, [r3, #8]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f000 fca3 	bl	8009af8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091c0:	609a      	str	r2, [r3, #8]
      break;
 80091c2:	e03c      	b.n	800923e <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	6859      	ldr	r1, [r3, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	461a      	mov	r2, r3
 80091d2:	f000 fc17 	bl	8009a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2150      	movs	r1, #80	; 0x50
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fc70 	bl	8009ac2 <TIM_ITRx_SetConfig>
      break;
 80091e2:	e02c      	b.n	800923e <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	6859      	ldr	r1, [r3, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	461a      	mov	r2, r3
 80091f2:	f000 fc36 	bl	8009a62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2160      	movs	r1, #96	; 0x60
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fc60 	bl	8009ac2 <TIM_ITRx_SetConfig>
      break;
 8009202:	e01c      	b.n	800923e <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6818      	ldr	r0, [r3, #0]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	6859      	ldr	r1, [r3, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	461a      	mov	r2, r3
 8009212:	f000 fbf7 	bl	8009a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2140      	movs	r1, #64	; 0x40
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fc50 	bl	8009ac2 <TIM_ITRx_SetConfig>
      break;
 8009222:	e00c      	b.n	800923e <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4619      	mov	r1, r3
 800922e:	4610      	mov	r0, r2
 8009230:	f000 fc47 	bl	8009ac2 <TIM_ITRx_SetConfig>
      break;
 8009234:	e003      	b.n	800923e <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	73fb      	strb	r3, [r7, #15]
      break;
 800923a:	e000      	b.n	800923e <HAL_TIM_ConfigClockSource+0x162>
      break;
 800923c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a42      	ldr	r2, [pc, #264]	; (80093d8 <TIM_Base_SetConfig+0x11c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d013      	beq.n	80092fc <TIM_Base_SetConfig+0x40>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092da:	d00f      	beq.n	80092fc <TIM_Base_SetConfig+0x40>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a3f      	ldr	r2, [pc, #252]	; (80093dc <TIM_Base_SetConfig+0x120>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00b      	beq.n	80092fc <TIM_Base_SetConfig+0x40>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a3e      	ldr	r2, [pc, #248]	; (80093e0 <TIM_Base_SetConfig+0x124>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d007      	beq.n	80092fc <TIM_Base_SetConfig+0x40>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a3d      	ldr	r2, [pc, #244]	; (80093e4 <TIM_Base_SetConfig+0x128>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d003      	beq.n	80092fc <TIM_Base_SetConfig+0x40>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a3c      	ldr	r2, [pc, #240]	; (80093e8 <TIM_Base_SetConfig+0x12c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d108      	bne.n	800930e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a31      	ldr	r2, [pc, #196]	; (80093d8 <TIM_Base_SetConfig+0x11c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d01f      	beq.n	8009356 <TIM_Base_SetConfig+0x9a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931c:	d01b      	beq.n	8009356 <TIM_Base_SetConfig+0x9a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a2e      	ldr	r2, [pc, #184]	; (80093dc <TIM_Base_SetConfig+0x120>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d017      	beq.n	8009356 <TIM_Base_SetConfig+0x9a>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a2d      	ldr	r2, [pc, #180]	; (80093e0 <TIM_Base_SetConfig+0x124>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d013      	beq.n	8009356 <TIM_Base_SetConfig+0x9a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a2c      	ldr	r2, [pc, #176]	; (80093e4 <TIM_Base_SetConfig+0x128>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d00f      	beq.n	8009356 <TIM_Base_SetConfig+0x9a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a2c      	ldr	r2, [pc, #176]	; (80093ec <TIM_Base_SetConfig+0x130>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00b      	beq.n	8009356 <TIM_Base_SetConfig+0x9a>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a2b      	ldr	r2, [pc, #172]	; (80093f0 <TIM_Base_SetConfig+0x134>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d007      	beq.n	8009356 <TIM_Base_SetConfig+0x9a>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a2a      	ldr	r2, [pc, #168]	; (80093f4 <TIM_Base_SetConfig+0x138>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d003      	beq.n	8009356 <TIM_Base_SetConfig+0x9a>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a25      	ldr	r2, [pc, #148]	; (80093e8 <TIM_Base_SetConfig+0x12c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d108      	bne.n	8009368 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800935c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	4313      	orrs	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a12      	ldr	r2, [pc, #72]	; (80093d8 <TIM_Base_SetConfig+0x11c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d013      	beq.n	80093bc <TIM_Base_SetConfig+0x100>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <TIM_Base_SetConfig+0x128>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d00f      	beq.n	80093bc <TIM_Base_SetConfig+0x100>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a13      	ldr	r2, [pc, #76]	; (80093ec <TIM_Base_SetConfig+0x130>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00b      	beq.n	80093bc <TIM_Base_SetConfig+0x100>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a12      	ldr	r2, [pc, #72]	; (80093f0 <TIM_Base_SetConfig+0x134>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d007      	beq.n	80093bc <TIM_Base_SetConfig+0x100>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a11      	ldr	r2, [pc, #68]	; (80093f4 <TIM_Base_SetConfig+0x138>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d003      	beq.n	80093bc <TIM_Base_SetConfig+0x100>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a0c      	ldr	r2, [pc, #48]	; (80093e8 <TIM_Base_SetConfig+0x12c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d103      	bne.n	80093c4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	615a      	str	r2, [r3, #20]
}
 80093ca:	bf00      	nop
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	40012c00 	.word	0x40012c00
 80093dc:	40000400 	.word	0x40000400
 80093e0:	40000800 	.word	0x40000800
 80093e4:	40013400 	.word	0x40013400
 80093e8:	40015000 	.word	0x40015000
 80093ec:	40014000 	.word	0x40014000
 80093f0:	40014400 	.word	0x40014400
 80093f4:	40014800 	.word	0x40014800

080093f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	f023 0201 	bic.w	r2, r3, #1
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800942a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f023 0303 	bic.w	r3, r3, #3
 8009432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	4313      	orrs	r3, r2
 800943c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f023 0302 	bic.w	r3, r3, #2
 8009444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	4313      	orrs	r3, r2
 800944e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a30      	ldr	r2, [pc, #192]	; (8009514 <TIM_OC1_SetConfig+0x11c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d013      	beq.n	8009480 <TIM_OC1_SetConfig+0x88>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a2f      	ldr	r2, [pc, #188]	; (8009518 <TIM_OC1_SetConfig+0x120>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00f      	beq.n	8009480 <TIM_OC1_SetConfig+0x88>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a2e      	ldr	r2, [pc, #184]	; (800951c <TIM_OC1_SetConfig+0x124>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d00b      	beq.n	8009480 <TIM_OC1_SetConfig+0x88>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a2d      	ldr	r2, [pc, #180]	; (8009520 <TIM_OC1_SetConfig+0x128>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d007      	beq.n	8009480 <TIM_OC1_SetConfig+0x88>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a2c      	ldr	r2, [pc, #176]	; (8009524 <TIM_OC1_SetConfig+0x12c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d003      	beq.n	8009480 <TIM_OC1_SetConfig+0x88>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a2b      	ldr	r2, [pc, #172]	; (8009528 <TIM_OC1_SetConfig+0x130>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d10c      	bne.n	800949a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f023 0308 	bic.w	r3, r3, #8
 8009486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f023 0304 	bic.w	r3, r3, #4
 8009498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <TIM_OC1_SetConfig+0x11c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d013      	beq.n	80094ca <TIM_OC1_SetConfig+0xd2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <TIM_OC1_SetConfig+0x120>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00f      	beq.n	80094ca <TIM_OC1_SetConfig+0xd2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a1b      	ldr	r2, [pc, #108]	; (800951c <TIM_OC1_SetConfig+0x124>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00b      	beq.n	80094ca <TIM_OC1_SetConfig+0xd2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a1a      	ldr	r2, [pc, #104]	; (8009520 <TIM_OC1_SetConfig+0x128>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d007      	beq.n	80094ca <TIM_OC1_SetConfig+0xd2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a19      	ldr	r2, [pc, #100]	; (8009524 <TIM_OC1_SetConfig+0x12c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d003      	beq.n	80094ca <TIM_OC1_SetConfig+0xd2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a18      	ldr	r2, [pc, #96]	; (8009528 <TIM_OC1_SetConfig+0x130>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d111      	bne.n	80094ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	621a      	str	r2, [r3, #32]
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	40012c00 	.word	0x40012c00
 8009518:	40013400 	.word	0x40013400
 800951c:	40014000 	.word	0x40014000
 8009520:	40014400 	.word	0x40014400
 8009524:	40014800 	.word	0x40014800
 8009528:	40015000 	.word	0x40015000

0800952c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800952c:	b480      	push	{r7}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0210 	bic.w	r2, r3, #16
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800955a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f023 0320 	bic.w	r3, r3, #32
 800957a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	4313      	orrs	r3, r2
 8009586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a2c      	ldr	r2, [pc, #176]	; (800963c <TIM_OC2_SetConfig+0x110>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d007      	beq.n	80095a0 <TIM_OC2_SetConfig+0x74>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a2b      	ldr	r2, [pc, #172]	; (8009640 <TIM_OC2_SetConfig+0x114>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d003      	beq.n	80095a0 <TIM_OC2_SetConfig+0x74>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a2a      	ldr	r2, [pc, #168]	; (8009644 <TIM_OC2_SetConfig+0x118>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10d      	bne.n	80095bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a1f      	ldr	r2, [pc, #124]	; (800963c <TIM_OC2_SetConfig+0x110>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d013      	beq.n	80095ec <TIM_OC2_SetConfig+0xc0>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a1e      	ldr	r2, [pc, #120]	; (8009640 <TIM_OC2_SetConfig+0x114>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00f      	beq.n	80095ec <TIM_OC2_SetConfig+0xc0>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a1e      	ldr	r2, [pc, #120]	; (8009648 <TIM_OC2_SetConfig+0x11c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d00b      	beq.n	80095ec <TIM_OC2_SetConfig+0xc0>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a1d      	ldr	r2, [pc, #116]	; (800964c <TIM_OC2_SetConfig+0x120>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d007      	beq.n	80095ec <TIM_OC2_SetConfig+0xc0>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a1c      	ldr	r2, [pc, #112]	; (8009650 <TIM_OC2_SetConfig+0x124>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d003      	beq.n	80095ec <TIM_OC2_SetConfig+0xc0>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a17      	ldr	r2, [pc, #92]	; (8009644 <TIM_OC2_SetConfig+0x118>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d113      	bne.n	8009614 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	4313      	orrs	r3, r2
 8009606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	4313      	orrs	r3, r2
 8009612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	621a      	str	r2, [r3, #32]
}
 800962e:	bf00      	nop
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	40012c00 	.word	0x40012c00
 8009640:	40013400 	.word	0x40013400
 8009644:	40015000 	.word	0x40015000
 8009648:	40014000 	.word	0x40014000
 800964c:	40014400 	.word	0x40014400
 8009650:	40014800 	.word	0x40014800

08009654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	021b      	lsls	r3, r3, #8
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a2b      	ldr	r2, [pc, #172]	; (8009760 <TIM_OC3_SetConfig+0x10c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d007      	beq.n	80096c6 <TIM_OC3_SetConfig+0x72>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a2a      	ldr	r2, [pc, #168]	; (8009764 <TIM_OC3_SetConfig+0x110>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d003      	beq.n	80096c6 <TIM_OC3_SetConfig+0x72>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a29      	ldr	r2, [pc, #164]	; (8009768 <TIM_OC3_SetConfig+0x114>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d10d      	bne.n	80096e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a1e      	ldr	r2, [pc, #120]	; (8009760 <TIM_OC3_SetConfig+0x10c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d013      	beq.n	8009712 <TIM_OC3_SetConfig+0xbe>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a1d      	ldr	r2, [pc, #116]	; (8009764 <TIM_OC3_SetConfig+0x110>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00f      	beq.n	8009712 <TIM_OC3_SetConfig+0xbe>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a1d      	ldr	r2, [pc, #116]	; (800976c <TIM_OC3_SetConfig+0x118>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00b      	beq.n	8009712 <TIM_OC3_SetConfig+0xbe>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a1c      	ldr	r2, [pc, #112]	; (8009770 <TIM_OC3_SetConfig+0x11c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d007      	beq.n	8009712 <TIM_OC3_SetConfig+0xbe>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a1b      	ldr	r2, [pc, #108]	; (8009774 <TIM_OC3_SetConfig+0x120>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d003      	beq.n	8009712 <TIM_OC3_SetConfig+0xbe>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a16      	ldr	r2, [pc, #88]	; (8009768 <TIM_OC3_SetConfig+0x114>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d113      	bne.n	800973a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	011b      	lsls	r3, r3, #4
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	4313      	orrs	r3, r2
 8009738:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	621a      	str	r2, [r3, #32]
}
 8009754:	bf00      	nop
 8009756:	371c      	adds	r7, #28
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	40012c00 	.word	0x40012c00
 8009764:	40013400 	.word	0x40013400
 8009768:	40015000 	.word	0x40015000
 800976c:	40014000 	.word	0x40014000
 8009770:	40014400 	.word	0x40014400
 8009774:	40014800 	.word	0x40014800

08009778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	021b      	lsls	r3, r3, #8
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	4313      	orrs	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	031b      	lsls	r3, r3, #12
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a1a      	ldr	r2, [pc, #104]	; (8009840 <TIM_OC4_SetConfig+0xc8>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d013      	beq.n	8009804 <TIM_OC4_SetConfig+0x8c>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a19      	ldr	r2, [pc, #100]	; (8009844 <TIM_OC4_SetConfig+0xcc>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d00f      	beq.n	8009804 <TIM_OC4_SetConfig+0x8c>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a18      	ldr	r2, [pc, #96]	; (8009848 <TIM_OC4_SetConfig+0xd0>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d00b      	beq.n	8009804 <TIM_OC4_SetConfig+0x8c>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a17      	ldr	r2, [pc, #92]	; (800984c <TIM_OC4_SetConfig+0xd4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d007      	beq.n	8009804 <TIM_OC4_SetConfig+0x8c>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a16      	ldr	r2, [pc, #88]	; (8009850 <TIM_OC4_SetConfig+0xd8>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d003      	beq.n	8009804 <TIM_OC4_SetConfig+0x8c>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a15      	ldr	r2, [pc, #84]	; (8009854 <TIM_OC4_SetConfig+0xdc>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d109      	bne.n	8009818 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800980a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	019b      	lsls	r3, r3, #6
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	621a      	str	r2, [r3, #32]
}
 8009832:	bf00      	nop
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40012c00 	.word	0x40012c00
 8009844:	40013400 	.word	0x40013400
 8009848:	40014000 	.word	0x40014000
 800984c:	40014400 	.word	0x40014400
 8009850:	40014800 	.word	0x40014800
 8009854:	40015000 	.word	0x40015000

08009858 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800989c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	041b      	lsls	r3, r3, #16
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a19      	ldr	r2, [pc, #100]	; (8009914 <TIM_OC5_SetConfig+0xbc>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d013      	beq.n	80098da <TIM_OC5_SetConfig+0x82>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a18      	ldr	r2, [pc, #96]	; (8009918 <TIM_OC5_SetConfig+0xc0>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00f      	beq.n	80098da <TIM_OC5_SetConfig+0x82>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a17      	ldr	r2, [pc, #92]	; (800991c <TIM_OC5_SetConfig+0xc4>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00b      	beq.n	80098da <TIM_OC5_SetConfig+0x82>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a16      	ldr	r2, [pc, #88]	; (8009920 <TIM_OC5_SetConfig+0xc8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d007      	beq.n	80098da <TIM_OC5_SetConfig+0x82>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a15      	ldr	r2, [pc, #84]	; (8009924 <TIM_OC5_SetConfig+0xcc>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d003      	beq.n	80098da <TIM_OC5_SetConfig+0x82>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a14      	ldr	r2, [pc, #80]	; (8009928 <TIM_OC5_SetConfig+0xd0>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d109      	bne.n	80098ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	021b      	lsls	r3, r3, #8
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	621a      	str	r2, [r3, #32]
}
 8009908:	bf00      	nop
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	40012c00 	.word	0x40012c00
 8009918:	40013400 	.word	0x40013400
 800991c:	40014000 	.word	0x40014000
 8009920:	40014400 	.word	0x40014400
 8009924:	40014800 	.word	0x40014800
 8009928:	40015000 	.word	0x40015000

0800992c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800995a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800995e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	4313      	orrs	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	051b      	lsls	r3, r3, #20
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a1a      	ldr	r2, [pc, #104]	; (80099ec <TIM_OC6_SetConfig+0xc0>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d013      	beq.n	80099b0 <TIM_OC6_SetConfig+0x84>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a19      	ldr	r2, [pc, #100]	; (80099f0 <TIM_OC6_SetConfig+0xc4>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00f      	beq.n	80099b0 <TIM_OC6_SetConfig+0x84>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a18      	ldr	r2, [pc, #96]	; (80099f4 <TIM_OC6_SetConfig+0xc8>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d00b      	beq.n	80099b0 <TIM_OC6_SetConfig+0x84>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a17      	ldr	r2, [pc, #92]	; (80099f8 <TIM_OC6_SetConfig+0xcc>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d007      	beq.n	80099b0 <TIM_OC6_SetConfig+0x84>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a16      	ldr	r2, [pc, #88]	; (80099fc <TIM_OC6_SetConfig+0xd0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <TIM_OC6_SetConfig+0x84>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a15      	ldr	r2, [pc, #84]	; (8009a00 <TIM_OC6_SetConfig+0xd4>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d109      	bne.n	80099c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	029b      	lsls	r3, r3, #10
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	621a      	str	r2, [r3, #32]
}
 80099de:	bf00      	nop
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40012c00 	.word	0x40012c00
 80099f0:	40013400 	.word	0x40013400
 80099f4:	40014000 	.word	0x40014000
 80099f8:	40014400 	.word	0x40014400
 80099fc:	40014800 	.word	0x40014800
 8009a00:	40015000 	.word	0x40015000

08009a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	f023 0201 	bic.w	r2, r3, #1
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f023 030a 	bic.w	r3, r3, #10
 8009a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	621a      	str	r2, [r3, #32]
}
 8009a56:	bf00      	nop
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b087      	sub	sp, #28
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	f023 0210 	bic.w	r2, r3, #16
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	031b      	lsls	r3, r3, #12
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	621a      	str	r2, [r3, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	371c      	adds	r7, #28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	f043 0307 	orr.w	r3, r3, #7
 8009ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	609a      	str	r2, [r3, #8]
}
 8009aec:	bf00      	nop
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	021a      	lsls	r2, r3, #8
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	609a      	str	r2, [r3, #8]
}
 8009b2c:	bf00      	nop
 8009b2e:	371c      	adds	r7, #28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e06d      	b.n	8009c2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a30      	ldr	r2, [pc, #192]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d009      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a2f      	ldr	r2, [pc, #188]	; (8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d004      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a2d      	ldr	r2, [pc, #180]	; (8009c40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d108      	bne.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a1e      	ldr	r2, [pc, #120]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d01d      	beq.n	8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bcc:	d018      	beq.n	8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a1c      	ldr	r2, [pc, #112]	; (8009c44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d013      	beq.n	8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a1a      	ldr	r2, [pc, #104]	; (8009c48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d00e      	beq.n	8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a15      	ldr	r2, [pc, #84]	; (8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d009      	beq.n	8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a16      	ldr	r2, [pc, #88]	; (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d004      	beq.n	8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a11      	ldr	r2, [pc, #68]	; (8009c40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d10c      	bne.n	8009c1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	40012c00 	.word	0x40012c00
 8009c3c:	40013400 	.word	0x40013400
 8009c40:	40015000 	.word	0x40015000
 8009c44:	40000400 	.word	0x40000400
 8009c48:	40000800 	.word	0x40000800
 8009c4c:	40014000 	.word	0x40014000

08009c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e040      	b.n	8009d20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7fb f91a 	bl	8004ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2224      	movs	r2, #36	; 0x24
 8009cb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 0201 	bic.w	r2, r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fc0e 	bl	800a4ec <UART_SetConfig>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d101      	bne.n	8009cda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e022      	b.n	8009d20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fdd6 	bl	800a894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689a      	ldr	r2, [r3, #8]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0201 	orr.w	r2, r2, #1
 8009d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fe5d 	bl	800a9d8 <UART_CheckIdleState>
 8009d1e:	4603      	mov	r3, r0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af02      	add	r7, sp, #8
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	4613      	mov	r3, r2
 8009d36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	f040 8082 	bne.w	8009e46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <HAL_UART_Transmit+0x26>
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e07a      	b.n	8009e48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d101      	bne.n	8009d60 <HAL_UART_Transmit+0x38>
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	e073      	b.n	8009e48 <HAL_UART_Transmit+0x120>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2221      	movs	r2, #33	; 0x21
 8009d74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d76:	f7fb fa01 	bl	800517c <HAL_GetTick>
 8009d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	88fa      	ldrh	r2, [r7, #6]
 8009d80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	88fa      	ldrh	r2, [r7, #6]
 8009d88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d94:	d108      	bne.n	8009da8 <HAL_UART_Transmit+0x80>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d104      	bne.n	8009da8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	61bb      	str	r3, [r7, #24]
 8009da6:	e003      	b.n	8009db0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009dac:	2300      	movs	r3, #0
 8009dae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009db8:	e02d      	b.n	8009e16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2180      	movs	r1, #128	; 0x80
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f000 fe50 	bl	800aa6a <UART_WaitOnFlagUntilTimeout>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e039      	b.n	8009e48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10b      	bne.n	8009df2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	881a      	ldrh	r2, [r3, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009de6:	b292      	uxth	r2, r2
 8009de8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	3302      	adds	r3, #2
 8009dee:	61bb      	str	r3, [r7, #24]
 8009df0:	e008      	b.n	8009e04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	781a      	ldrb	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	3301      	adds	r3, #1
 8009e02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1cb      	bne.n	8009dba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2140      	movs	r1, #64	; 0x40
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 fe1c 	bl	800aa6a <UART_WaitOnFlagUntilTimeout>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e005      	b.n	8009e48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	e000      	b.n	8009e48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009e46:	2302      	movs	r3, #2
  }
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3720      	adds	r7, #32
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b08a      	sub	sp, #40	; 0x28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e62:	2b20      	cmp	r3, #32
 8009e64:	d13d      	bne.n	8009ee2 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <HAL_UART_Receive_IT+0x22>
 8009e6c:	88fb      	ldrh	r3, [r7, #6]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e036      	b.n	8009ee4 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d101      	bne.n	8009e84 <HAL_UART_Receive_IT+0x34>
 8009e80:	2302      	movs	r3, #2
 8009e82:	e02f      	b.n	8009ee4 <HAL_UART_Receive_IT+0x94>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d018      	beq.n	8009ed2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	613b      	str	r3, [r7, #16]
   return(result);
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	623b      	str	r3, [r7, #32]
 8009ec0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	69f9      	ldr	r1, [r7, #28]
 8009ec4:	6a3a      	ldr	r2, [r7, #32]
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e6      	bne.n	8009ea0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ed2:	88fb      	ldrh	r3, [r7, #6]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	68b9      	ldr	r1, [r7, #8]
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 fe8b 	bl	800abf4 <UART_Start_Receive_IT>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	e000      	b.n	8009ee4 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ee2:	2302      	movs	r3, #2
  }
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3728      	adds	r7, #40	; 0x28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b0ba      	sub	sp, #232	; 0xe8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009f16:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d115      	bne.n	8009f54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f2c:	f003 0320 	and.w	r3, r3, #32
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00f      	beq.n	8009f54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f38:	f003 0320 	and.w	r3, r3, #32
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d009      	beq.n	8009f54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 82a4 	beq.w	800a492 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	4798      	blx	r3
      }
      return;
 8009f52:	e29e      	b.n	800a492 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 8117 	beq.w	800a18c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d106      	bne.n	8009f78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009f6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009f6e:	4b85      	ldr	r3, [pc, #532]	; (800a184 <HAL_UART_IRQHandler+0x298>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 810a 	beq.w	800a18c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d011      	beq.n	8009fa8 <HAL_UART_IRQHandler+0xbc>
 8009f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00b      	beq.n	8009fa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2201      	movs	r2, #1
 8009f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f9e:	f043 0201 	orr.w	r2, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fac:	f003 0302 	and.w	r3, r3, #2
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d011      	beq.n	8009fd8 <HAL_UART_IRQHandler+0xec>
 8009fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fce:	f043 0204 	orr.w	r2, r3, #4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d011      	beq.n	800a008 <HAL_UART_IRQHandler+0x11c>
 8009fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2204      	movs	r2, #4
 8009ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ffe:	f043 0202 	orr.w	r2, r3, #2
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a00c:	f003 0308 	and.w	r3, r3, #8
 800a010:	2b00      	cmp	r3, #0
 800a012:	d017      	beq.n	800a044 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a018:	f003 0320 	and.w	r3, r3, #32
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d105      	bne.n	800a02c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a024:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2208      	movs	r2, #8
 800a032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a03a:	f043 0208 	orr.w	r2, r3, #8
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d012      	beq.n	800a076 <HAL_UART_IRQHandler+0x18a>
 800a050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00c      	beq.n	800a076 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a06c:	f043 0220 	orr.w	r2, r3, #32
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 820a 	beq.w	800a496 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00d      	beq.n	800a0aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a092:	f003 0320 	and.w	r3, r3, #32
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b40      	cmp	r3, #64	; 0x40
 800a0c0:	d005      	beq.n	800a0ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d04f      	beq.n	800a16e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fe3c 	bl	800ad4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0de:	2b40      	cmp	r3, #64	; 0x40
 800a0e0:	d141      	bne.n	800a166 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a0f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3308      	adds	r3, #8
 800a10a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a10e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a11a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1d9      	bne.n	800a0e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a132:	2b00      	cmp	r3, #0
 800a134:	d013      	beq.n	800a15e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13a:	4a13      	ldr	r2, [pc, #76]	; (800a188 <HAL_UART_IRQHandler+0x29c>)
 800a13c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a142:	4618      	mov	r0, r3
 800a144:	f7fc fe00 	bl	8006d48 <HAL_DMA_Abort_IT>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d017      	beq.n	800a17e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a158:	4610      	mov	r0, r2
 800a15a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a15c:	e00f      	b.n	800a17e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f9ae 	bl	800a4c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a164:	e00b      	b.n	800a17e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f9aa 	bl	800a4c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a16c:	e007      	b.n	800a17e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f9a6 	bl	800a4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a17c:	e18b      	b.n	800a496 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a17e:	bf00      	nop
    return;
 800a180:	e189      	b.n	800a496 <HAL_UART_IRQHandler+0x5aa>
 800a182:	bf00      	nop
 800a184:	04000120 	.word	0x04000120
 800a188:	0800ae13 	.word	0x0800ae13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a190:	2b01      	cmp	r3, #1
 800a192:	f040 8143 	bne.w	800a41c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19a:	f003 0310 	and.w	r3, r3, #16
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 813c 	beq.w	800a41c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1a8:	f003 0310 	and.w	r3, r3, #16
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 8135 	beq.w	800a41c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2210      	movs	r2, #16
 800a1b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c4:	2b40      	cmp	r3, #64	; 0x40
 800a1c6:	f040 80b1 	bne.w	800a32c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 815d 	beq.w	800a49a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	f080 8155 	bcs.w	800a49a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	2b20      	cmp	r3, #32
 800a202:	f000 8085 	beq.w	800a310 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a21a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a21e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a222:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a234:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a23c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1da      	bne.n	800a206 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3308      	adds	r3, #8
 800a256:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a262:	f023 0301 	bic.w	r3, r3, #1
 800a266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3308      	adds	r3, #8
 800a270:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a274:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a278:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a27c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e1      	bne.n	800a250 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3308      	adds	r3, #8
 800a292:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a296:	e853 3f00 	ldrex	r3, [r3]
 800a29a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a29c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a29e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e3      	bne.n	800a28c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d8:	e853 3f00 	ldrex	r3, [r3]
 800a2dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2e0:	f023 0310 	bic.w	r3, r3, #16
 800a2e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1e4      	bne.n	800a2d0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fc fce3 	bl	8006cd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	b29b      	uxth	r3, r3
 800a322:	4619      	mov	r1, r3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f8d5 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a32a:	e0b6      	b.n	800a49a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a338:	b29b      	uxth	r3, r3
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a346:	b29b      	uxth	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 80a8 	beq.w	800a49e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800a34e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 80a3 	beq.w	800a49e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a360:	e853 3f00 	ldrex	r3, [r3]
 800a364:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a36c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a37a:	647b      	str	r3, [r7, #68]	; 0x44
 800a37c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e4      	bne.n	800a358 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	623b      	str	r3, [r7, #32]
   return(result);
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a3b2:	633a      	str	r2, [r7, #48]	; 0x30
 800a3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e3      	bne.n	800a38e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f023 0310 	bic.w	r3, r3, #16
 800a3ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a3fa:	61fb      	str	r3, [r7, #28]
 800a3fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	69b9      	ldr	r1, [r7, #24]
 800a400:	69fa      	ldr	r2, [r7, #28]
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	617b      	str	r3, [r7, #20]
   return(result);
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e4      	bne.n	800a3d8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a40e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f85d 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a41a:	e040      	b.n	800a49e <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00e      	beq.n	800a446 <HAL_UART_IRQHandler+0x55a>
 800a428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a42c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d008      	beq.n	800a446 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a43c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fe83 	bl	800b14a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a444:	e02e      	b.n	800a4a4 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00e      	beq.n	800a470 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d008      	beq.n	800a470 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01d      	beq.n	800a4a2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	4798      	blx	r3
    }
    return;
 800a46e:	e018      	b.n	800a4a2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d013      	beq.n	800a4a4 <HAL_UART_IRQHandler+0x5b8>
 800a47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00d      	beq.n	800a4a4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fcd8 	bl	800ae3e <UART_EndTransmit_IT>
    return;
 800a48e:	bf00      	nop
 800a490:	e008      	b.n	800a4a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a492:	bf00      	nop
 800a494:	e006      	b.n	800a4a4 <HAL_UART_IRQHandler+0x5b8>
    return;
 800a496:	bf00      	nop
 800a498:	e004      	b.n	800a4a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a49a:	bf00      	nop
 800a49c:	e002      	b.n	800a4a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a49e:	bf00      	nop
 800a4a0:	e000      	b.n	800a4a4 <HAL_UART_IRQHandler+0x5b8>
    return;
 800a4a2:	bf00      	nop
  }

}
 800a4a4:	37e8      	adds	r7, #232	; 0xe8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop

0800a4ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	431a      	orrs	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	431a      	orrs	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	4baa      	ldr	r3, [pc, #680]	; (800a7c0 <UART_SetConfig+0x2d4>)
 800a518:	4013      	ands	r3, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6812      	ldr	r2, [r2, #0]
 800a51e:	6979      	ldr	r1, [r7, #20]
 800a520:	430b      	orrs	r3, r1
 800a522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	4313      	orrs	r3, r2
 800a548:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	697a      	ldr	r2, [r7, #20]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a98      	ldr	r2, [pc, #608]	; (800a7c4 <UART_SetConfig+0x2d8>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d121      	bne.n	800a5ac <UART_SetConfig+0xc0>
 800a568:	4b97      	ldr	r3, [pc, #604]	; (800a7c8 <UART_SetConfig+0x2dc>)
 800a56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56c:	f003 0303 	and.w	r3, r3, #3
 800a570:	2b03      	cmp	r3, #3
 800a572:	d817      	bhi.n	800a5a4 <UART_SetConfig+0xb8>
 800a574:	a201      	add	r2, pc, #4	; (adr r2, 800a57c <UART_SetConfig+0x90>)
 800a576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57a:	bf00      	nop
 800a57c:	0800a58d 	.word	0x0800a58d
 800a580:	0800a599 	.word	0x0800a599
 800a584:	0800a59f 	.word	0x0800a59f
 800a588:	0800a593 	.word	0x0800a593
 800a58c:	2301      	movs	r3, #1
 800a58e:	77fb      	strb	r3, [r7, #31]
 800a590:	e0b2      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a592:	2302      	movs	r3, #2
 800a594:	77fb      	strb	r3, [r7, #31]
 800a596:	e0af      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a598:	2304      	movs	r3, #4
 800a59a:	77fb      	strb	r3, [r7, #31]
 800a59c:	e0ac      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a59e:	2308      	movs	r3, #8
 800a5a0:	77fb      	strb	r3, [r7, #31]
 800a5a2:	e0a9      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a5a4:	2310      	movs	r3, #16
 800a5a6:	77fb      	strb	r3, [r7, #31]
 800a5a8:	bf00      	nop
 800a5aa:	e0a5      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a86      	ldr	r2, [pc, #536]	; (800a7cc <UART_SetConfig+0x2e0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d123      	bne.n	800a5fe <UART_SetConfig+0x112>
 800a5b6:	4b84      	ldr	r3, [pc, #528]	; (800a7c8 <UART_SetConfig+0x2dc>)
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a5be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5c2:	d012      	beq.n	800a5ea <UART_SetConfig+0xfe>
 800a5c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5c8:	d802      	bhi.n	800a5d0 <UART_SetConfig+0xe4>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d007      	beq.n	800a5de <UART_SetConfig+0xf2>
 800a5ce:	e012      	b.n	800a5f6 <UART_SetConfig+0x10a>
 800a5d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d4:	d00c      	beq.n	800a5f0 <UART_SetConfig+0x104>
 800a5d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a5da:	d003      	beq.n	800a5e4 <UART_SetConfig+0xf8>
 800a5dc:	e00b      	b.n	800a5f6 <UART_SetConfig+0x10a>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	77fb      	strb	r3, [r7, #31]
 800a5e2:	e089      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	77fb      	strb	r3, [r7, #31]
 800a5e8:	e086      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a5ea:	2304      	movs	r3, #4
 800a5ec:	77fb      	strb	r3, [r7, #31]
 800a5ee:	e083      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a5f0:	2308      	movs	r3, #8
 800a5f2:	77fb      	strb	r3, [r7, #31]
 800a5f4:	e080      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a5f6:	2310      	movs	r3, #16
 800a5f8:	77fb      	strb	r3, [r7, #31]
 800a5fa:	bf00      	nop
 800a5fc:	e07c      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a73      	ldr	r2, [pc, #460]	; (800a7d0 <UART_SetConfig+0x2e4>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d123      	bne.n	800a650 <UART_SetConfig+0x164>
 800a608:	4b6f      	ldr	r3, [pc, #444]	; (800a7c8 <UART_SetConfig+0x2dc>)
 800a60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a614:	d012      	beq.n	800a63c <UART_SetConfig+0x150>
 800a616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a61a:	d802      	bhi.n	800a622 <UART_SetConfig+0x136>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d007      	beq.n	800a630 <UART_SetConfig+0x144>
 800a620:	e012      	b.n	800a648 <UART_SetConfig+0x15c>
 800a622:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a626:	d00c      	beq.n	800a642 <UART_SetConfig+0x156>
 800a628:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a62c:	d003      	beq.n	800a636 <UART_SetConfig+0x14a>
 800a62e:	e00b      	b.n	800a648 <UART_SetConfig+0x15c>
 800a630:	2300      	movs	r3, #0
 800a632:	77fb      	strb	r3, [r7, #31]
 800a634:	e060      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a636:	2302      	movs	r3, #2
 800a638:	77fb      	strb	r3, [r7, #31]
 800a63a:	e05d      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a63c:	2304      	movs	r3, #4
 800a63e:	77fb      	strb	r3, [r7, #31]
 800a640:	e05a      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a642:	2308      	movs	r3, #8
 800a644:	77fb      	strb	r3, [r7, #31]
 800a646:	e057      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a648:	2310      	movs	r3, #16
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	bf00      	nop
 800a64e:	e053      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a5f      	ldr	r2, [pc, #380]	; (800a7d4 <UART_SetConfig+0x2e8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d123      	bne.n	800a6a2 <UART_SetConfig+0x1b6>
 800a65a:	4b5b      	ldr	r3, [pc, #364]	; (800a7c8 <UART_SetConfig+0x2dc>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a666:	d012      	beq.n	800a68e <UART_SetConfig+0x1a2>
 800a668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a66c:	d802      	bhi.n	800a674 <UART_SetConfig+0x188>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d007      	beq.n	800a682 <UART_SetConfig+0x196>
 800a672:	e012      	b.n	800a69a <UART_SetConfig+0x1ae>
 800a674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a678:	d00c      	beq.n	800a694 <UART_SetConfig+0x1a8>
 800a67a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a67e:	d003      	beq.n	800a688 <UART_SetConfig+0x19c>
 800a680:	e00b      	b.n	800a69a <UART_SetConfig+0x1ae>
 800a682:	2300      	movs	r3, #0
 800a684:	77fb      	strb	r3, [r7, #31]
 800a686:	e037      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a688:	2302      	movs	r3, #2
 800a68a:	77fb      	strb	r3, [r7, #31]
 800a68c:	e034      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a68e:	2304      	movs	r3, #4
 800a690:	77fb      	strb	r3, [r7, #31]
 800a692:	e031      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a694:	2308      	movs	r3, #8
 800a696:	77fb      	strb	r3, [r7, #31]
 800a698:	e02e      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a69a:	2310      	movs	r3, #16
 800a69c:	77fb      	strb	r3, [r7, #31]
 800a69e:	bf00      	nop
 800a6a0:	e02a      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a4c      	ldr	r2, [pc, #304]	; (800a7d8 <UART_SetConfig+0x2ec>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d123      	bne.n	800a6f4 <UART_SetConfig+0x208>
 800a6ac:	4b46      	ldr	r3, [pc, #280]	; (800a7c8 <UART_SetConfig+0x2dc>)
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a6b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6b8:	d012      	beq.n	800a6e0 <UART_SetConfig+0x1f4>
 800a6ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6be:	d802      	bhi.n	800a6c6 <UART_SetConfig+0x1da>
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d007      	beq.n	800a6d4 <UART_SetConfig+0x1e8>
 800a6c4:	e012      	b.n	800a6ec <UART_SetConfig+0x200>
 800a6c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6ca:	d00c      	beq.n	800a6e6 <UART_SetConfig+0x1fa>
 800a6cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a6d0:	d003      	beq.n	800a6da <UART_SetConfig+0x1ee>
 800a6d2:	e00b      	b.n	800a6ec <UART_SetConfig+0x200>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	77fb      	strb	r3, [r7, #31]
 800a6d8:	e00e      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	77fb      	strb	r3, [r7, #31]
 800a6de:	e00b      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a6e0:	2304      	movs	r3, #4
 800a6e2:	77fb      	strb	r3, [r7, #31]
 800a6e4:	e008      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	77fb      	strb	r3, [r7, #31]
 800a6ea:	e005      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	77fb      	strb	r3, [r7, #31]
 800a6f0:	bf00      	nop
 800a6f2:	e001      	b.n	800a6f8 <UART_SetConfig+0x20c>
 800a6f4:	2310      	movs	r3, #16
 800a6f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	69db      	ldr	r3, [r3, #28]
 800a6fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a700:	d16e      	bne.n	800a7e0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800a702:	7ffb      	ldrb	r3, [r7, #31]
 800a704:	2b08      	cmp	r3, #8
 800a706:	d828      	bhi.n	800a75a <UART_SetConfig+0x26e>
 800a708:	a201      	add	r2, pc, #4	; (adr r2, 800a710 <UART_SetConfig+0x224>)
 800a70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70e:	bf00      	nop
 800a710:	0800a735 	.word	0x0800a735
 800a714:	0800a73d 	.word	0x0800a73d
 800a718:	0800a745 	.word	0x0800a745
 800a71c:	0800a75b 	.word	0x0800a75b
 800a720:	0800a74b 	.word	0x0800a74b
 800a724:	0800a75b 	.word	0x0800a75b
 800a728:	0800a75b 	.word	0x0800a75b
 800a72c:	0800a75b 	.word	0x0800a75b
 800a730:	0800a753 	.word	0x0800a753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a734:	f7fd ff16 	bl	8008564 <HAL_RCC_GetPCLK1Freq>
 800a738:	61b8      	str	r0, [r7, #24]
        break;
 800a73a:	e013      	b.n	800a764 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a73c:	f7fd ff34 	bl	80085a8 <HAL_RCC_GetPCLK2Freq>
 800a740:	61b8      	str	r0, [r7, #24]
        break;
 800a742:	e00f      	b.n	800a764 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a744:	4b25      	ldr	r3, [pc, #148]	; (800a7dc <UART_SetConfig+0x2f0>)
 800a746:	61bb      	str	r3, [r7, #24]
        break;
 800a748:	e00c      	b.n	800a764 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a74a:	f7fd fe95 	bl	8008478 <HAL_RCC_GetSysClockFreq>
 800a74e:	61b8      	str	r0, [r7, #24]
        break;
 800a750:	e008      	b.n	800a764 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a756:	61bb      	str	r3, [r7, #24]
        break;
 800a758:	e004      	b.n	800a764 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	77bb      	strb	r3, [r7, #30]
        break;
 800a762:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 8086 	beq.w	800a878 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	005a      	lsls	r2, r3, #1
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	441a      	add	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a780:	b29b      	uxth	r3, r3
 800a782:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b0f      	cmp	r3, #15
 800a788:	d916      	bls.n	800a7b8 <UART_SetConfig+0x2cc>
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a790:	d212      	bcs.n	800a7b8 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	b29b      	uxth	r3, r3
 800a796:	f023 030f 	bic.w	r3, r3, #15
 800a79a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	085b      	lsrs	r3, r3, #1
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	89fa      	ldrh	r2, [r7, #14]
 800a7b4:	60da      	str	r2, [r3, #12]
 800a7b6:	e05f      	b.n	800a878 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	77bb      	strb	r3, [r7, #30]
 800a7bc:	e05c      	b.n	800a878 <UART_SetConfig+0x38c>
 800a7be:	bf00      	nop
 800a7c0:	efff69f3 	.word	0xefff69f3
 800a7c4:	40013800 	.word	0x40013800
 800a7c8:	40021000 	.word	0x40021000
 800a7cc:	40004400 	.word	0x40004400
 800a7d0:	40004800 	.word	0x40004800
 800a7d4:	40004c00 	.word	0x40004c00
 800a7d8:	40005000 	.word	0x40005000
 800a7dc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7e0:	7ffb      	ldrb	r3, [r7, #31]
 800a7e2:	2b08      	cmp	r3, #8
 800a7e4:	d827      	bhi.n	800a836 <UART_SetConfig+0x34a>
 800a7e6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ec <UART_SetConfig+0x300>)
 800a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ec:	0800a811 	.word	0x0800a811
 800a7f0:	0800a819 	.word	0x0800a819
 800a7f4:	0800a821 	.word	0x0800a821
 800a7f8:	0800a837 	.word	0x0800a837
 800a7fc:	0800a827 	.word	0x0800a827
 800a800:	0800a837 	.word	0x0800a837
 800a804:	0800a837 	.word	0x0800a837
 800a808:	0800a837 	.word	0x0800a837
 800a80c:	0800a82f 	.word	0x0800a82f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a810:	f7fd fea8 	bl	8008564 <HAL_RCC_GetPCLK1Freq>
 800a814:	61b8      	str	r0, [r7, #24]
        break;
 800a816:	e013      	b.n	800a840 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a818:	f7fd fec6 	bl	80085a8 <HAL_RCC_GetPCLK2Freq>
 800a81c:	61b8      	str	r0, [r7, #24]
        break;
 800a81e:	e00f      	b.n	800a840 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a820:	4b1b      	ldr	r3, [pc, #108]	; (800a890 <UART_SetConfig+0x3a4>)
 800a822:	61bb      	str	r3, [r7, #24]
        break;
 800a824:	e00c      	b.n	800a840 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a826:	f7fd fe27 	bl	8008478 <HAL_RCC_GetSysClockFreq>
 800a82a:	61b8      	str	r0, [r7, #24]
        break;
 800a82c:	e008      	b.n	800a840 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a82e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a832:	61bb      	str	r3, [r7, #24]
        break;
 800a834:	e004      	b.n	800a840 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800a836:	2300      	movs	r3, #0
 800a838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	77bb      	strb	r3, [r7, #30]
        break;
 800a83e:	bf00      	nop
    }

    if (pclk != 0U)
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d018      	beq.n	800a878 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	085a      	lsrs	r2, r3, #1
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	441a      	add	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	fbb2 f3f3 	udiv	r3, r2, r3
 800a858:	b29b      	uxth	r3, r3
 800a85a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2b0f      	cmp	r3, #15
 800a860:	d908      	bls.n	800a874 <UART_SetConfig+0x388>
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a868:	d204      	bcs.n	800a874 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	60da      	str	r2, [r3, #12]
 800a872:	e001      	b.n	800a878 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a884:	7fbb      	ldrb	r3, [r7, #30]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	007a1200 	.word	0x007a1200

0800a894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00a      	beq.n	800a8be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00a      	beq.n	800a8e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	f003 0304 	and.w	r3, r3, #4
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00a      	beq.n	800a902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	430a      	orrs	r2, r1
 800a900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	f003 0308 	and.w	r3, r3, #8
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00a      	beq.n	800a924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	430a      	orrs	r2, r1
 800a922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	f003 0310 	and.w	r3, r3, #16
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00a      	beq.n	800a946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d01a      	beq.n	800a9aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	430a      	orrs	r2, r1
 800a988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a992:	d10a      	bne.n	800a9aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	605a      	str	r2, [r3, #4]
  }
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af02      	add	r7, sp, #8
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9e8:	f7fa fbc8 	bl	800517c <HAL_GetTick>
 800a9ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 0308 	and.w	r3, r3, #8
 800a9f8:	2b08      	cmp	r3, #8
 800a9fa:	d10e      	bne.n	800aa1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f82d 	bl	800aa6a <UART_WaitOnFlagUntilTimeout>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e023      	b.n	800aa62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d10e      	bne.n	800aa46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f817 	bl	800aa6a <UART_WaitOnFlagUntilTimeout>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e00d      	b.n	800aa62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b09c      	sub	sp, #112	; 0x70
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	603b      	str	r3, [r7, #0]
 800aa76:	4613      	mov	r3, r2
 800aa78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa7a:	e0a5      	b.n	800abc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa82:	f000 80a1 	beq.w	800abc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa86:	f7fa fb79 	bl	800517c <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d302      	bcc.n	800aa9c <UART_WaitOnFlagUntilTimeout+0x32>
 800aa96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d13e      	bne.n	800ab1a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aaaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aab0:	667b      	str	r3, [r7, #100]	; 0x64
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aabc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aac0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e6      	bne.n	800aa9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3308      	adds	r3, #8
 800aad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	f023 0301 	bic.w	r3, r3, #1
 800aae4:	663b      	str	r3, [r7, #96]	; 0x60
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3308      	adds	r3, #8
 800aaec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaee:	64ba      	str	r2, [r7, #72]	; 0x48
 800aaf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aaf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aafc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e5      	bne.n	800aace <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2220      	movs	r2, #32
 800ab06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e067      	b.n	800abea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d04f      	beq.n	800abc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab36:	d147      	bne.n	800abc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	e853 3f00 	ldrex	r3, [r3]
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab60:	637b      	str	r3, [r7, #52]	; 0x34
 800ab62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab68:	e841 2300 	strex	r3, r2, [r1]
 800ab6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1e6      	bne.n	800ab42 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	3308      	adds	r3, #8
 800ab7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	e853 3f00 	ldrex	r3, [r3]
 800ab82:	613b      	str	r3, [r7, #16]
   return(result);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f023 0301 	bic.w	r3, r3, #1
 800ab8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3308      	adds	r3, #8
 800ab92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab94:	623a      	str	r2, [r7, #32]
 800ab96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	69f9      	ldr	r1, [r7, #28]
 800ab9a:	6a3a      	ldr	r2, [r7, #32]
 800ab9c:	e841 2300 	strex	r3, r2, [r1]
 800aba0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e5      	bne.n	800ab74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2220      	movs	r2, #32
 800abac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2220      	movs	r2, #32
 800abb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e010      	b.n	800abea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	69da      	ldr	r2, [r3, #28]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	4013      	ands	r3, r2
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	bf0c      	ite	eq
 800abd8:	2301      	moveq	r3, #1
 800abda:	2300      	movne	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	461a      	mov	r2, r3
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	f43f af4a 	beq.w	800aa7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3770      	adds	r7, #112	; 0x70
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b091      	sub	sp, #68	; 0x44
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	4613      	mov	r3, r2
 800ac00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	88fa      	ldrh	r2, [r7, #6]
 800ac0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	88fa      	ldrh	r2, [r7, #6]
 800ac14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac26:	d10e      	bne.n	800ac46 <UART_Start_Receive_IT+0x52>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <UART_Start_Receive_IT+0x48>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac3a:	e02d      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	22ff      	movs	r2, #255	; 0xff
 800ac40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac44:	e028      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10d      	bne.n	800ac6a <UART_Start_Receive_IT+0x76>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d104      	bne.n	800ac60 <UART_Start_Receive_IT+0x6c>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	22ff      	movs	r2, #255	; 0xff
 800ac5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac5e:	e01b      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	227f      	movs	r2, #127	; 0x7f
 800ac64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac68:	e016      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac72:	d10d      	bne.n	800ac90 <UART_Start_Receive_IT+0x9c>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <UART_Start_Receive_IT+0x92>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	227f      	movs	r2, #127	; 0x7f
 800ac80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac84:	e008      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	223f      	movs	r2, #63	; 0x3f
 800ac8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac8e:	e003      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2222      	movs	r2, #34	; 0x22
 800aca4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	f043 0301 	orr.w	r3, r3, #1
 800acbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acc6:	637a      	str	r2, [r7, #52]	; 0x34
 800acc8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800accc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e5      	bne.n	800aca6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace2:	d107      	bne.n	800acf4 <UART_Start_Receive_IT+0x100>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d103      	bne.n	800acf4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	4a15      	ldr	r2, [pc, #84]	; (800ad44 <UART_Start_Receive_IT+0x150>)
 800acf0:	665a      	str	r2, [r3, #100]	; 0x64
 800acf2:	e002      	b.n	800acfa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	4a14      	ldr	r2, [pc, #80]	; (800ad48 <UART_Start_Receive_IT+0x154>)
 800acf8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	e853 3f00 	ldrex	r3, [r3]
 800ad0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ad16:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	623b      	str	r3, [r7, #32]
 800ad22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad24:	69f9      	ldr	r1, [r7, #28]
 800ad26:	6a3a      	ldr	r2, [r7, #32]
 800ad28:	e841 2300 	strex	r3, r2, [r1]
 800ad2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e6      	bne.n	800ad02 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3744      	adds	r7, #68	; 0x44
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	0800afef 	.word	0x0800afef
 800ad48:	0800ae93 	.word	0x0800ae93

0800ad4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b095      	sub	sp, #84	; 0x54
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad72:	643b      	str	r3, [r7, #64]	; 0x40
 800ad74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e6      	bne.n	800ad54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	f023 0301 	bic.w	r3, r3, #1
 800ad9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3308      	adds	r3, #8
 800ada4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ada6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ada8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adae:	e841 2300 	strex	r3, r2, [r1]
 800adb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1e5      	bne.n	800ad86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d118      	bne.n	800adf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	e853 3f00 	ldrex	r3, [r3]
 800adce:	60bb      	str	r3, [r7, #8]
   return(result);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f023 0310 	bic.w	r3, r3, #16
 800add6:	647b      	str	r3, [r7, #68]	; 0x44
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ade0:	61bb      	str	r3, [r7, #24]
 800ade2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	6979      	ldr	r1, [r7, #20]
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	e841 2300 	strex	r3, r2, [r1]
 800adec:	613b      	str	r3, [r7, #16]
   return(result);
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e6      	bne.n	800adc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2220      	movs	r2, #32
 800adf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ae06:	bf00      	nop
 800ae08:	3754      	adds	r7, #84	; 0x54
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff fb45 	bl	800a4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b088      	sub	sp, #32
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5a:	61fb      	str	r3, [r7, #28]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	61bb      	str	r3, [r7, #24]
 800ae66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	6979      	ldr	r1, [r7, #20]
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	613b      	str	r3, [r7, #16]
   return(result);
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e6      	bne.n	800ae46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff fb11 	bl	800a4ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae8a:	bf00      	nop
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b096      	sub	sp, #88	; 0x58
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aea0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aea8:	2b22      	cmp	r3, #34	; 0x22
 800aeaa:	f040 8094 	bne.w	800afd6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aeb4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aeb8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800aebc:	b2d9      	uxtb	r1, r3
 800aebe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aec8:	400a      	ands	r2, r1
 800aeca:	b2d2      	uxtb	r2, r2
 800aecc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aede:	b29b      	uxth	r3, r3
 800aee0:	3b01      	subs	r3, #1
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d177      	bne.n	800afe6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	e853 3f00 	ldrex	r3, [r3]
 800af02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af0a:	653b      	str	r3, [r7, #80]	; 0x50
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	461a      	mov	r2, r3
 800af12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af14:	647b      	str	r3, [r7, #68]	; 0x44
 800af16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af1c:	e841 2300 	strex	r3, r2, [r1]
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1e6      	bne.n	800aef6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3308      	adds	r3, #8
 800af2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	e853 3f00 	ldrex	r3, [r3]
 800af36:	623b      	str	r3, [r7, #32]
   return(result);
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	f023 0301 	bic.w	r3, r3, #1
 800af3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	3308      	adds	r3, #8
 800af46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af48:	633a      	str	r2, [r7, #48]	; 0x30
 800af4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af50:	e841 2300 	strex	r3, r2, [r1]
 800af54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e5      	bne.n	800af28 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d12e      	bne.n	800afce <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	e853 3f00 	ldrex	r3, [r3]
 800af82:	60fb      	str	r3, [r7, #12]
   return(result);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f023 0310 	bic.w	r3, r3, #16
 800af8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	461a      	mov	r2, r3
 800af92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af94:	61fb      	str	r3, [r7, #28]
 800af96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af98:	69b9      	ldr	r1, [r7, #24]
 800af9a:	69fa      	ldr	r2, [r7, #28]
 800af9c:	e841 2300 	strex	r3, r2, [r1]
 800afa0:	617b      	str	r3, [r7, #20]
   return(result);
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1e6      	bne.n	800af76 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	f003 0310 	and.w	r3, r3, #16
 800afb2:	2b10      	cmp	r3, #16
 800afb4:	d103      	bne.n	800afbe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2210      	movs	r2, #16
 800afbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff fa84 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800afcc:	e00b      	b.n	800afe6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7f5 ffdc 	bl	8000f8c <HAL_UART_RxCpltCallback>
}
 800afd4:	e007      	b.n	800afe6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	699a      	ldr	r2, [r3, #24]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f042 0208 	orr.w	r2, r2, #8
 800afe4:	619a      	str	r2, [r3, #24]
}
 800afe6:	bf00      	nop
 800afe8:	3758      	adds	r7, #88	; 0x58
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b096      	sub	sp, #88	; 0x58
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800affc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b004:	2b22      	cmp	r3, #34	; 0x22
 800b006:	f040 8094 	bne.w	800b132 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b010:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b018:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b01a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b01e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b022:	4013      	ands	r3, r2
 800b024:	b29a      	uxth	r2, r3
 800b026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b028:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b02e:	1c9a      	adds	r2, r3, #2
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	3b01      	subs	r3, #1
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d177      	bne.n	800b142 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05a:	e853 3f00 	ldrex	r3, [r3]
 800b05e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b066:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	461a      	mov	r2, r3
 800b06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b070:	643b      	str	r3, [r7, #64]	; 0x40
 800b072:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b078:	e841 2300 	strex	r3, r2, [r1]
 800b07c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1e6      	bne.n	800b052 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3308      	adds	r3, #8
 800b08a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	e853 3f00 	ldrex	r3, [r3]
 800b092:	61fb      	str	r3, [r7, #28]
   return(result);
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	f023 0301 	bic.w	r3, r3, #1
 800b09a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ac:	e841 2300 	strex	r3, r2, [r1]
 800b0b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e5      	bne.n	800b084 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d12e      	bne.n	800b12a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f023 0310 	bic.w	r3, r3, #16
 800b0e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0f0:	61bb      	str	r3, [r7, #24]
 800b0f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	6979      	ldr	r1, [r7, #20]
 800b0f6:	69ba      	ldr	r2, [r7, #24]
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e6      	bne.n	800b0d2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	f003 0310 	and.w	r3, r3, #16
 800b10e:	2b10      	cmp	r3, #16
 800b110:	d103      	bne.n	800b11a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2210      	movs	r2, #16
 800b118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7ff f9d6 	bl	800a4d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b128:	e00b      	b.n	800b142 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7f5 ff2e 	bl	8000f8c <HAL_UART_RxCpltCallback>
}
 800b130:	e007      	b.n	800b142 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	699a      	ldr	r2, [r3, #24]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f042 0208 	orr.w	r2, r2, #8
 800b140:	619a      	str	r2, [r3, #24]
}
 800b142:	bf00      	nop
 800b144:	3758      	adds	r7, #88	; 0x58
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b152:	bf00      	nop
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
	...

0800b160 <__libc_init_array>:
 800b160:	b570      	push	{r4, r5, r6, lr}
 800b162:	4e0d      	ldr	r6, [pc, #52]	; (800b198 <__libc_init_array+0x38>)
 800b164:	4c0d      	ldr	r4, [pc, #52]	; (800b19c <__libc_init_array+0x3c>)
 800b166:	1ba4      	subs	r4, r4, r6
 800b168:	10a4      	asrs	r4, r4, #2
 800b16a:	2500      	movs	r5, #0
 800b16c:	42a5      	cmp	r5, r4
 800b16e:	d109      	bne.n	800b184 <__libc_init_array+0x24>
 800b170:	4e0b      	ldr	r6, [pc, #44]	; (800b1a0 <__libc_init_array+0x40>)
 800b172:	4c0c      	ldr	r4, [pc, #48]	; (800b1a4 <__libc_init_array+0x44>)
 800b174:	f001 f832 	bl	800c1dc <_init>
 800b178:	1ba4      	subs	r4, r4, r6
 800b17a:	10a4      	asrs	r4, r4, #2
 800b17c:	2500      	movs	r5, #0
 800b17e:	42a5      	cmp	r5, r4
 800b180:	d105      	bne.n	800b18e <__libc_init_array+0x2e>
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b188:	4798      	blx	r3
 800b18a:	3501      	adds	r5, #1
 800b18c:	e7ee      	b.n	800b16c <__libc_init_array+0xc>
 800b18e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b192:	4798      	blx	r3
 800b194:	3501      	adds	r5, #1
 800b196:	e7f2      	b.n	800b17e <__libc_init_array+0x1e>
 800b198:	0800c550 	.word	0x0800c550
 800b19c:	0800c550 	.word	0x0800c550
 800b1a0:	0800c550 	.word	0x0800c550
 800b1a4:	0800c554 	.word	0x0800c554

0800b1a8 <memset>:
 800b1a8:	4402      	add	r2, r0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d100      	bne.n	800b1b2 <memset+0xa>
 800b1b0:	4770      	bx	lr
 800b1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1b6:	e7f9      	b.n	800b1ac <memset+0x4>

0800b1b8 <sin>:
 800b1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1ba:	ec51 0b10 	vmov	r0, r1, d0
 800b1be:	4a20      	ldr	r2, [pc, #128]	; (800b240 <sin+0x88>)
 800b1c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	dc07      	bgt.n	800b1d8 <sin+0x20>
 800b1c8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b238 <sin+0x80>
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	f000 fe37 	bl	800be40 <__kernel_sin>
 800b1d2:	ec51 0b10 	vmov	r0, r1, d0
 800b1d6:	e007      	b.n	800b1e8 <sin+0x30>
 800b1d8:	4a1a      	ldr	r2, [pc, #104]	; (800b244 <sin+0x8c>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	dd09      	ble.n	800b1f2 <sin+0x3a>
 800b1de:	ee10 2a10 	vmov	r2, s0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	f7f4 fffc 	bl	80001e0 <__aeabi_dsub>
 800b1e8:	ec41 0b10 	vmov	d0, r0, r1
 800b1ec:	b005      	add	sp, #20
 800b1ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1f2:	4668      	mov	r0, sp
 800b1f4:	f000 f828 	bl	800b248 <__ieee754_rem_pio2>
 800b1f8:	f000 0003 	and.w	r0, r0, #3
 800b1fc:	2801      	cmp	r0, #1
 800b1fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b202:	ed9d 0b00 	vldr	d0, [sp]
 800b206:	d004      	beq.n	800b212 <sin+0x5a>
 800b208:	2802      	cmp	r0, #2
 800b20a:	d005      	beq.n	800b218 <sin+0x60>
 800b20c:	b970      	cbnz	r0, 800b22c <sin+0x74>
 800b20e:	2001      	movs	r0, #1
 800b210:	e7dd      	b.n	800b1ce <sin+0x16>
 800b212:	f000 fa0d 	bl	800b630 <__kernel_cos>
 800b216:	e7dc      	b.n	800b1d2 <sin+0x1a>
 800b218:	2001      	movs	r0, #1
 800b21a:	f000 fe11 	bl	800be40 <__kernel_sin>
 800b21e:	ec53 2b10 	vmov	r2, r3, d0
 800b222:	ee10 0a10 	vmov	r0, s0
 800b226:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b22a:	e7dd      	b.n	800b1e8 <sin+0x30>
 800b22c:	f000 fa00 	bl	800b630 <__kernel_cos>
 800b230:	e7f5      	b.n	800b21e <sin+0x66>
 800b232:	bf00      	nop
 800b234:	f3af 8000 	nop.w
	...
 800b240:	3fe921fb 	.word	0x3fe921fb
 800b244:	7fefffff 	.word	0x7fefffff

0800b248 <__ieee754_rem_pio2>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	ec57 6b10 	vmov	r6, r7, d0
 800b250:	4bc3      	ldr	r3, [pc, #780]	; (800b560 <__ieee754_rem_pio2+0x318>)
 800b252:	b08d      	sub	sp, #52	; 0x34
 800b254:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b258:	4598      	cmp	r8, r3
 800b25a:	4604      	mov	r4, r0
 800b25c:	9704      	str	r7, [sp, #16]
 800b25e:	dc07      	bgt.n	800b270 <__ieee754_rem_pio2+0x28>
 800b260:	2200      	movs	r2, #0
 800b262:	2300      	movs	r3, #0
 800b264:	ed84 0b00 	vstr	d0, [r4]
 800b268:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b26c:	2500      	movs	r5, #0
 800b26e:	e027      	b.n	800b2c0 <__ieee754_rem_pio2+0x78>
 800b270:	4bbc      	ldr	r3, [pc, #752]	; (800b564 <__ieee754_rem_pio2+0x31c>)
 800b272:	4598      	cmp	r8, r3
 800b274:	dc75      	bgt.n	800b362 <__ieee754_rem_pio2+0x11a>
 800b276:	9b04      	ldr	r3, [sp, #16]
 800b278:	4dbb      	ldr	r5, [pc, #748]	; (800b568 <__ieee754_rem_pio2+0x320>)
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	ee10 0a10 	vmov	r0, s0
 800b280:	a3a9      	add	r3, pc, #676	; (adr r3, 800b528 <__ieee754_rem_pio2+0x2e0>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	4639      	mov	r1, r7
 800b288:	dd36      	ble.n	800b2f8 <__ieee754_rem_pio2+0xb0>
 800b28a:	f7f4 ffa9 	bl	80001e0 <__aeabi_dsub>
 800b28e:	45a8      	cmp	r8, r5
 800b290:	4606      	mov	r6, r0
 800b292:	460f      	mov	r7, r1
 800b294:	d018      	beq.n	800b2c8 <__ieee754_rem_pio2+0x80>
 800b296:	a3a6      	add	r3, pc, #664	; (adr r3, 800b530 <__ieee754_rem_pio2+0x2e8>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f7f4 ffa0 	bl	80001e0 <__aeabi_dsub>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	e9c4 2300 	strd	r2, r3, [r4]
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f4 ff98 	bl	80001e0 <__aeabi_dsub>
 800b2b0:	a39f      	add	r3, pc, #636	; (adr r3, 800b530 <__ieee754_rem_pio2+0x2e8>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	f7f4 ff93 	bl	80001e0 <__aeabi_dsub>
 800b2ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2be:	2501      	movs	r5, #1
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	b00d      	add	sp, #52	; 0x34
 800b2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c8:	a39b      	add	r3, pc, #620	; (adr r3, 800b538 <__ieee754_rem_pio2+0x2f0>)
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	f7f4 ff87 	bl	80001e0 <__aeabi_dsub>
 800b2d2:	a39b      	add	r3, pc, #620	; (adr r3, 800b540 <__ieee754_rem_pio2+0x2f8>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	4606      	mov	r6, r0
 800b2da:	460f      	mov	r7, r1
 800b2dc:	f7f4 ff80 	bl	80001e0 <__aeabi_dsub>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	e9c4 2300 	strd	r2, r3, [r4]
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f4 ff78 	bl	80001e0 <__aeabi_dsub>
 800b2f0:	a393      	add	r3, pc, #588	; (adr r3, 800b540 <__ieee754_rem_pio2+0x2f8>)
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	e7de      	b.n	800b2b6 <__ieee754_rem_pio2+0x6e>
 800b2f8:	f7f4 ff74 	bl	80001e4 <__adddf3>
 800b2fc:	45a8      	cmp	r8, r5
 800b2fe:	4606      	mov	r6, r0
 800b300:	460f      	mov	r7, r1
 800b302:	d016      	beq.n	800b332 <__ieee754_rem_pio2+0xea>
 800b304:	a38a      	add	r3, pc, #552	; (adr r3, 800b530 <__ieee754_rem_pio2+0x2e8>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	f7f4 ff6b 	bl	80001e4 <__adddf3>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	e9c4 2300 	strd	r2, r3, [r4]
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	f7f4 ff61 	bl	80001e0 <__aeabi_dsub>
 800b31e:	a384      	add	r3, pc, #528	; (adr r3, 800b530 <__ieee754_rem_pio2+0x2e8>)
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	f7f4 ff5e 	bl	80001e4 <__adddf3>
 800b328:	f04f 35ff 	mov.w	r5, #4294967295
 800b32c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b330:	e7c6      	b.n	800b2c0 <__ieee754_rem_pio2+0x78>
 800b332:	a381      	add	r3, pc, #516	; (adr r3, 800b538 <__ieee754_rem_pio2+0x2f0>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f4 ff54 	bl	80001e4 <__adddf3>
 800b33c:	a380      	add	r3, pc, #512	; (adr r3, 800b540 <__ieee754_rem_pio2+0x2f8>)
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	f7f4 ff4d 	bl	80001e4 <__adddf3>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	e9c4 2300 	strd	r2, r3, [r4]
 800b352:	4630      	mov	r0, r6
 800b354:	4639      	mov	r1, r7
 800b356:	f7f4 ff43 	bl	80001e0 <__aeabi_dsub>
 800b35a:	a379      	add	r3, pc, #484	; (adr r3, 800b540 <__ieee754_rem_pio2+0x2f8>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	e7e0      	b.n	800b324 <__ieee754_rem_pio2+0xdc>
 800b362:	4b82      	ldr	r3, [pc, #520]	; (800b56c <__ieee754_rem_pio2+0x324>)
 800b364:	4598      	cmp	r8, r3
 800b366:	f300 80d0 	bgt.w	800b50a <__ieee754_rem_pio2+0x2c2>
 800b36a:	f000 fe23 	bl	800bfb4 <fabs>
 800b36e:	ec57 6b10 	vmov	r6, r7, d0
 800b372:	ee10 0a10 	vmov	r0, s0
 800b376:	a374      	add	r3, pc, #464	; (adr r3, 800b548 <__ieee754_rem_pio2+0x300>)
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f5 f8e7 	bl	8000550 <__aeabi_dmul>
 800b382:	2200      	movs	r2, #0
 800b384:	4b7a      	ldr	r3, [pc, #488]	; (800b570 <__ieee754_rem_pio2+0x328>)
 800b386:	f7f4 ff2d 	bl	80001e4 <__adddf3>
 800b38a:	f7f5 fb7b 	bl	8000a84 <__aeabi_d2iz>
 800b38e:	4605      	mov	r5, r0
 800b390:	f7f5 f874 	bl	800047c <__aeabi_i2d>
 800b394:	a364      	add	r3, pc, #400	; (adr r3, 800b528 <__ieee754_rem_pio2+0x2e0>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39e:	f7f5 f8d7 	bl	8000550 <__aeabi_dmul>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f4 ff19 	bl	80001e0 <__aeabi_dsub>
 800b3ae:	a360      	add	r3, pc, #384	; (adr r3, 800b530 <__ieee754_rem_pio2+0x2e8>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	468b      	mov	fp, r1
 800b3b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3bc:	f7f5 f8c8 	bl	8000550 <__aeabi_dmul>
 800b3c0:	2d1f      	cmp	r5, #31
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	dc0c      	bgt.n	800b3e2 <__ieee754_rem_pio2+0x19a>
 800b3c8:	1e6a      	subs	r2, r5, #1
 800b3ca:	4b6a      	ldr	r3, [pc, #424]	; (800b574 <__ieee754_rem_pio2+0x32c>)
 800b3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d0:	4543      	cmp	r3, r8
 800b3d2:	d006      	beq.n	800b3e2 <__ieee754_rem_pio2+0x19a>
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	4650      	mov	r0, sl
 800b3da:	4659      	mov	r1, fp
 800b3dc:	f7f4 ff00 	bl	80001e0 <__aeabi_dsub>
 800b3e0:	e00e      	b.n	800b400 <__ieee754_rem_pio2+0x1b8>
 800b3e2:	4632      	mov	r2, r6
 800b3e4:	463b      	mov	r3, r7
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	4659      	mov	r1, fp
 800b3ea:	f7f4 fef9 	bl	80001e0 <__aeabi_dsub>
 800b3ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b3f2:	9305      	str	r3, [sp, #20]
 800b3f4:	9a05      	ldr	r2, [sp, #20]
 800b3f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	2b10      	cmp	r3, #16
 800b3fe:	dc02      	bgt.n	800b406 <__ieee754_rem_pio2+0x1be>
 800b400:	e9c4 0100 	strd	r0, r1, [r4]
 800b404:	e039      	b.n	800b47a <__ieee754_rem_pio2+0x232>
 800b406:	a34c      	add	r3, pc, #304	; (adr r3, 800b538 <__ieee754_rem_pio2+0x2f0>)
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b410:	f7f5 f89e 	bl	8000550 <__aeabi_dmul>
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4650      	mov	r0, sl
 800b41e:	4659      	mov	r1, fp
 800b420:	f7f4 fede 	bl	80001e0 <__aeabi_dsub>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4680      	mov	r8, r0
 800b42a:	4689      	mov	r9, r1
 800b42c:	4650      	mov	r0, sl
 800b42e:	4659      	mov	r1, fp
 800b430:	f7f4 fed6 	bl	80001e0 <__aeabi_dsub>
 800b434:	4632      	mov	r2, r6
 800b436:	463b      	mov	r3, r7
 800b438:	f7f4 fed2 	bl	80001e0 <__aeabi_dsub>
 800b43c:	a340      	add	r3, pc, #256	; (adr r3, 800b540 <__ieee754_rem_pio2+0x2f8>)
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	4606      	mov	r6, r0
 800b444:	460f      	mov	r7, r1
 800b446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b44a:	f7f5 f881 	bl	8000550 <__aeabi_dmul>
 800b44e:	4632      	mov	r2, r6
 800b450:	463b      	mov	r3, r7
 800b452:	f7f4 fec5 	bl	80001e0 <__aeabi_dsub>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4606      	mov	r6, r0
 800b45c:	460f      	mov	r7, r1
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f4 febd 	bl	80001e0 <__aeabi_dsub>
 800b466:	9a05      	ldr	r2, [sp, #20]
 800b468:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b31      	cmp	r3, #49	; 0x31
 800b470:	dc20      	bgt.n	800b4b4 <__ieee754_rem_pio2+0x26c>
 800b472:	e9c4 0100 	strd	r0, r1, [r4]
 800b476:	46c2      	mov	sl, r8
 800b478:	46cb      	mov	fp, r9
 800b47a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b47e:	4650      	mov	r0, sl
 800b480:	4642      	mov	r2, r8
 800b482:	464b      	mov	r3, r9
 800b484:	4659      	mov	r1, fp
 800b486:	f7f4 feab 	bl	80001e0 <__aeabi_dsub>
 800b48a:	463b      	mov	r3, r7
 800b48c:	4632      	mov	r2, r6
 800b48e:	f7f4 fea7 	bl	80001e0 <__aeabi_dsub>
 800b492:	9b04      	ldr	r3, [sp, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b49a:	f6bf af11 	bge.w	800b2c0 <__ieee754_rem_pio2+0x78>
 800b49e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b4a2:	6063      	str	r3, [r4, #4]
 800b4a4:	f8c4 8000 	str.w	r8, [r4]
 800b4a8:	60a0      	str	r0, [r4, #8]
 800b4aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4ae:	60e3      	str	r3, [r4, #12]
 800b4b0:	426d      	negs	r5, r5
 800b4b2:	e705      	b.n	800b2c0 <__ieee754_rem_pio2+0x78>
 800b4b4:	a326      	add	r3, pc, #152	; (adr r3, 800b550 <__ieee754_rem_pio2+0x308>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4be:	f7f5 f847 	bl	8000550 <__aeabi_dmul>
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f4 fe87 	bl	80001e0 <__aeabi_dsub>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4682      	mov	sl, r0
 800b4d8:	468b      	mov	fp, r1
 800b4da:	4640      	mov	r0, r8
 800b4dc:	4649      	mov	r1, r9
 800b4de:	f7f4 fe7f 	bl	80001e0 <__aeabi_dsub>
 800b4e2:	4632      	mov	r2, r6
 800b4e4:	463b      	mov	r3, r7
 800b4e6:	f7f4 fe7b 	bl	80001e0 <__aeabi_dsub>
 800b4ea:	a31b      	add	r3, pc, #108	; (adr r3, 800b558 <__ieee754_rem_pio2+0x310>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	460f      	mov	r7, r1
 800b4f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4f8:	f7f5 f82a 	bl	8000550 <__aeabi_dmul>
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	463b      	mov	r3, r7
 800b500:	f7f4 fe6e 	bl	80001e0 <__aeabi_dsub>
 800b504:	4606      	mov	r6, r0
 800b506:	460f      	mov	r7, r1
 800b508:	e764      	b.n	800b3d4 <__ieee754_rem_pio2+0x18c>
 800b50a:	4b1b      	ldr	r3, [pc, #108]	; (800b578 <__ieee754_rem_pio2+0x330>)
 800b50c:	4598      	cmp	r8, r3
 800b50e:	dd35      	ble.n	800b57c <__ieee754_rem_pio2+0x334>
 800b510:	ee10 2a10 	vmov	r2, s0
 800b514:	463b      	mov	r3, r7
 800b516:	4630      	mov	r0, r6
 800b518:	4639      	mov	r1, r7
 800b51a:	f7f4 fe61 	bl	80001e0 <__aeabi_dsub>
 800b51e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b522:	e9c4 0100 	strd	r0, r1, [r4]
 800b526:	e6a1      	b.n	800b26c <__ieee754_rem_pio2+0x24>
 800b528:	54400000 	.word	0x54400000
 800b52c:	3ff921fb 	.word	0x3ff921fb
 800b530:	1a626331 	.word	0x1a626331
 800b534:	3dd0b461 	.word	0x3dd0b461
 800b538:	1a600000 	.word	0x1a600000
 800b53c:	3dd0b461 	.word	0x3dd0b461
 800b540:	2e037073 	.word	0x2e037073
 800b544:	3ba3198a 	.word	0x3ba3198a
 800b548:	6dc9c883 	.word	0x6dc9c883
 800b54c:	3fe45f30 	.word	0x3fe45f30
 800b550:	2e000000 	.word	0x2e000000
 800b554:	3ba3198a 	.word	0x3ba3198a
 800b558:	252049c1 	.word	0x252049c1
 800b55c:	397b839a 	.word	0x397b839a
 800b560:	3fe921fb 	.word	0x3fe921fb
 800b564:	4002d97b 	.word	0x4002d97b
 800b568:	3ff921fb 	.word	0x3ff921fb
 800b56c:	413921fb 	.word	0x413921fb
 800b570:	3fe00000 	.word	0x3fe00000
 800b574:	0800c36c 	.word	0x0800c36c
 800b578:	7fefffff 	.word	0x7fefffff
 800b57c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b580:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b584:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b588:	4630      	mov	r0, r6
 800b58a:	460f      	mov	r7, r1
 800b58c:	f7f5 fa7a 	bl	8000a84 <__aeabi_d2iz>
 800b590:	f7f4 ff74 	bl	800047c <__aeabi_i2d>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5a0:	f7f4 fe1e 	bl	80001e0 <__aeabi_dsub>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4b1f      	ldr	r3, [pc, #124]	; (800b624 <__ieee754_rem_pio2+0x3dc>)
 800b5a8:	f7f4 ffd2 	bl	8000550 <__aeabi_dmul>
 800b5ac:	460f      	mov	r7, r1
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	f7f5 fa68 	bl	8000a84 <__aeabi_d2iz>
 800b5b4:	f7f4 ff62 	bl	800047c <__aeabi_i2d>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4630      	mov	r0, r6
 800b5be:	4639      	mov	r1, r7
 800b5c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5c4:	f7f4 fe0c 	bl	80001e0 <__aeabi_dsub>
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4b16      	ldr	r3, [pc, #88]	; (800b624 <__ieee754_rem_pio2+0x3dc>)
 800b5cc:	f7f4 ffc0 	bl	8000550 <__aeabi_dmul>
 800b5d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b5d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b5d8:	f04f 0803 	mov.w	r8, #3
 800b5dc:	2600      	movs	r6, #0
 800b5de:	2700      	movs	r7, #0
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	463b      	mov	r3, r7
 800b5e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b5e8:	f108 3aff 	add.w	sl, r8, #4294967295
 800b5ec:	f7f5 fa18 	bl	8000a20 <__aeabi_dcmpeq>
 800b5f0:	b9b0      	cbnz	r0, 800b620 <__ieee754_rem_pio2+0x3d8>
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <__ieee754_rem_pio2+0x3e0>)
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4643      	mov	r3, r8
 800b5fe:	4621      	mov	r1, r4
 800b600:	a806      	add	r0, sp, #24
 800b602:	f000 f8dd 	bl	800b7c0 <__kernel_rem_pio2>
 800b606:	9b04      	ldr	r3, [sp, #16]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	4605      	mov	r5, r0
 800b60c:	f6bf ae58 	bge.w	800b2c0 <__ieee754_rem_pio2+0x78>
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b616:	6063      	str	r3, [r4, #4]
 800b618:	68e3      	ldr	r3, [r4, #12]
 800b61a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b61e:	e746      	b.n	800b4ae <__ieee754_rem_pio2+0x266>
 800b620:	46d0      	mov	r8, sl
 800b622:	e7dd      	b.n	800b5e0 <__ieee754_rem_pio2+0x398>
 800b624:	41700000 	.word	0x41700000
 800b628:	0800c3ec 	.word	0x0800c3ec
 800b62c:	00000000 	.word	0x00000000

0800b630 <__kernel_cos>:
 800b630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	ec59 8b10 	vmov	r8, r9, d0
 800b638:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b63c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b640:	ed2d 8b02 	vpush	{d8}
 800b644:	eeb0 8a41 	vmov.f32	s16, s2
 800b648:	eef0 8a61 	vmov.f32	s17, s3
 800b64c:	da07      	bge.n	800b65e <__kernel_cos+0x2e>
 800b64e:	ee10 0a10 	vmov	r0, s0
 800b652:	4649      	mov	r1, r9
 800b654:	f7f5 fa16 	bl	8000a84 <__aeabi_d2iz>
 800b658:	2800      	cmp	r0, #0
 800b65a:	f000 8089 	beq.w	800b770 <__kernel_cos+0x140>
 800b65e:	4642      	mov	r2, r8
 800b660:	464b      	mov	r3, r9
 800b662:	4640      	mov	r0, r8
 800b664:	4649      	mov	r1, r9
 800b666:	f7f4 ff73 	bl	8000550 <__aeabi_dmul>
 800b66a:	2200      	movs	r2, #0
 800b66c:	4b4e      	ldr	r3, [pc, #312]	; (800b7a8 <__kernel_cos+0x178>)
 800b66e:	4604      	mov	r4, r0
 800b670:	460d      	mov	r5, r1
 800b672:	f7f4 ff6d 	bl	8000550 <__aeabi_dmul>
 800b676:	a340      	add	r3, pc, #256	; (adr r3, 800b778 <__kernel_cos+0x148>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	4682      	mov	sl, r0
 800b67e:	468b      	mov	fp, r1
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	f7f4 ff64 	bl	8000550 <__aeabi_dmul>
 800b688:	a33d      	add	r3, pc, #244	; (adr r3, 800b780 <__kernel_cos+0x150>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f7f4 fda9 	bl	80001e4 <__adddf3>
 800b692:	4622      	mov	r2, r4
 800b694:	462b      	mov	r3, r5
 800b696:	f7f4 ff5b 	bl	8000550 <__aeabi_dmul>
 800b69a:	a33b      	add	r3, pc, #236	; (adr r3, 800b788 <__kernel_cos+0x158>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 fd9e 	bl	80001e0 <__aeabi_dsub>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	f7f4 ff52 	bl	8000550 <__aeabi_dmul>
 800b6ac:	a338      	add	r3, pc, #224	; (adr r3, 800b790 <__kernel_cos+0x160>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fd97 	bl	80001e4 <__adddf3>
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	f7f4 ff49 	bl	8000550 <__aeabi_dmul>
 800b6be:	a336      	add	r3, pc, #216	; (adr r3, 800b798 <__kernel_cos+0x168>)
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f7f4 fd8c 	bl	80001e0 <__aeabi_dsub>
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	f7f4 ff40 	bl	8000550 <__aeabi_dmul>
 800b6d0:	a333      	add	r3, pc, #204	; (adr r3, 800b7a0 <__kernel_cos+0x170>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f7f4 fd85 	bl	80001e4 <__adddf3>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	462b      	mov	r3, r5
 800b6de:	f7f4 ff37 	bl	8000550 <__aeabi_dmul>
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	462b      	mov	r3, r5
 800b6e6:	f7f4 ff33 	bl	8000550 <__aeabi_dmul>
 800b6ea:	ec53 2b18 	vmov	r2, r3, d8
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	460d      	mov	r5, r1
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f4 ff2b 	bl	8000550 <__aeabi_dmul>
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	4629      	mov	r1, r5
 800b700:	4620      	mov	r0, r4
 800b702:	f7f4 fd6d 	bl	80001e0 <__aeabi_dsub>
 800b706:	4b29      	ldr	r3, [pc, #164]	; (800b7ac <__kernel_cos+0x17c>)
 800b708:	429e      	cmp	r6, r3
 800b70a:	4680      	mov	r8, r0
 800b70c:	4689      	mov	r9, r1
 800b70e:	dc11      	bgt.n	800b734 <__kernel_cos+0x104>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4650      	mov	r0, sl
 800b716:	4659      	mov	r1, fp
 800b718:	f7f4 fd62 	bl	80001e0 <__aeabi_dsub>
 800b71c:	460b      	mov	r3, r1
 800b71e:	4924      	ldr	r1, [pc, #144]	; (800b7b0 <__kernel_cos+0x180>)
 800b720:	4602      	mov	r2, r0
 800b722:	2000      	movs	r0, #0
 800b724:	f7f4 fd5c 	bl	80001e0 <__aeabi_dsub>
 800b728:	ecbd 8b02 	vpop	{d8}
 800b72c:	ec41 0b10 	vmov	d0, r0, r1
 800b730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b734:	4b1f      	ldr	r3, [pc, #124]	; (800b7b4 <__kernel_cos+0x184>)
 800b736:	491e      	ldr	r1, [pc, #120]	; (800b7b0 <__kernel_cos+0x180>)
 800b738:	429e      	cmp	r6, r3
 800b73a:	bfcc      	ite	gt
 800b73c:	4d1e      	ldrgt	r5, [pc, #120]	; (800b7b8 <__kernel_cos+0x188>)
 800b73e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b742:	2400      	movs	r4, #0
 800b744:	4622      	mov	r2, r4
 800b746:	462b      	mov	r3, r5
 800b748:	2000      	movs	r0, #0
 800b74a:	f7f4 fd49 	bl	80001e0 <__aeabi_dsub>
 800b74e:	4622      	mov	r2, r4
 800b750:	4606      	mov	r6, r0
 800b752:	460f      	mov	r7, r1
 800b754:	462b      	mov	r3, r5
 800b756:	4650      	mov	r0, sl
 800b758:	4659      	mov	r1, fp
 800b75a:	f7f4 fd41 	bl	80001e0 <__aeabi_dsub>
 800b75e:	4642      	mov	r2, r8
 800b760:	464b      	mov	r3, r9
 800b762:	f7f4 fd3d 	bl	80001e0 <__aeabi_dsub>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4630      	mov	r0, r6
 800b76c:	4639      	mov	r1, r7
 800b76e:	e7d9      	b.n	800b724 <__kernel_cos+0xf4>
 800b770:	2000      	movs	r0, #0
 800b772:	490f      	ldr	r1, [pc, #60]	; (800b7b0 <__kernel_cos+0x180>)
 800b774:	e7d8      	b.n	800b728 <__kernel_cos+0xf8>
 800b776:	bf00      	nop
 800b778:	be8838d4 	.word	0xbe8838d4
 800b77c:	bda8fae9 	.word	0xbda8fae9
 800b780:	bdb4b1c4 	.word	0xbdb4b1c4
 800b784:	3e21ee9e 	.word	0x3e21ee9e
 800b788:	809c52ad 	.word	0x809c52ad
 800b78c:	3e927e4f 	.word	0x3e927e4f
 800b790:	19cb1590 	.word	0x19cb1590
 800b794:	3efa01a0 	.word	0x3efa01a0
 800b798:	16c15177 	.word	0x16c15177
 800b79c:	3f56c16c 	.word	0x3f56c16c
 800b7a0:	5555554c 	.word	0x5555554c
 800b7a4:	3fa55555 	.word	0x3fa55555
 800b7a8:	3fe00000 	.word	0x3fe00000
 800b7ac:	3fd33332 	.word	0x3fd33332
 800b7b0:	3ff00000 	.word	0x3ff00000
 800b7b4:	3fe90000 	.word	0x3fe90000
 800b7b8:	3fd20000 	.word	0x3fd20000
 800b7bc:	00000000 	.word	0x00000000

0800b7c0 <__kernel_rem_pio2>:
 800b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	ed2d 8b02 	vpush	{d8}
 800b7c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b7cc:	1ed4      	subs	r4, r2, #3
 800b7ce:	9308      	str	r3, [sp, #32]
 800b7d0:	9101      	str	r1, [sp, #4]
 800b7d2:	4bc5      	ldr	r3, [pc, #788]	; (800bae8 <__kernel_rem_pio2+0x328>)
 800b7d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b7d6:	9009      	str	r0, [sp, #36]	; 0x24
 800b7d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	9b08      	ldr	r3, [sp, #32]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	9307      	str	r3, [sp, #28]
 800b7e4:	2318      	movs	r3, #24
 800b7e6:	fb94 f4f3 	sdiv	r4, r4, r3
 800b7ea:	f06f 0317 	mvn.w	r3, #23
 800b7ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b7f2:	fb04 3303 	mla	r3, r4, r3, r3
 800b7f6:	eb03 0a02 	add.w	sl, r3, r2
 800b7fa:	9b04      	ldr	r3, [sp, #16]
 800b7fc:	9a07      	ldr	r2, [sp, #28]
 800b7fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bad8 <__kernel_rem_pio2+0x318>
 800b802:	eb03 0802 	add.w	r8, r3, r2
 800b806:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b808:	1aa7      	subs	r7, r4, r2
 800b80a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b80e:	ae22      	add	r6, sp, #136	; 0x88
 800b810:	2500      	movs	r5, #0
 800b812:	4545      	cmp	r5, r8
 800b814:	dd13      	ble.n	800b83e <__kernel_rem_pio2+0x7e>
 800b816:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800bad8 <__kernel_rem_pio2+0x318>
 800b81a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b81e:	2600      	movs	r6, #0
 800b820:	9b04      	ldr	r3, [sp, #16]
 800b822:	429e      	cmp	r6, r3
 800b824:	dc32      	bgt.n	800b88c <__kernel_rem_pio2+0xcc>
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	9b08      	ldr	r3, [sp, #32]
 800b82c:	199d      	adds	r5, r3, r6
 800b82e:	ab22      	add	r3, sp, #136	; 0x88
 800b830:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b834:	9306      	str	r3, [sp, #24]
 800b836:	ec59 8b18 	vmov	r8, r9, d8
 800b83a:	2700      	movs	r7, #0
 800b83c:	e01f      	b.n	800b87e <__kernel_rem_pio2+0xbe>
 800b83e:	42ef      	cmn	r7, r5
 800b840:	d407      	bmi.n	800b852 <__kernel_rem_pio2+0x92>
 800b842:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b846:	f7f4 fe19 	bl	800047c <__aeabi_i2d>
 800b84a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b84e:	3501      	adds	r5, #1
 800b850:	e7df      	b.n	800b812 <__kernel_rem_pio2+0x52>
 800b852:	ec51 0b18 	vmov	r0, r1, d8
 800b856:	e7f8      	b.n	800b84a <__kernel_rem_pio2+0x8a>
 800b858:	9906      	ldr	r1, [sp, #24]
 800b85a:	9d02      	ldr	r5, [sp, #8]
 800b85c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b860:	9106      	str	r1, [sp, #24]
 800b862:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b866:	9502      	str	r5, [sp, #8]
 800b868:	f7f4 fe72 	bl	8000550 <__aeabi_dmul>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4640      	mov	r0, r8
 800b872:	4649      	mov	r1, r9
 800b874:	f7f4 fcb6 	bl	80001e4 <__adddf3>
 800b878:	3701      	adds	r7, #1
 800b87a:	4680      	mov	r8, r0
 800b87c:	4689      	mov	r9, r1
 800b87e:	9b07      	ldr	r3, [sp, #28]
 800b880:	429f      	cmp	r7, r3
 800b882:	dde9      	ble.n	800b858 <__kernel_rem_pio2+0x98>
 800b884:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b888:	3601      	adds	r6, #1
 800b88a:	e7c9      	b.n	800b820 <__kernel_rem_pio2+0x60>
 800b88c:	9b04      	ldr	r3, [sp, #16]
 800b88e:	aa0e      	add	r2, sp, #56	; 0x38
 800b890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b894:	930c      	str	r3, [sp, #48]	; 0x30
 800b896:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b898:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b89c:	9c04      	ldr	r4, [sp, #16]
 800b89e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a0:	ab9a      	add	r3, sp, #616	; 0x268
 800b8a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b8a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b8b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b8b6:	ab9a      	add	r3, sp, #616	; 0x268
 800b8b8:	445b      	add	r3, fp
 800b8ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b8be:	2500      	movs	r5, #0
 800b8c0:	1b63      	subs	r3, r4, r5
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	dc78      	bgt.n	800b9b8 <__kernel_rem_pio2+0x1f8>
 800b8c6:	4650      	mov	r0, sl
 800b8c8:	ec49 8b10 	vmov	d0, r8, r9
 800b8cc:	f000 fc00 	bl	800c0d0 <scalbn>
 800b8d0:	ec57 6b10 	vmov	r6, r7, d0
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b8da:	ee10 0a10 	vmov	r0, s0
 800b8de:	4639      	mov	r1, r7
 800b8e0:	f7f4 fe36 	bl	8000550 <__aeabi_dmul>
 800b8e4:	ec41 0b10 	vmov	d0, r0, r1
 800b8e8:	f000 fb6e 	bl	800bfc8 <floor>
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	ec51 0b10 	vmov	r0, r1, d0
 800b8f2:	4b7e      	ldr	r3, [pc, #504]	; (800baec <__kernel_rem_pio2+0x32c>)
 800b8f4:	f7f4 fe2c 	bl	8000550 <__aeabi_dmul>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	4639      	mov	r1, r7
 800b900:	f7f4 fc6e 	bl	80001e0 <__aeabi_dsub>
 800b904:	460f      	mov	r7, r1
 800b906:	4606      	mov	r6, r0
 800b908:	f7f5 f8bc 	bl	8000a84 <__aeabi_d2iz>
 800b90c:	9006      	str	r0, [sp, #24]
 800b90e:	f7f4 fdb5 	bl	800047c <__aeabi_i2d>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f4 fc61 	bl	80001e0 <__aeabi_dsub>
 800b91e:	f1ba 0f00 	cmp.w	sl, #0
 800b922:	4606      	mov	r6, r0
 800b924:	460f      	mov	r7, r1
 800b926:	dd6c      	ble.n	800ba02 <__kernel_rem_pio2+0x242>
 800b928:	1e62      	subs	r2, r4, #1
 800b92a:	ab0e      	add	r3, sp, #56	; 0x38
 800b92c:	f1ca 0118 	rsb	r1, sl, #24
 800b930:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b934:	9d06      	ldr	r5, [sp, #24]
 800b936:	fa40 f301 	asr.w	r3, r0, r1
 800b93a:	441d      	add	r5, r3
 800b93c:	408b      	lsls	r3, r1
 800b93e:	1ac0      	subs	r0, r0, r3
 800b940:	ab0e      	add	r3, sp, #56	; 0x38
 800b942:	9506      	str	r5, [sp, #24]
 800b944:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b948:	f1ca 0317 	rsb	r3, sl, #23
 800b94c:	fa40 f303 	asr.w	r3, r0, r3
 800b950:	9302      	str	r3, [sp, #8]
 800b952:	9b02      	ldr	r3, [sp, #8]
 800b954:	2b00      	cmp	r3, #0
 800b956:	dd62      	ble.n	800ba1e <__kernel_rem_pio2+0x25e>
 800b958:	9b06      	ldr	r3, [sp, #24]
 800b95a:	2200      	movs	r2, #0
 800b95c:	3301      	adds	r3, #1
 800b95e:	9306      	str	r3, [sp, #24]
 800b960:	4615      	mov	r5, r2
 800b962:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b966:	4294      	cmp	r4, r2
 800b968:	f300 8095 	bgt.w	800ba96 <__kernel_rem_pio2+0x2d6>
 800b96c:	f1ba 0f00 	cmp.w	sl, #0
 800b970:	dd07      	ble.n	800b982 <__kernel_rem_pio2+0x1c2>
 800b972:	f1ba 0f01 	cmp.w	sl, #1
 800b976:	f000 80a2 	beq.w	800babe <__kernel_rem_pio2+0x2fe>
 800b97a:	f1ba 0f02 	cmp.w	sl, #2
 800b97e:	f000 80c1 	beq.w	800bb04 <__kernel_rem_pio2+0x344>
 800b982:	9b02      	ldr	r3, [sp, #8]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d14a      	bne.n	800ba1e <__kernel_rem_pio2+0x25e>
 800b988:	4632      	mov	r2, r6
 800b98a:	463b      	mov	r3, r7
 800b98c:	2000      	movs	r0, #0
 800b98e:	4958      	ldr	r1, [pc, #352]	; (800baf0 <__kernel_rem_pio2+0x330>)
 800b990:	f7f4 fc26 	bl	80001e0 <__aeabi_dsub>
 800b994:	4606      	mov	r6, r0
 800b996:	460f      	mov	r7, r1
 800b998:	2d00      	cmp	r5, #0
 800b99a:	d040      	beq.n	800ba1e <__kernel_rem_pio2+0x25e>
 800b99c:	4650      	mov	r0, sl
 800b99e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bae0 <__kernel_rem_pio2+0x320>
 800b9a2:	f000 fb95 	bl	800c0d0 <scalbn>
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	ec53 2b10 	vmov	r2, r3, d0
 800b9ae:	f7f4 fc17 	bl	80001e0 <__aeabi_dsub>
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	460f      	mov	r7, r1
 800b9b6:	e032      	b.n	800ba1e <__kernel_rem_pio2+0x25e>
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4b4e      	ldr	r3, [pc, #312]	; (800baf4 <__kernel_rem_pio2+0x334>)
 800b9bc:	4640      	mov	r0, r8
 800b9be:	4649      	mov	r1, r9
 800b9c0:	f7f4 fdc6 	bl	8000550 <__aeabi_dmul>
 800b9c4:	f7f5 f85e 	bl	8000a84 <__aeabi_d2iz>
 800b9c8:	f7f4 fd58 	bl	800047c <__aeabi_i2d>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4b4a      	ldr	r3, [pc, #296]	; (800baf8 <__kernel_rem_pio2+0x338>)
 800b9d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9d4:	f7f4 fdbc 	bl	8000550 <__aeabi_dmul>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4640      	mov	r0, r8
 800b9de:	4649      	mov	r1, r9
 800b9e0:	f7f4 fbfe 	bl	80001e0 <__aeabi_dsub>
 800b9e4:	f7f5 f84e 	bl	8000a84 <__aeabi_d2iz>
 800b9e8:	ab0e      	add	r3, sp, #56	; 0x38
 800b9ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b9ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b9f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f6:	f7f4 fbf5 	bl	80001e4 <__adddf3>
 800b9fa:	3501      	adds	r5, #1
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	4689      	mov	r9, r1
 800ba00:	e75e      	b.n	800b8c0 <__kernel_rem_pio2+0x100>
 800ba02:	d105      	bne.n	800ba10 <__kernel_rem_pio2+0x250>
 800ba04:	1e63      	subs	r3, r4, #1
 800ba06:	aa0e      	add	r2, sp, #56	; 0x38
 800ba08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ba0c:	15c3      	asrs	r3, r0, #23
 800ba0e:	e79f      	b.n	800b950 <__kernel_rem_pio2+0x190>
 800ba10:	2200      	movs	r2, #0
 800ba12:	4b3a      	ldr	r3, [pc, #232]	; (800bafc <__kernel_rem_pio2+0x33c>)
 800ba14:	f7f5 f822 	bl	8000a5c <__aeabi_dcmpge>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d139      	bne.n	800ba90 <__kernel_rem_pio2+0x2d0>
 800ba1c:	9002      	str	r0, [sp, #8]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2300      	movs	r3, #0
 800ba22:	4630      	mov	r0, r6
 800ba24:	4639      	mov	r1, r7
 800ba26:	f7f4 fffb 	bl	8000a20 <__aeabi_dcmpeq>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f000 80c7 	beq.w	800bbbe <__kernel_rem_pio2+0x3fe>
 800ba30:	1e65      	subs	r5, r4, #1
 800ba32:	462b      	mov	r3, r5
 800ba34:	2200      	movs	r2, #0
 800ba36:	9904      	ldr	r1, [sp, #16]
 800ba38:	428b      	cmp	r3, r1
 800ba3a:	da6a      	bge.n	800bb12 <__kernel_rem_pio2+0x352>
 800ba3c:	2a00      	cmp	r2, #0
 800ba3e:	f000 8088 	beq.w	800bb52 <__kernel_rem_pio2+0x392>
 800ba42:	ab0e      	add	r3, sp, #56	; 0x38
 800ba44:	f1aa 0a18 	sub.w	sl, sl, #24
 800ba48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 80b4 	beq.w	800bbba <__kernel_rem_pio2+0x3fa>
 800ba52:	4650      	mov	r0, sl
 800ba54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800bae0 <__kernel_rem_pio2+0x320>
 800ba58:	f000 fb3a 	bl	800c0d0 <scalbn>
 800ba5c:	00ec      	lsls	r4, r5, #3
 800ba5e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ba60:	191e      	adds	r6, r3, r4
 800ba62:	ec59 8b10 	vmov	r8, r9, d0
 800ba66:	f106 0a08 	add.w	sl, r6, #8
 800ba6a:	462f      	mov	r7, r5
 800ba6c:	2f00      	cmp	r7, #0
 800ba6e:	f280 80df 	bge.w	800bc30 <__kernel_rem_pio2+0x470>
 800ba72:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800bad8 <__kernel_rem_pio2+0x318>
 800ba76:	f04f 0a00 	mov.w	sl, #0
 800ba7a:	eba5 030a 	sub.w	r3, r5, sl
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f2c0 810a 	blt.w	800bc98 <__kernel_rem_pio2+0x4d8>
 800ba84:	f8df b078 	ldr.w	fp, [pc, #120]	; 800bb00 <__kernel_rem_pio2+0x340>
 800ba88:	ec59 8b18 	vmov	r8, r9, d8
 800ba8c:	2700      	movs	r7, #0
 800ba8e:	e0f5      	b.n	800bc7c <__kernel_rem_pio2+0x4bc>
 800ba90:	2302      	movs	r3, #2
 800ba92:	9302      	str	r3, [sp, #8]
 800ba94:	e760      	b.n	800b958 <__kernel_rem_pio2+0x198>
 800ba96:	ab0e      	add	r3, sp, #56	; 0x38
 800ba98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9c:	b94d      	cbnz	r5, 800bab2 <__kernel_rem_pio2+0x2f2>
 800ba9e:	b12b      	cbz	r3, 800baac <__kernel_rem_pio2+0x2ec>
 800baa0:	a80e      	add	r0, sp, #56	; 0x38
 800baa2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800baa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800baaa:	2301      	movs	r3, #1
 800baac:	3201      	adds	r2, #1
 800baae:	461d      	mov	r5, r3
 800bab0:	e759      	b.n	800b966 <__kernel_rem_pio2+0x1a6>
 800bab2:	a80e      	add	r0, sp, #56	; 0x38
 800bab4:	1acb      	subs	r3, r1, r3
 800bab6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800baba:	462b      	mov	r3, r5
 800babc:	e7f6      	b.n	800baac <__kernel_rem_pio2+0x2ec>
 800babe:	1e62      	subs	r2, r4, #1
 800bac0:	ab0e      	add	r3, sp, #56	; 0x38
 800bac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800baca:	a90e      	add	r1, sp, #56	; 0x38
 800bacc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bad0:	e757      	b.n	800b982 <__kernel_rem_pio2+0x1c2>
 800bad2:	bf00      	nop
 800bad4:	f3af 8000 	nop.w
	...
 800bae4:	3ff00000 	.word	0x3ff00000
 800bae8:	0800c538 	.word	0x0800c538
 800baec:	40200000 	.word	0x40200000
 800baf0:	3ff00000 	.word	0x3ff00000
 800baf4:	3e700000 	.word	0x3e700000
 800baf8:	41700000 	.word	0x41700000
 800bafc:	3fe00000 	.word	0x3fe00000
 800bb00:	0800c4f8 	.word	0x0800c4f8
 800bb04:	1e62      	subs	r2, r4, #1
 800bb06:	ab0e      	add	r3, sp, #56	; 0x38
 800bb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bb10:	e7db      	b.n	800baca <__kernel_rem_pio2+0x30a>
 800bb12:	a90e      	add	r1, sp, #56	; 0x38
 800bb14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	430a      	orrs	r2, r1
 800bb1c:	e78b      	b.n	800ba36 <__kernel_rem_pio2+0x276>
 800bb1e:	3301      	adds	r3, #1
 800bb20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bb24:	2900      	cmp	r1, #0
 800bb26:	d0fa      	beq.n	800bb1e <__kernel_rem_pio2+0x35e>
 800bb28:	9a08      	ldr	r2, [sp, #32]
 800bb2a:	4422      	add	r2, r4
 800bb2c:	00d2      	lsls	r2, r2, #3
 800bb2e:	a922      	add	r1, sp, #136	; 0x88
 800bb30:	18e3      	adds	r3, r4, r3
 800bb32:	9206      	str	r2, [sp, #24]
 800bb34:	440a      	add	r2, r1
 800bb36:	9302      	str	r3, [sp, #8]
 800bb38:	f10b 0108 	add.w	r1, fp, #8
 800bb3c:	f102 0308 	add.w	r3, r2, #8
 800bb40:	1c66      	adds	r6, r4, #1
 800bb42:	910a      	str	r1, [sp, #40]	; 0x28
 800bb44:	2500      	movs	r5, #0
 800bb46:	930d      	str	r3, [sp, #52]	; 0x34
 800bb48:	9b02      	ldr	r3, [sp, #8]
 800bb4a:	42b3      	cmp	r3, r6
 800bb4c:	da04      	bge.n	800bb58 <__kernel_rem_pio2+0x398>
 800bb4e:	461c      	mov	r4, r3
 800bb50:	e6a6      	b.n	800b8a0 <__kernel_rem_pio2+0xe0>
 800bb52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb54:	2301      	movs	r3, #1
 800bb56:	e7e3      	b.n	800bb20 <__kernel_rem_pio2+0x360>
 800bb58:	9b06      	ldr	r3, [sp, #24]
 800bb5a:	18ef      	adds	r7, r5, r3
 800bb5c:	ab22      	add	r3, sp, #136	; 0x88
 800bb5e:	441f      	add	r7, r3
 800bb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb66:	f7f4 fc89 	bl	800047c <__aeabi_i2d>
 800bb6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6c:	461c      	mov	r4, r3
 800bb6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb70:	e9c7 0100 	strd	r0, r1, [r7]
 800bb74:	eb03 0b05 	add.w	fp, r3, r5
 800bb78:	2700      	movs	r7, #0
 800bb7a:	f04f 0800 	mov.w	r8, #0
 800bb7e:	f04f 0900 	mov.w	r9, #0
 800bb82:	9b07      	ldr	r3, [sp, #28]
 800bb84:	429f      	cmp	r7, r3
 800bb86:	dd08      	ble.n	800bb9a <__kernel_rem_pio2+0x3da>
 800bb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb8a:	aa72      	add	r2, sp, #456	; 0x1c8
 800bb8c:	18eb      	adds	r3, r5, r3
 800bb8e:	4413      	add	r3, r2
 800bb90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800bb94:	3601      	adds	r6, #1
 800bb96:	3508      	adds	r5, #8
 800bb98:	e7d6      	b.n	800bb48 <__kernel_rem_pio2+0x388>
 800bb9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bb9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bba2:	f7f4 fcd5 	bl	8000550 <__aeabi_dmul>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	4640      	mov	r0, r8
 800bbac:	4649      	mov	r1, r9
 800bbae:	f7f4 fb19 	bl	80001e4 <__adddf3>
 800bbb2:	3701      	adds	r7, #1
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	4689      	mov	r9, r1
 800bbb8:	e7e3      	b.n	800bb82 <__kernel_rem_pio2+0x3c2>
 800bbba:	3d01      	subs	r5, #1
 800bbbc:	e741      	b.n	800ba42 <__kernel_rem_pio2+0x282>
 800bbbe:	f1ca 0000 	rsb	r0, sl, #0
 800bbc2:	ec47 6b10 	vmov	d0, r6, r7
 800bbc6:	f000 fa83 	bl	800c0d0 <scalbn>
 800bbca:	ec57 6b10 	vmov	r6, r7, d0
 800bbce:	2200      	movs	r2, #0
 800bbd0:	4b99      	ldr	r3, [pc, #612]	; (800be38 <__kernel_rem_pio2+0x678>)
 800bbd2:	ee10 0a10 	vmov	r0, s0
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f7f4 ff40 	bl	8000a5c <__aeabi_dcmpge>
 800bbdc:	b1f8      	cbz	r0, 800bc1e <__kernel_rem_pio2+0x45e>
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4b96      	ldr	r3, [pc, #600]	; (800be3c <__kernel_rem_pio2+0x67c>)
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	f7f4 fcb3 	bl	8000550 <__aeabi_dmul>
 800bbea:	f7f4 ff4b 	bl	8000a84 <__aeabi_d2iz>
 800bbee:	4680      	mov	r8, r0
 800bbf0:	f7f4 fc44 	bl	800047c <__aeabi_i2d>
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	4b90      	ldr	r3, [pc, #576]	; (800be38 <__kernel_rem_pio2+0x678>)
 800bbf8:	f7f4 fcaa 	bl	8000550 <__aeabi_dmul>
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4602      	mov	r2, r0
 800bc00:	4639      	mov	r1, r7
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7f4 faec 	bl	80001e0 <__aeabi_dsub>
 800bc08:	f7f4 ff3c 	bl	8000a84 <__aeabi_d2iz>
 800bc0c:	1c65      	adds	r5, r4, #1
 800bc0e:	ab0e      	add	r3, sp, #56	; 0x38
 800bc10:	f10a 0a18 	add.w	sl, sl, #24
 800bc14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bc18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bc1c:	e719      	b.n	800ba52 <__kernel_rem_pio2+0x292>
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	f7f4 ff2f 	bl	8000a84 <__aeabi_d2iz>
 800bc26:	ab0e      	add	r3, sp, #56	; 0x38
 800bc28:	4625      	mov	r5, r4
 800bc2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bc2e:	e710      	b.n	800ba52 <__kernel_rem_pio2+0x292>
 800bc30:	ab0e      	add	r3, sp, #56	; 0x38
 800bc32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bc36:	f7f4 fc21 	bl	800047c <__aeabi_i2d>
 800bc3a:	4642      	mov	r2, r8
 800bc3c:	464b      	mov	r3, r9
 800bc3e:	f7f4 fc87 	bl	8000550 <__aeabi_dmul>
 800bc42:	2200      	movs	r2, #0
 800bc44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bc48:	4b7c      	ldr	r3, [pc, #496]	; (800be3c <__kernel_rem_pio2+0x67c>)
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 fc7f 	bl	8000550 <__aeabi_dmul>
 800bc52:	3f01      	subs	r7, #1
 800bc54:	4680      	mov	r8, r0
 800bc56:	4689      	mov	r9, r1
 800bc58:	e708      	b.n	800ba6c <__kernel_rem_pio2+0x2ac>
 800bc5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800bc66:	f7f4 fc73 	bl	8000550 <__aeabi_dmul>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4640      	mov	r0, r8
 800bc70:	4649      	mov	r1, r9
 800bc72:	f7f4 fab7 	bl	80001e4 <__adddf3>
 800bc76:	3701      	adds	r7, #1
 800bc78:	4680      	mov	r8, r0
 800bc7a:	4689      	mov	r9, r1
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	429f      	cmp	r7, r3
 800bc80:	dc01      	bgt.n	800bc86 <__kernel_rem_pio2+0x4c6>
 800bc82:	45ba      	cmp	sl, r7
 800bc84:	dae9      	bge.n	800bc5a <__kernel_rem_pio2+0x49a>
 800bc86:	ab4a      	add	r3, sp, #296	; 0x128
 800bc88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc8c:	e9c3 8900 	strd	r8, r9, [r3]
 800bc90:	f10a 0a01 	add.w	sl, sl, #1
 800bc94:	3e08      	subs	r6, #8
 800bc96:	e6f0      	b.n	800ba7a <__kernel_rem_pio2+0x2ba>
 800bc98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bc9a:	2b03      	cmp	r3, #3
 800bc9c:	d85b      	bhi.n	800bd56 <__kernel_rem_pio2+0x596>
 800bc9e:	e8df f003 	tbb	[pc, r3]
 800bca2:	264a      	.short	0x264a
 800bca4:	0226      	.short	0x0226
 800bca6:	ab9a      	add	r3, sp, #616	; 0x268
 800bca8:	441c      	add	r4, r3
 800bcaa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bcae:	46a2      	mov	sl, r4
 800bcb0:	46ab      	mov	fp, r5
 800bcb2:	f1bb 0f00 	cmp.w	fp, #0
 800bcb6:	dc6c      	bgt.n	800bd92 <__kernel_rem_pio2+0x5d2>
 800bcb8:	46a2      	mov	sl, r4
 800bcba:	46ab      	mov	fp, r5
 800bcbc:	f1bb 0f01 	cmp.w	fp, #1
 800bcc0:	f300 8086 	bgt.w	800bdd0 <__kernel_rem_pio2+0x610>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	2d01      	cmp	r5, #1
 800bcca:	f300 80a0 	bgt.w	800be0e <__kernel_rem_pio2+0x64e>
 800bcce:	9b02      	ldr	r3, [sp, #8]
 800bcd0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bcd4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f040 809e 	bne.w	800be1a <__kernel_rem_pio2+0x65a>
 800bcde:	9b01      	ldr	r3, [sp, #4]
 800bce0:	e9c3 7800 	strd	r7, r8, [r3]
 800bce4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bce8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bcec:	e033      	b.n	800bd56 <__kernel_rem_pio2+0x596>
 800bcee:	3408      	adds	r4, #8
 800bcf0:	ab4a      	add	r3, sp, #296	; 0x128
 800bcf2:	441c      	add	r4, r3
 800bcf4:	462e      	mov	r6, r5
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	2e00      	cmp	r6, #0
 800bcfc:	da3a      	bge.n	800bd74 <__kernel_rem_pio2+0x5b4>
 800bcfe:	9b02      	ldr	r3, [sp, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d03d      	beq.n	800bd80 <__kernel_rem_pio2+0x5c0>
 800bd04:	4602      	mov	r2, r0
 800bd06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd0a:	9c01      	ldr	r4, [sp, #4]
 800bd0c:	e9c4 2300 	strd	r2, r3, [r4]
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bd18:	f7f4 fa62 	bl	80001e0 <__aeabi_dsub>
 800bd1c:	ae4c      	add	r6, sp, #304	; 0x130
 800bd1e:	2401      	movs	r4, #1
 800bd20:	42a5      	cmp	r5, r4
 800bd22:	da30      	bge.n	800bd86 <__kernel_rem_pio2+0x5c6>
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	b113      	cbz	r3, 800bd2e <__kernel_rem_pio2+0x56e>
 800bd28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	9b01      	ldr	r3, [sp, #4]
 800bd30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bd34:	e00f      	b.n	800bd56 <__kernel_rem_pio2+0x596>
 800bd36:	ab9a      	add	r3, sp, #616	; 0x268
 800bd38:	441c      	add	r4, r3
 800bd3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bd3e:	2000      	movs	r0, #0
 800bd40:	2100      	movs	r1, #0
 800bd42:	2d00      	cmp	r5, #0
 800bd44:	da10      	bge.n	800bd68 <__kernel_rem_pio2+0x5a8>
 800bd46:	9b02      	ldr	r3, [sp, #8]
 800bd48:	b113      	cbz	r3, 800bd50 <__kernel_rem_pio2+0x590>
 800bd4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd4e:	4619      	mov	r1, r3
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	e9c3 0100 	strd	r0, r1, [r3]
 800bd56:	9b06      	ldr	r3, [sp, #24]
 800bd58:	f003 0007 	and.w	r0, r3, #7
 800bd5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bd60:	ecbd 8b02 	vpop	{d8}
 800bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd6c:	f7f4 fa3a 	bl	80001e4 <__adddf3>
 800bd70:	3d01      	subs	r5, #1
 800bd72:	e7e6      	b.n	800bd42 <__kernel_rem_pio2+0x582>
 800bd74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd78:	f7f4 fa34 	bl	80001e4 <__adddf3>
 800bd7c:	3e01      	subs	r6, #1
 800bd7e:	e7bc      	b.n	800bcfa <__kernel_rem_pio2+0x53a>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	e7c1      	b.n	800bd0a <__kernel_rem_pio2+0x54a>
 800bd86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bd8a:	f7f4 fa2b 	bl	80001e4 <__adddf3>
 800bd8e:	3401      	adds	r4, #1
 800bd90:	e7c6      	b.n	800bd20 <__kernel_rem_pio2+0x560>
 800bd92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bd96:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	ec53 2b17 	vmov	r2, r3, d7
 800bda0:	4649      	mov	r1, r9
 800bda2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bda6:	f7f4 fa1d 	bl	80001e4 <__adddf3>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	4640      	mov	r0, r8
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	f7f4 fa13 	bl	80001e0 <__aeabi_dsub>
 800bdba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdbe:	f7f4 fa11 	bl	80001e4 <__adddf3>
 800bdc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdc6:	e9ca 0100 	strd	r0, r1, [sl]
 800bdca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bdce:	e770      	b.n	800bcb2 <__kernel_rem_pio2+0x4f2>
 800bdd0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bdd4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bdd8:	4630      	mov	r0, r6
 800bdda:	ec53 2b17 	vmov	r2, r3, d7
 800bdde:	4639      	mov	r1, r7
 800bde0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bde4:	f7f4 f9fe 	bl	80001e4 <__adddf3>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4680      	mov	r8, r0
 800bdee:	4689      	mov	r9, r1
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 f9f4 	bl	80001e0 <__aeabi_dsub>
 800bdf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdfc:	f7f4 f9f2 	bl	80001e4 <__adddf3>
 800be00:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be04:	e9ca 0100 	strd	r0, r1, [sl]
 800be08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800be0c:	e756      	b.n	800bcbc <__kernel_rem_pio2+0x4fc>
 800be0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800be12:	f7f4 f9e7 	bl	80001e4 <__adddf3>
 800be16:	3d01      	subs	r5, #1
 800be18:	e756      	b.n	800bcc8 <__kernel_rem_pio2+0x508>
 800be1a:	9b01      	ldr	r3, [sp, #4]
 800be1c:	9a01      	ldr	r2, [sp, #4]
 800be1e:	601f      	str	r7, [r3, #0]
 800be20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800be24:	605c      	str	r4, [r3, #4]
 800be26:	609d      	str	r5, [r3, #8]
 800be28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800be2c:	60d3      	str	r3, [r2, #12]
 800be2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be32:	6110      	str	r0, [r2, #16]
 800be34:	6153      	str	r3, [r2, #20]
 800be36:	e78e      	b.n	800bd56 <__kernel_rem_pio2+0x596>
 800be38:	41700000 	.word	0x41700000
 800be3c:	3e700000 	.word	0x3e700000

0800be40 <__kernel_sin>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	ec55 4b10 	vmov	r4, r5, d0
 800be48:	b085      	sub	sp, #20
 800be4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800be4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800be52:	ed8d 1b00 	vstr	d1, [sp]
 800be56:	9002      	str	r0, [sp, #8]
 800be58:	da06      	bge.n	800be68 <__kernel_sin+0x28>
 800be5a:	ee10 0a10 	vmov	r0, s0
 800be5e:	4629      	mov	r1, r5
 800be60:	f7f4 fe10 	bl	8000a84 <__aeabi_d2iz>
 800be64:	2800      	cmp	r0, #0
 800be66:	d051      	beq.n	800bf0c <__kernel_sin+0xcc>
 800be68:	4622      	mov	r2, r4
 800be6a:	462b      	mov	r3, r5
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fb6e 	bl	8000550 <__aeabi_dmul>
 800be74:	4682      	mov	sl, r0
 800be76:	468b      	mov	fp, r1
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4620      	mov	r0, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	f7f4 fb66 	bl	8000550 <__aeabi_dmul>
 800be84:	a341      	add	r3, pc, #260	; (adr r3, 800bf8c <__kernel_sin+0x14c>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	4680      	mov	r8, r0
 800be8c:	4689      	mov	r9, r1
 800be8e:	4650      	mov	r0, sl
 800be90:	4659      	mov	r1, fp
 800be92:	f7f4 fb5d 	bl	8000550 <__aeabi_dmul>
 800be96:	a33f      	add	r3, pc, #252	; (adr r3, 800bf94 <__kernel_sin+0x154>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 f9a0 	bl	80001e0 <__aeabi_dsub>
 800bea0:	4652      	mov	r2, sl
 800bea2:	465b      	mov	r3, fp
 800bea4:	f7f4 fb54 	bl	8000550 <__aeabi_dmul>
 800bea8:	a33c      	add	r3, pc, #240	; (adr r3, 800bf9c <__kernel_sin+0x15c>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	f7f4 f999 	bl	80001e4 <__adddf3>
 800beb2:	4652      	mov	r2, sl
 800beb4:	465b      	mov	r3, fp
 800beb6:	f7f4 fb4b 	bl	8000550 <__aeabi_dmul>
 800beba:	a33a      	add	r3, pc, #232	; (adr r3, 800bfa4 <__kernel_sin+0x164>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	f7f4 f98e 	bl	80001e0 <__aeabi_dsub>
 800bec4:	4652      	mov	r2, sl
 800bec6:	465b      	mov	r3, fp
 800bec8:	f7f4 fb42 	bl	8000550 <__aeabi_dmul>
 800becc:	a337      	add	r3, pc, #220	; (adr r3, 800bfac <__kernel_sin+0x16c>)
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	f7f4 f987 	bl	80001e4 <__adddf3>
 800bed6:	9b02      	ldr	r3, [sp, #8]
 800bed8:	4606      	mov	r6, r0
 800beda:	460f      	mov	r7, r1
 800bedc:	b9db      	cbnz	r3, 800bf16 <__kernel_sin+0xd6>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4650      	mov	r0, sl
 800bee4:	4659      	mov	r1, fp
 800bee6:	f7f4 fb33 	bl	8000550 <__aeabi_dmul>
 800beea:	a325      	add	r3, pc, #148	; (adr r3, 800bf80 <__kernel_sin+0x140>)
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	f7f4 f976 	bl	80001e0 <__aeabi_dsub>
 800bef4:	4642      	mov	r2, r8
 800bef6:	464b      	mov	r3, r9
 800bef8:	f7f4 fb2a 	bl	8000550 <__aeabi_dmul>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	4620      	mov	r0, r4
 800bf02:	4629      	mov	r1, r5
 800bf04:	f7f4 f96e 	bl	80001e4 <__adddf3>
 800bf08:	4604      	mov	r4, r0
 800bf0a:	460d      	mov	r5, r1
 800bf0c:	ec45 4b10 	vmov	d0, r4, r5
 800bf10:	b005      	add	sp, #20
 800bf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf16:	2200      	movs	r2, #0
 800bf18:	4b1b      	ldr	r3, [pc, #108]	; (800bf88 <__kernel_sin+0x148>)
 800bf1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf1e:	f7f4 fb17 	bl	8000550 <__aeabi_dmul>
 800bf22:	4632      	mov	r2, r6
 800bf24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf28:	463b      	mov	r3, r7
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	f7f4 fb0f 	bl	8000550 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf3a:	f7f4 f951 	bl	80001e0 <__aeabi_dsub>
 800bf3e:	4652      	mov	r2, sl
 800bf40:	465b      	mov	r3, fp
 800bf42:	f7f4 fb05 	bl	8000550 <__aeabi_dmul>
 800bf46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf4a:	f7f4 f949 	bl	80001e0 <__aeabi_dsub>
 800bf4e:	a30c      	add	r3, pc, #48	; (adr r3, 800bf80 <__kernel_sin+0x140>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	f7f4 faf8 	bl	8000550 <__aeabi_dmul>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4630      	mov	r0, r6
 800bf66:	4639      	mov	r1, r7
 800bf68:	f7f4 f93c 	bl	80001e4 <__adddf3>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4620      	mov	r0, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	f7f4 f934 	bl	80001e0 <__aeabi_dsub>
 800bf78:	e7c6      	b.n	800bf08 <__kernel_sin+0xc8>
 800bf7a:	bf00      	nop
 800bf7c:	f3af 8000 	nop.w
 800bf80:	55555549 	.word	0x55555549
 800bf84:	3fc55555 	.word	0x3fc55555
 800bf88:	3fe00000 	.word	0x3fe00000
 800bf8c:	5acfd57c 	.word	0x5acfd57c
 800bf90:	3de5d93a 	.word	0x3de5d93a
 800bf94:	8a2b9ceb 	.word	0x8a2b9ceb
 800bf98:	3e5ae5e6 	.word	0x3e5ae5e6
 800bf9c:	57b1fe7d 	.word	0x57b1fe7d
 800bfa0:	3ec71de3 	.word	0x3ec71de3
 800bfa4:	19c161d5 	.word	0x19c161d5
 800bfa8:	3f2a01a0 	.word	0x3f2a01a0
 800bfac:	1110f8a6 	.word	0x1110f8a6
 800bfb0:	3f811111 	.word	0x3f811111

0800bfb4 <fabs>:
 800bfb4:	ec51 0b10 	vmov	r0, r1, d0
 800bfb8:	ee10 2a10 	vmov	r2, s0
 800bfbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfc0:	ec43 2b10 	vmov	d0, r2, r3
 800bfc4:	4770      	bx	lr
	...

0800bfc8 <floor>:
 800bfc8:	ec51 0b10 	vmov	r0, r1, d0
 800bfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bfd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bfd8:	2e13      	cmp	r6, #19
 800bfda:	460c      	mov	r4, r1
 800bfdc:	ee10 5a10 	vmov	r5, s0
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	dc34      	bgt.n	800c04e <floor+0x86>
 800bfe4:	2e00      	cmp	r6, #0
 800bfe6:	da16      	bge.n	800c016 <floor+0x4e>
 800bfe8:	a335      	add	r3, pc, #212	; (adr r3, 800c0c0 <floor+0xf8>)
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f7f4 f8f9 	bl	80001e4 <__adddf3>
 800bff2:	2200      	movs	r2, #0
 800bff4:	2300      	movs	r3, #0
 800bff6:	f7f4 fd3b 	bl	8000a70 <__aeabi_dcmpgt>
 800bffa:	b148      	cbz	r0, 800c010 <floor+0x48>
 800bffc:	2c00      	cmp	r4, #0
 800bffe:	da59      	bge.n	800c0b4 <floor+0xec>
 800c000:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c004:	4a30      	ldr	r2, [pc, #192]	; (800c0c8 <floor+0x100>)
 800c006:	432b      	orrs	r3, r5
 800c008:	2500      	movs	r5, #0
 800c00a:	42ab      	cmp	r3, r5
 800c00c:	bf18      	it	ne
 800c00e:	4614      	movne	r4, r2
 800c010:	4621      	mov	r1, r4
 800c012:	4628      	mov	r0, r5
 800c014:	e025      	b.n	800c062 <floor+0x9a>
 800c016:	4f2d      	ldr	r7, [pc, #180]	; (800c0cc <floor+0x104>)
 800c018:	4137      	asrs	r7, r6
 800c01a:	ea01 0307 	and.w	r3, r1, r7
 800c01e:	4303      	orrs	r3, r0
 800c020:	d01f      	beq.n	800c062 <floor+0x9a>
 800c022:	a327      	add	r3, pc, #156	; (adr r3, 800c0c0 <floor+0xf8>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	f7f4 f8dc 	bl	80001e4 <__adddf3>
 800c02c:	2200      	movs	r2, #0
 800c02e:	2300      	movs	r3, #0
 800c030:	f7f4 fd1e 	bl	8000a70 <__aeabi_dcmpgt>
 800c034:	2800      	cmp	r0, #0
 800c036:	d0eb      	beq.n	800c010 <floor+0x48>
 800c038:	2c00      	cmp	r4, #0
 800c03a:	bfbe      	ittt	lt
 800c03c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c040:	fa43 f606 	asrlt.w	r6, r3, r6
 800c044:	19a4      	addlt	r4, r4, r6
 800c046:	ea24 0407 	bic.w	r4, r4, r7
 800c04a:	2500      	movs	r5, #0
 800c04c:	e7e0      	b.n	800c010 <floor+0x48>
 800c04e:	2e33      	cmp	r6, #51	; 0x33
 800c050:	dd0b      	ble.n	800c06a <floor+0xa2>
 800c052:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c056:	d104      	bne.n	800c062 <floor+0x9a>
 800c058:	ee10 2a10 	vmov	r2, s0
 800c05c:	460b      	mov	r3, r1
 800c05e:	f7f4 f8c1 	bl	80001e4 <__adddf3>
 800c062:	ec41 0b10 	vmov	d0, r0, r1
 800c066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c06a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c06e:	f04f 33ff 	mov.w	r3, #4294967295
 800c072:	fa23 f707 	lsr.w	r7, r3, r7
 800c076:	4207      	tst	r7, r0
 800c078:	d0f3      	beq.n	800c062 <floor+0x9a>
 800c07a:	a311      	add	r3, pc, #68	; (adr r3, 800c0c0 <floor+0xf8>)
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	f7f4 f8b0 	bl	80001e4 <__adddf3>
 800c084:	2200      	movs	r2, #0
 800c086:	2300      	movs	r3, #0
 800c088:	f7f4 fcf2 	bl	8000a70 <__aeabi_dcmpgt>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d0bf      	beq.n	800c010 <floor+0x48>
 800c090:	2c00      	cmp	r4, #0
 800c092:	da02      	bge.n	800c09a <floor+0xd2>
 800c094:	2e14      	cmp	r6, #20
 800c096:	d103      	bne.n	800c0a0 <floor+0xd8>
 800c098:	3401      	adds	r4, #1
 800c09a:	ea25 0507 	bic.w	r5, r5, r7
 800c09e:	e7b7      	b.n	800c010 <floor+0x48>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c0a6:	fa03 f606 	lsl.w	r6, r3, r6
 800c0aa:	4435      	add	r5, r6
 800c0ac:	4545      	cmp	r5, r8
 800c0ae:	bf38      	it	cc
 800c0b0:	18e4      	addcc	r4, r4, r3
 800c0b2:	e7f2      	b.n	800c09a <floor+0xd2>
 800c0b4:	2500      	movs	r5, #0
 800c0b6:	462c      	mov	r4, r5
 800c0b8:	e7aa      	b.n	800c010 <floor+0x48>
 800c0ba:	bf00      	nop
 800c0bc:	f3af 8000 	nop.w
 800c0c0:	8800759c 	.word	0x8800759c
 800c0c4:	7e37e43c 	.word	0x7e37e43c
 800c0c8:	bff00000 	.word	0xbff00000
 800c0cc:	000fffff 	.word	0x000fffff

0800c0d0 <scalbn>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	ec55 4b10 	vmov	r4, r5, d0
 800c0d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c0da:	4606      	mov	r6, r0
 800c0dc:	462b      	mov	r3, r5
 800c0de:	b9aa      	cbnz	r2, 800c10c <scalbn+0x3c>
 800c0e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c0e4:	4323      	orrs	r3, r4
 800c0e6:	d03b      	beq.n	800c160 <scalbn+0x90>
 800c0e8:	4b31      	ldr	r3, [pc, #196]	; (800c1b0 <scalbn+0xe0>)
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	ee10 0a10 	vmov	r0, s0
 800c0f2:	f7f4 fa2d 	bl	8000550 <__aeabi_dmul>
 800c0f6:	4b2f      	ldr	r3, [pc, #188]	; (800c1b4 <scalbn+0xe4>)
 800c0f8:	429e      	cmp	r6, r3
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	460d      	mov	r5, r1
 800c0fe:	da12      	bge.n	800c126 <scalbn+0x56>
 800c100:	a327      	add	r3, pc, #156	; (adr r3, 800c1a0 <scalbn+0xd0>)
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	f7f4 fa23 	bl	8000550 <__aeabi_dmul>
 800c10a:	e009      	b.n	800c120 <scalbn+0x50>
 800c10c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c110:	428a      	cmp	r2, r1
 800c112:	d10c      	bne.n	800c12e <scalbn+0x5e>
 800c114:	ee10 2a10 	vmov	r2, s0
 800c118:	4620      	mov	r0, r4
 800c11a:	4629      	mov	r1, r5
 800c11c:	f7f4 f862 	bl	80001e4 <__adddf3>
 800c120:	4604      	mov	r4, r0
 800c122:	460d      	mov	r5, r1
 800c124:	e01c      	b.n	800c160 <scalbn+0x90>
 800c126:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c12a:	460b      	mov	r3, r1
 800c12c:	3a36      	subs	r2, #54	; 0x36
 800c12e:	4432      	add	r2, r6
 800c130:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c134:	428a      	cmp	r2, r1
 800c136:	dd0b      	ble.n	800c150 <scalbn+0x80>
 800c138:	ec45 4b11 	vmov	d1, r4, r5
 800c13c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c1a8 <scalbn+0xd8>
 800c140:	f000 f83c 	bl	800c1bc <copysign>
 800c144:	a318      	add	r3, pc, #96	; (adr r3, 800c1a8 <scalbn+0xd8>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	ec51 0b10 	vmov	r0, r1, d0
 800c14e:	e7da      	b.n	800c106 <scalbn+0x36>
 800c150:	2a00      	cmp	r2, #0
 800c152:	dd08      	ble.n	800c166 <scalbn+0x96>
 800c154:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c15c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c160:	ec45 4b10 	vmov	d0, r4, r5
 800c164:	bd70      	pop	{r4, r5, r6, pc}
 800c166:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c16a:	da0d      	bge.n	800c188 <scalbn+0xb8>
 800c16c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c170:	429e      	cmp	r6, r3
 800c172:	ec45 4b11 	vmov	d1, r4, r5
 800c176:	dce1      	bgt.n	800c13c <scalbn+0x6c>
 800c178:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c1a0 <scalbn+0xd0>
 800c17c:	f000 f81e 	bl	800c1bc <copysign>
 800c180:	a307      	add	r3, pc, #28	; (adr r3, 800c1a0 <scalbn+0xd0>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	e7e0      	b.n	800c14a <scalbn+0x7a>
 800c188:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c18c:	3236      	adds	r2, #54	; 0x36
 800c18e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c192:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c196:	4620      	mov	r0, r4
 800c198:	4629      	mov	r1, r5
 800c19a:	2200      	movs	r2, #0
 800c19c:	4b06      	ldr	r3, [pc, #24]	; (800c1b8 <scalbn+0xe8>)
 800c19e:	e7b2      	b.n	800c106 <scalbn+0x36>
 800c1a0:	c2f8f359 	.word	0xc2f8f359
 800c1a4:	01a56e1f 	.word	0x01a56e1f
 800c1a8:	8800759c 	.word	0x8800759c
 800c1ac:	7e37e43c 	.word	0x7e37e43c
 800c1b0:	43500000 	.word	0x43500000
 800c1b4:	ffff3cb0 	.word	0xffff3cb0
 800c1b8:	3c900000 	.word	0x3c900000

0800c1bc <copysign>:
 800c1bc:	ec51 0b10 	vmov	r0, r1, d0
 800c1c0:	ee11 0a90 	vmov	r0, s3
 800c1c4:	ee10 2a10 	vmov	r2, s0
 800c1c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c1cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c1d0:	ea41 0300 	orr.w	r3, r1, r0
 800c1d4:	ec43 2b10 	vmov	d0, r2, r3
 800c1d8:	4770      	bx	lr
	...

0800c1dc <_init>:
 800c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1de:	bf00      	nop
 800c1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e2:	bc08      	pop	{r3}
 800c1e4:	469e      	mov	lr, r3
 800c1e6:	4770      	bx	lr

0800c1e8 <_fini>:
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ea:	bf00      	nop
 800c1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ee:	bc08      	pop	{r3}
 800c1f0:	469e      	mov	lr, r3
 800c1f2:	4770      	bx	lr
